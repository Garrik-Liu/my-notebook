(window.webpackJsonp=window.webpackJsonp||[]).push([[192],{455:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-攻略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-攻略"}},[t._v("#")]),t._v(" Git 攻略")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("摘要")]),t._v(": 本文讲解 Git 是什么, 有什么用, 如何用 Git 进行版本控制, 以及 \b\b 大厂的版本管理策略.")])]),t._v(" "),s("h2",{attrs:{id:"git-干什么的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-干什么的"}},[t._v("#")]),t._v(" Git 干什么的?")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 官网"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("Git 是一个开源的分布式版本控制系统。")])]),t._v(" "),s("p",[t._v('版本控制是一种用来 "'),s("strong",[t._v("记录文件内容变化的系统，允许对指定版本的修订情况进行查阅，追溯")]),t._v('"。Git 是目前业界最流行的版本控制系統.')]),t._v(" "),s("p",[t._v("Git 是分布式的, "),s("strong",[t._v("每一个客户端都是一个独立的节点，在各自的节点上都有独立的一份完整的版本库")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("分布式的好处是，即使一个人的电脑出问题了，也可以直接从其他人那里克隆一份版本库。")]),t._v(" "),s("li",[t._v("分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便 “交换” 大家的修改，没有它大家也一样干活.")])]),t._v(" "),s("h2",{attrs:{id:"git-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-基础"}},[t._v("#")]),t._v(" Git 基础")]),t._v(" "),s("h3",{attrs:{id:"初始化仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化仓库"}},[t._v("#")]),t._v(" 初始化仓库")]),t._v(" "),s("p",[t._v("在一个目录下使用 "),s("code",[t._v("git init")]),t._v(" 指令初始化這個目錄，讓 Git 開始對這個目錄進行版本控制。")]),t._v(" "),s("p",[t._v("這個指令會在這個目錄裡建立了一個 "),s("code",[t._v(".git")]),t._v(" 隐藏目录. 这个目录是 Git 来管理版本库的, 它将默认记录项目目录中任何文件的改动。如果把 "),s("code",[t._v(".git")]),t._v(" 目录删除了，版本记录也就都没有了.")]),t._v(" "),s("h3",{attrs:{id:"文件状态-工作区域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件状态-工作区域"}},[t._v("#")]),t._v(" 文件状态 & 工作区域")]),t._v(" "),s("p",[t._v("在 Git 中文件有两种状态："),s("strong",[t._v("已跟踪（tracked）")]),t._v(" 和 "),s("strong",[t._v("未跟踪（untracked）")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("已跟踪（tracked）")]),t._v(" 又分为：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("已修改（modified）")])]),t._v(" "),s("li",[s("strong",[t._v("已暂存（staged）")])]),t._v(" "),s("li",[s("strong",[t._v("已提交（committed）")])])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("被 Git 管理的项目有三个工作区域：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("工作区 Working Directory")]),t._v(": 本地的工作目录，属于本地文件系统。")]),t._v(" "),s("li",[s("strong",[t._v("暂存区 Staging Area")]),t._v("：暂存本地文件的改动，准备将来进行提交。存放在"),s("code",[t._v(".git")]),t._v("目录下的 "),s("code",[t._v("index")]),t._v(" 文件（"),s("code",[t._v(".git/index")]),t._v("）中，所以我们把暂存区有时也叫作索引 Index。")]),t._v(" "),s("li",[s("strong",[t._v("版本库 Repository")]),t._v("：储存提交的版本记录。"),s("code",[t._v(".git")]),t._v(" 目录就是 Git 的本地版本库，不算是工作区的文件目录。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-19-09-28-21.png",alt:"2020-09-19-09-28-21"}})]),t._v(" "),s("h3",{attrs:{id:"检查当前文件状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查当前文件状态"}},[t._v("#")]),t._v(" 检查当前文件状态")]),t._v(" "),s("p",[t._v("在一个空目录下执行 "),s("code",[t._v("git init")]),t._v(". 之后使用命令 "),s("code",[t._v("git status")]),t._v(" 来查看这个目录的状态.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\nOn branch master\n\nInitial commit\n\nnothing to commit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create/copy files and use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" to track"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("表示目录中没有东西可以提交.")]),t._v(" "),s("h3",{attrs:{id:"跟踪新文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跟踪新文件"}},[t._v("#")]),t._v(" 跟踪新文件")]),t._v(" "),s("p",[t._v("在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 "),s("code",[t._v("git status")]),t._v(" 命令，你将看到一个新的未跟踪文件：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("On branch master\nUntracked files:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to include "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" what will be committed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    readme.md\n\nnothing added to commit but untracked files present "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" to track"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("在状态报告中可以看到新建的 README 文件出现在 Untracked files 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件.")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("现在用 "),s("code",[t._v("git add")]),t._v(" 跟踪 "),s("code",[t._v("readme.md")]),t._v(" 文件.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("On branch master\n\nNo commits yet\n\nChanges to be committed:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git rm --cached <file>..."')]),t._v(" to unstage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tnew file:   readme.md\n")])])]),s("p",[t._v("只要在 Changes to be committed 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。")]),t._v(" "),s("h3",{attrs:{id:"暂存已修改文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存已修改文件"}},[t._v("#")]),t._v(" 暂存已修改文件")]),t._v(" "),s("p",[t._v("现在修改一下之前被跟踪的 "),s("code",[t._v("readme.md")]),t._v(" 文件. 然后再执行 "),s("code",[t._v("git status")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("On branch master\n\nNo commits yet\n\nChanges to be committed:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git rm --cached <file>..."')]),t._v(" to unstage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tnew file:   readme.md\n\nChanges not staged "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git checkout -- <file>..."')]),t._v(" to discard changes "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tmodified:   readme.md\n")])])]),s("p",[s("code",[t._v("readme.md")]),t._v(" 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这个变动，需要运行 "),s("code",[t._v("git add")]),t._v(" 命令。")]),t._v(" "),s("p",[t._v("注意，"),s("code",[t._v("git add")]),t._v(" 这个命令将可以理解为 “"),s("strong",[t._v("添加变动到下一次提交中")]),t._v("” 而不是 “将一个文件添加到提交中”。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("添加完后, 在执行 "),s("code",[t._v("git status")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("On branch master\n\nNo commits yet\n\nChanges to be committed:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git rm --cached <file>..."')]),t._v(" to unstage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tnew file:   readme.md\n")])])]),s("p",[t._v("变动已暂存，下次提交时就会一并记录到仓库。")]),t._v(" "),s("h3",{attrs:{id:"提交更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交更新"}},[t._v("#")]),t._v(" 提交更新")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git commit")]),t._v(" 命令将已暂存的文件进行提交.这种方式会启动「 文本编辑器 」输入本次提交的说明。(默认会启用 shell 的环境变量 "),s("code",[t._v("$EDITOR")]),t._v(" 所指定的软件，一般都是 vim 或 emacs。)")]),t._v(" "),s("p",[t._v("也可以在 "),s("code",[t._v("commit")]),t._v(" 命令后添加 "),s("code",[t._v("-m")]),t._v(" 选项，将提交信息与命令放在同一行")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Story 182: Fix benchmarks for speed"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master 463dc4f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Story "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("182")]),t._v(": Fix benchmarks "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" speed\n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" files changed, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" insertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" README\n")])])]),s("p",[t._v("提交后它会告诉你：")]),t._v(" "),s("ul",[s("li",[t._v("当前是在哪个分支（"),s("code",[t._v("master")]),t._v("）提交的")]),t._v(" "),s("li",[t._v("本次提交的完整 SHA-1 校验和是什么（"),s("code",[t._v("463dc4f")]),t._v("），")]),t._v(" "),s("li",[t._v("在本次提交中，有多少文件修订过，多少行添加和删改过。")])]),t._v(" "),s("p",[s("code",[t._v("commit")]),t._v(" 命令加上 "),s("code",[t._v("-a")]),t._v(" 选项，Git 就会自动把所有"),s("strong",[t._v("已跟踪")]),t._v("的文件上的所有变动，暂存起来一并提交，跳过 "),s("code",[t._v("git add")]),t._v(" 步骤")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("如果此次提交暂存区没有任何变动, 但仍旧想要提交，则需要加上 "),s("code",[t._v("--allow-empty")]),t._v(" 参数.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --allow-empty -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"空的"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master 76a5b84"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 空的\n")])])]),s("h3",{attrs:{id:"校验和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#校验和"}},[t._v("#")]),t._v(" 校验和")]),t._v(" "),s("p",[t._v("改动在提交前，会基于文件的内容 & 目录结构计算出一个 SHA-1 散列值，作为当前提交的唯一索引 ID，称为「 "),s("strong",[t._v("校验和")]),t._v(" 」")]),t._v(" "),s("p",[t._v("SHA-1 散列是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一个 SHA-1 散列值：")]),t._v("\n24b9da6552252987aa493b52f8696cd6d3b00373\n")])])]),s("h3",{attrs:{id:"暂存-提交时发生了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存-提交时发生了什么"}},[t._v("#")]),t._v(" 暂存 & 提交时发生了什么")]),t._v(" "),s("p",[s("strong",[t._v("Git 保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照")]),t._v("。")]),t._v(" "),s("p",[t._v("在进行提交操作时，Git 会保存一个提交对象（commit object）, 该提交对象会包含一个指向内容快照的指针, 还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。")]),t._v(" "),s("p",[t._v("首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象。")]),t._v(" "),s("p",[t._v("假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("git add")]),t._v(" 暂存操作会为"),s("strong",[t._v('每一个文件计算 "校验和"')]),t._v("，然后会把当前版本的文件快照保存到 Git 仓库中（ Git 使用 blob 对象来保存它们 ），最终将校验和加入到暂存区域等待提交.")]),t._v(" "),s("li",[t._v("当使用 "),s("code",[t._v("git commit")]),t._v(" 进行提交操作时，Git 会先计算"),s("strong",[t._v("每一个子目录的校验和")]),t._v('，然后在 Git 仓库中这些校验和保存为 "树对象"。')]),t._v(" "),s("li",[t._v("随后，Git 便会"),s("strong",[t._v("创建一个提交对象")]),t._v("，它除了包含上面提到的提交信息外，还包含指向刚创建的树对象的指针。如此一来，Git 就可以在需要的时候重现此次保存的快照。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-19-20-10-54.png",alt:"2020-09-19-20-10-54"}})]),t._v(" "),s("p",[t._v("整套流程下来，Git 仓库中共创建了五个对象：")]),t._v(" "),s("ul",[s("li",[t._v("三个 blob 对象，保存着文件快照。")]),t._v(" "),s("li",[t._v("一个树对象，记录着目录结构，和对 blob 对象的索引。")]),t._v(" "),s("li",[t._v("一个提交对象，包含着指向树对象的指针，和所有提交信息。")])]),t._v(" "),s("h3",{attrs:{id:"状态简览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态简览"}},[t._v("#")]),t._v(" 状态简览")]),t._v(" "),s("p",[s("code",[t._v("git status")]),t._v(" 命令的输出十分详细，但其用语有些繁琐。 如果你使用 "),s("code",[t._v("git status -s")]),t._v(" 命令或 "),s("code",[t._v("git status --short")]),t._v(" 命令，你将得到一种更为紧凑的格式输出。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status -s\n M README\nMM Rakefile\nA  lib/git.rb\nM  lib/simplegit.rb\n?? LICENSE.txt\n")])])]),s("ul",[s("li",[t._v("新添加的未跟踪文件前面有 "),s("code",[t._v("??")]),t._v(" 标记。")]),t._v(" "),s("li",[t._v("新添加到暂存区中的文件前面有 "),s("code",[t._v("A")]),t._v(" 标记。")]),t._v(" "),s("li",[t._v("修改过的文件前面有 "),s("code",[t._v("M")]),t._v(" 标记。\n"),s("ul",[s("li",[t._v("出现在右边的 "),s("code",[t._v("M")]),t._v(" 表示该文件被修改了但是还没放入暂存区。")]),t._v(" "),s("li",[t._v("出现在靠左边的 "),s("code",[t._v("M")]),t._v(" 表示该文件被修改了并放入了暂存区。")]),t._v(" "),s("li",[t._v("文件前面有两个 "),s("code",[t._v("MM")]),t._v(", 表示在工作区被修改并提交到暂存区后，又在工作区中被修改了。")])])])]),t._v(" "),s("h3",{attrs:{id:"移除文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移除文件"}},[t._v("#")]),t._v(" 移除文件")]),t._v(" "),s("p",[s("code",[t._v("git rm")]),t._v(" 命令，用以移除指定文件的「 已跟踪 」状态，将其从 Git 仓库中移除。同时，将其从工作目录中移除。")]),t._v(" "),s("p",[s("code",[t._v("git rm -r")]),t._v(" 命令，用以删除目录。")]),t._v(" "),s("p",[s("code",[t._v("git rm --cached")]),t._v(" 命令，把文件从 Git 仓库中移除，但仍然希望保留在当前工作目录中。")]),t._v(" "),s("p",[t._v("如果"),s("strong",[t._v("已追踪文件删除之前修改过，并且已经放到暂存区")]),t._v("的话：")]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("git rm -f")]),t._v(" 命令，将文件强制删除。")]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("git rm --cached")]),t._v(" 命令，将其从 Git 仓库删除，但文件仍旧保存在工作目录。")])]),t._v(" "),s("p",[t._v("这是一种安全特性，用于防止误删还没有提交的更改。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" bogon:test xiangliu$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status -s\nM  test1\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" bogon:test xiangliu$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" test1\nerror: the following "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" has changes staged "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the index:\n    test1\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use --cached to keep the file, or -f to force removal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果只是简单地从工作目录中手工删除文件，删除操作被当做 Change 看待。运行 "),s("code",[t._v("git status")]),t._v(" 时就会看到，删除变动出现在 “Changes not staged for commit” 部分。")]),t._v(" "),s("h3",{attrs:{id:"忽略文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[t._v("#")]),t._v(" 忽略文件")]),t._v(" "),s("p",[t._v("有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。我们可以创建一个名为 "),s("code",[t._v(".gitignore")]),t._v(" 的文件，列出要忽略的文件模式。")]),t._v(" "),s("p",[t._v("比如:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("*."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("oa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n*~\n")])])]),s("p",[t._v("第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件.")]),t._v(" "),s("p",[t._v("要养成一开始就设置好 "),s("code",[t._v(".gitignore")]),t._v(" 文件的习惯，以免将来误提交无用的文件.")]),t._v(" "),s("p",[s("code",[t._v(".gitignore")]),t._v(" 的匹配模式规则如下：")]),t._v(" "),s("ul",[s("li",[t._v("使用标准的 "),s("code",[t._v("glob")]),t._v(" 模式匹配。")]),t._v(" "),s("li",[t._v("所有空行或者以 "),s("code",[t._v("＃")]),t._v(" 开头的行都会被 Git 忽略。")]),t._v(" "),s("li",[t._v("匹配模式可以以（"),s("code",[t._v("/")]),t._v("）开头，防止递归。")]),t._v(" "),s("li",[t._v("匹配模式可以以（"),s("code",[t._v("/")]),t._v("）结尾，指定目录。")]),t._v(" "),s("li",[t._v("要忽略指定模式以外的文件或目录，可以在模式前加 "),s("code",[t._v("!")]),t._v(" 取反。")])]),t._v(" "),s("p",[s("code",[t._v("glob")]),t._v(" 模式是指 shell 所使用的简化了的正则表达式:")]),t._v(" "),s("ul",[s("li",[t._v("星号（"),s("code",[t._v("*")]),t._v("）匹配零个或多个任意字符;")]),t._v(" "),s("li",[s("code",[t._v("[abc]")]),t._v(" 匹配任何一个列在方括号中的字符;")]),t._v(" "),s("li",[t._v("问号（"),s("code",[t._v("?")]),t._v("）只匹配一个任意字符;")]),t._v(" "),s("li",[t._v("如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 "),s("code",[t._v("[0-9]")]),t._v(" 表示匹配所有 0 到 9 的数字）;")]),t._v(" "),s("li",[t._v("使用两个星号 ("),s("code",[t._v("**")]),t._v(") 表示匹配任意中间目录，比如"),s("code",[t._v("a/**/z")]),t._v(" 可以匹配 "),s("code",[t._v("a/z")]),t._v(", "),s("code",[t._v("a/b/z")]),t._v(" 或 "),s("code",[t._v("a/b/c/z")]),t._v("等。")])]),t._v(" "),s("p",[t._v("下面有些例子:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# no .a files")]),t._v("\n*.a\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# but do track lib.a, even though you're ignoring .a files above")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lib.a\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# only ignore the TODO file in the current directory, not subdir/TODO")]),t._v("\n/TODO\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ignore all files in the build/ directory")]),t._v("\nbuild/\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ignore doc/notes.txt, but not doc/server/arch.txt")]),t._v("\ndoc/*.txt\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ignore all .pdf files in the doc/ directory")]),t._v("\ndoc/**/*.pdf\n")])])]),s("h3",{attrs:{id:"重置-撤销-提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重置-撤销-提交"}},[t._v("#")]),t._v(" 重置 ( 撤销 ) 提交")]),t._v(" "),s("h4",{attrs:{id:"reset-指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reset-指令"}},[t._v("#")]),t._v(" reset 指令")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("reset")]),t._v(" 指令，设置当前所在分支所指向的提交对象")]),t._v("。")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("^")]),t._v(" 符號表示「 前一次 」的意思")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让当前所在分支指向，当前提交对象的前一个提交对象。")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD^\n")])])]),s("p",[t._v("如果是 "),s("code",[t._v("HEAD^^")]),t._v(" 則是往前兩次，以此類推。不過如果要倒退五次，通常不會寫 "),s("code",[t._v("HEAD^^^^^")]),t._v("，而會寫成 "),s("code",[t._v("HEAD~5")]),t._v("。")]),t._v(" "),s("p",[t._v("假如 "),s("code",[t._v("HEAD")]),t._v(" 指向 "),s("code",[t._v("master")]),t._v(" 分支的 "),s("code",[t._v("e12d8ef")]),t._v(" 提交对象. 那么还可以写成:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# master 分支指向提交对象的前一个提交对象。")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset master^\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 校验和 ID 为 e12d8ef 的提交对象的前一个提交对象。")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset e12d8ef^\n")])])]),s("p",[t._v("这个指令有三个常用参数: "),s("code",[t._v("--soft")]),t._v(", "),s("code",[t._v("--hard")]),t._v(", "),s("code",[t._v("--mixed")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("--mixed")]),t._v(" 是 "),s("code",[t._v("reset")]),t._v(" 指令的默认参数. 它将重置 "),s("code",[t._v("HEAD")]),t._v(" 到另外一个提交, 并且重置暂存区，但你工作区的文件不会被更改。重置前所做的更改，都变成了「 未暂存，未跟踪 」的状态。")]),t._v(" "),s("li",[s("code",[t._v("--soft")]),t._v(" 参数重置 "),s("code",[t._v("HEAD")]),t._v(" 到另外一个提交，但暂存区和工作区都不会变化。")]),t._v(" "),s("li",[s("code",[t._v("--hard")]),t._v(" 参数，会让暂存区和工作区都会重置到目标提交所处的状态。所有与目标提交之间的变更，都会被丢弃。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO8dmv56PCuicTzZTVL6lVp541picccqwMAU36EhACmJCMttPvBJl8tXjQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1",alt:"gif"}}),t._v(" "),s("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOsiboiaLTHUnlyorlyicvxZtRT9tQD4fcX2VponJIcFUpZHbKKdP5p31vQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1",alt:"gif"}})]),t._v(" "),s("details",{staticClass:"custom-block details",attrs:{open:"open"}},[s("summary",[t._v("🌰 例子：")]),t._v(" "),s("p",[t._v("假如我们在目录中添加了一个文件叫 "),s("code",[t._v("myFile.md")]),t._v(", 并且进行了提交.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("bogon:git_practice xiangliu$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n0935e0d "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" my "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n2e0425c first commit\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("git reset HEAD^")]),t._v(" 后, 执行 "),s("code",[t._v("git status")]),t._v(" 看到 "),s("code",[t._v("myFile.md")]),t._v(" 为未跟踪状态, 但文件仍在工作区中.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("On branch master\nUntracked files:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to include "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" what will be committed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tmyFile.md\n\nnothing added to commit but untracked files present "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" to track"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("git reset HEAD^ --soft")]),t._v(" 后, 执行 "),s("code",[t._v("git status")]),t._v(" 看到 "),s("code",[t._v("myFile.md")]),t._v(" 在暂存区, 等待提交.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("On branch master\nChanges to be committed:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git reset HEAD <file>..."')]),t._v(" to unstage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tnew file:   myFile.md\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("git reset HEAD^ --hard")]),t._v(" 后, "),s("code",[t._v("myFile.md")]),t._v(" 直接没了.")]),t._v(" "),s("p",[t._v("因为使用了 "),s("code",[t._v("reset")]),t._v(" 后, 重置到的提交对象之后的提交仍然存在. 通过 "),s("code",[t._v("reset")]),t._v(" 再重置回你要的提交就可以再返回去. 如果你找不到你想要的提交对象的校验和是什么了, 可以通过 "),s("code",[t._v("git reflog")]),t._v(" 命令. 它可以查看所有分支的所有操作记录，包括已经被删除的提交记录")])]),t._v(" "),s("h4",{attrs:{id:"revert-指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#revert-指令"}},[t._v("#")]),t._v(" revert 指令")]),t._v(" "),s("p",[t._v("假如想撤销掉最近的一次提交。可以输入下面指令：")]),t._v(" "),s("p",[t._v("它会保留原来的提交, 并创建一个新的提交来表示撤销操作。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert HEAD --no-edit\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --no-edit 參數，表示不编辑提交信息。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#$ git revert HEAD^  撤销最近一次，以及最近一次提交的前一次提交")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#$ git revert [commit] 一直撤销到指定提交的前一次提交为止")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-13-59-34.png",alt:"2020-09-20-13-59-34"}})]),t._v(" "),s("p",[t._v("如果想再恢复之前的提交：")]),t._v(" "),s("ul",[s("li",[t._v("一种方法是，再用一次 "),s("code",[t._v("revert")]),t._v(" 执行「 撤销的撤销 」")]),t._v(" "),s("li",[t._v("另一种方法，用 "),s("code",[t._v("reset")]),t._v(" 指令，让分支指向想要的提价上。")])]),t._v(" "),s("h3",{attrs:{id:"查看提交历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看提交历史"}},[t._v("#")]),t._v(" 查看提交历史")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git log")]),t._v(" 命令查看提交历史。")]),t._v(" "),s("p",[t._v("默认不用任何参数的话，会按提交时间，由新到旧列出所有的提交信息：")]),t._v(" "),s("ul",[s("li",[t._v("SHA-1 校验和")]),t._v(" "),s("li",[t._v("作者的名字")]),t._v(" "),s("li",[t._v("电子邮件地址")]),t._v(" "),s("li",[t._v("提交时间")]),t._v(" "),s("li",[t._v("提交说明")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("garrikliu:a xiangliu$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\ncommit fb3afcd7ad8151207cec0ace9a6550c3e1589f81 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nAuthor: Garrik-Liu "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("garrikliu@Gmail.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Mon Feb "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":55:48 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2019")]),t._v(" +0800\n\n    deleted readme\n\ncommit 022abc8b56edac279d3aa28981913e378bca136b\nAuthor: Garrik-Liu "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("garrikliu@Gmail.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Sun Feb "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" 09:56:44 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2019")]),t._v(" +0800\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" readme.md\n")])])]),s("p",[t._v("可以加上 "),s("code",[t._v("-2")]),t._v(" 参数，来仅显示最近两次提交。同理 "),s("code",[t._v("-3")]),t._v(" 就是最近的三次提交。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" bogon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("test xiangliu$ git log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\ncommit "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cb171cbaa507ba9663ce776e8fd071d48bf9e9b6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nAuthor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Garrik"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Liu "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("garrikliu@Gmail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   Sat Sep "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("09")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("41")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("45")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0800")]),t._v("\n\n    add test1\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("--stat")]),t._v(" 选项，查看每次提交的详细信息。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("commit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("schacon@gee-mail.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Sat Mar "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(":31:28 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2008")]),t._v(" -0700\n\n    first commit\n\n README           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" ++++++\n Rakefile         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),t._v(" +++++++++++++++++++++++\n lib/simplegit.rb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" +++++++++++++++++++++++++\n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" files changed, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("54")]),t._v(" insertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("通过选项 "),s("code",[t._v("--pretty")]),t._v(" 来使用指定的格式展示提交历史。它有一些内建的子选项供你使用：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("oneline")]),t._v(" 将每个提交放在一行显示。")])]),t._v(" "),s("p",[t._v("具体使用细节，请参考"),s("a",{attrs:{href:"https://git-scm.com/docs/pretty-formats",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n")])])]),s("h3",{attrs:{id:"查看操作历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看操作历史"}},[t._v("#")]),t._v(" 查看操作历史")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git reflog")]),t._v(" 指令，可以显示所有已执行操作的日志。")]),t._v(" "),s("p",[t._v("如果你不幸犯错了，你可以使用 "),s("code",[t._v("git reflog")]),t._v(" 的信息通过重置 HEAD 轻松地回到想要的提交上。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-14-07-43.gif",alt:"2020-09-20-14-07-43"}})]),t._v(" "),s("p",[t._v("假设，我们不想合并分支了。执行 "),s("code",[t._v("git reflog")]),t._v(" 命令，我们看到合并之前的仓库状态位于 "),s("code",[t._v("HEAD@{1}")]),t._v(" 这个地方，我们使用 "),s("code",[t._v("git reset")]),t._v(" 指令将 "),s("code",[t._v("HEAD")]),t._v(" 头指向 "),s("code",[t._v("HEAD@{1}")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"打标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打标签"}},[t._v("#")]),t._v(" 打标签")]),t._v(" "),s("p",[t._v("Git 可以给历史中的某一个提交打上标签。")]),t._v(" "),s("p",[t._v("常见使用场景是，使用这个功能来标记版本发布结点，例如 "),s("code",[t._v("v1.0")]),t._v("，"),s("code",[t._v("v2.1")]),t._v("，"),s("code",[t._v("v3.0")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"列出标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列出标签"}},[t._v("#")]),t._v(" 列出标签")]),t._v(" "),s("p",[s("code",[t._v("git tag")]),t._v(" 列出已有标签")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\nv0.1\nv1.3\n")])])]),s("p",[s("code",[t._v("-l")]),t._v(" 参数可以查号特定标签")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -l "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'v1.8.5*'")]),t._v("\nv1.8.5\nv1.8.5-rc0\nv1.8.5-rc1\nv1.8.5-rc2\n")])])]),s("h4",{attrs:{id:"创建标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建标签"}},[t._v("#")]),t._v(" 创建标签")]),t._v(" "),s("p",[t._v("Git 使用两种主要类型的标签：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("轻量标签")]),t._v("（lightweight）只是对一个特定提交的引用。")]),t._v(" "),s("li",[s("strong",[t._v("附注标签")]),t._v("（annotated）是存储在 Git 仓库中的一个完整对象。其中包含：\n"),s("ul",[s("li",[t._v("打标签者的名字")]),t._v(" "),s("li",[t._v("电子邮件地址")]),t._v(" "),s("li",[t._v("日期时间")]),t._v(" "),s("li",[t._v("一个标签信息")])])])]),t._v(" "),s("p",[t._v("通常建议创建「 附注标签 」，这样你可以拥有以上所有信息。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("创建「 "),s("strong",[t._v("轻量标签")]),t._v(" 」只需要提供标签名字:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag v1.4-lw\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\nv0.1\nv1.3\nv1.4\nv1.4-lw\nv1.5\n")])])]),s("p",[t._v("在标签上运行 "),s("code",[t._v("git show")]),t._v("，你不会看到额外的标签信息。 命令只会显示出提交信息：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show v1.4-lw\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("schacon@gee-mail.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Mon Mar "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(":52:11 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2008")]),t._v(" -0700\n\n    changed the version number\n")])])]),s("p",[t._v("创建一个「 "),s("strong",[t._v("附注标签")]),t._v(" 」, 最简单的方式是当你在运行 "),s("code",[t._v("tag")]),t._v(" 命令时指定 "),s("code",[t._v("-a")]),t._v(" 选项：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a v1.4 -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my version 1.4'")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\nv0.1\nv1.3\nv1.4\n")])])]),s("p",[s("code",[t._v("-m")]),t._v(" 选项指定了一条将会存储在标签中的信息。 如果没有为附注标签指定一条信息，Git 会运行编辑器要求你输入信息。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git show")]),t._v(" 命令可以看到标签信息与对应的提交信息：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show v1.4\ntag v1.4\nTagger: Ben Straub "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ben@straub.cc"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Sat May "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(":19:12 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2014")]),t._v(" -0700\n\nmy version "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.4")]),t._v("\n\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("schacon@gee-mail.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Mon Mar "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(":52:11 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2008")]),t._v(" -0700\n\n    changed the version number\n")])])]),s("p",[t._v("如果要给 "),s("strong",[t._v("过去的提交")]),t._v(" 打标签, 需要在命令的末尾指定提交的校验和")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a v1.2 9fceb02\n")])])]),s("h4",{attrs:{id:"删除标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除标签"}},[t._v("#")]),t._v(" 删除标签")]),t._v(" "),s("p",[t._v("命令 "),s("code",[t._v("git tag -d <tagname>")]),t._v(" 可以删除指定标签:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d v1.4-lw\nDeleted tag "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'v1.4-lw'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("was e7d5add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"使用分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用分支"}},[t._v("#")]),t._v(" 使用分支")]),t._v(" "),s("h3",{attrs:{id:"分支简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支简介"}},[t._v("#")]),t._v(" 分支简介")]),t._v(" "),s("p",[s("strong",[t._v("Git 的分支，其实本质上仅仅是指向提交对象的指针")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-19-20-10-35.png",alt:"2020-09-19-20-10-35"}})]),t._v(" "),s("p",[t._v("由于 Git 的分支实质上仅是包含所指对象校验和的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符）")]),t._v(" "),s("h3",{attrs:{id:"head"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" HEAD")]),t._v(" "),s("p",[t._v("HEAD 是一個指针，指向某一個分支，可以把 HEAD 當做「 "),s("strong",[t._v("目前所在分支")]),t._v(" 」看待。在 "),s("code",[t._v(".git")]),t._v(" 目錄裡有一個檔名為 HEAD 的文件，記錄著 HEAD 所指向的分支。")]),t._v(" "),s("div",{staticClass:"language-dash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ cat .git/HEAD\nref: refs/heads/master\n")])])]),s("h3",{attrs:{id:"分支创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支创建"}},[t._v("#")]),t._v(" 分支创建")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git branch")]),t._v(" 命令创建新分支, 会在当前所在的提交对象上创建一个指针.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch testing\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("git log")]),t._v(" 命令的 "),s("code",[t._v("--decorate")]),t._v(" 参数, 可以查看各个分支当前所指的对象。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline --decorate\nf30ab "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD, master, testing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" feature "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#32 - ability to add new")]),t._v("\n34ac2 fixed bug "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#1328 - stack overflow under certain conditions")]),t._v("\n98ca9 initial commit of my project\n")])])]),s("h3",{attrs:{id:"分支切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支切换"}},[t._v("#")]),t._v(" 分支切换")]),t._v(" "),s("p",[t._v("要切换到一个已存在的分支，你需要使用 "),s("code",[t._v("git checkout")]),t._v(" 命令。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout testing\n")])])]),s("p",[t._v("如果想新建一个分支, 同时切换到这个分支上可以使用 \b"),s("code",[t._v("git checkout")]),t._v(" 的 "),s("code",[t._v("-b")]),t._v(" 参数.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b testing\n")])])]),s("p",[t._v("把分支切换回 master. HEAD 指回 master 分支，同时工作目录恢复成 master 分支所指向的快照内容。然后在 master 分支上, 做一些内容修改, 并且提交, 则项目出现分支分叉情况.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2019/02/19/5c6b71064e0f2.png",alt:"advance-master"}})]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git log")]),t._v(" 命令查看分叉历史。 运行 "),s("code",[t._v("git log --oneline --decorate --graph --all")]),t._v(" ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline --decorate --graph --all\n* c2b9e "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD, master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" made other changes\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" * 87ab2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" made a change\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("/\n* f30ab "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" feature "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#32 - ability to add new formats to the")]),t._v("\n* 34ac2 fixed bug "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#1328 - stack overflow under certain conditions")]),t._v("\n* 98ca9 initial commit of my project\n")])])]),s("h3",{attrs:{id:"合并分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git merge")]),t._v(" 命令可以合并分支.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge hotfix\nUpdating f42c576"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("3a0874c\nFast-forward\n index.html "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" ++\n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" insertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上面命令里, 切换到 "),s("code",[t._v("master")]),t._v(" 分支, 然后把 "),s("code",[t._v("hotfix")]),t._v(" 分支合并进来.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2019/02/19/5c6b711339866.png",alt:"basic-branching-4"}})]),t._v(" "),s("p",[t._v("如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，只会简单的将指针向前推进，这被称为「 "),s("strong",[t._v("fast-forward 快进合并")]),t._v(" 」这种情况下的合并操作没有需要解决的分歧。")]),t._v(" "),s("p",[t._v("当前 "),s("code",[t._v("master")]),t._v(" 分支所指向的提交，是要合并进来的分支所指向的提交的直接上游，所以 Git 只是简单的将 "),s("code",[t._v("master")]),t._v(" 分支的指针向前移动。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-19-21-45-53.gif",alt:"2020-09-19-21-45-53"}})]),t._v(" "),s("p",[t._v("如果要合并两个之间存在分叉的分支。Git 就需要做「 "),s("strong",[t._v("no-fast-forward 合并")]),t._v(" 」了。")]),t._v(" "),s("p",[t._v("Git 会使用两个分支所指向的提交, 以及这两个分支上的第一个共同提交，做一个简单的三方合并。Git 会在当前分支（ active branch ）上额外创建一个新的「 "),s("strong",[t._v("合并提交")]),t._v(" merging commit 」这条提交记录既指向当前分支，又指向合并分支。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-19-21-50-00.png",alt:"2020-09-19-21-50-00"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-19-21-50-39.png",alt:"2020-09-19-21-50-39"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-13-20-56.gif",alt:"2020-09-20-13-20-56"}})]),t._v(" "),s("p",[t._v("如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，「 "),s("strong",[t._v("冲突")]),t._v(" conflict 」就会出现。")]),t._v(" "),s("p",[t._v("合并时 Git 会等待你去解决合并产生的冲突。 你可以使用 "),s("code",[t._v("git status")]),t._v(" 命令来查看那些，包含合并冲突的，处于未合并（ unmerged ）状态的文件：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 尝试合并")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge iss53\nAuto-merging iss53\nCONFLICT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": Merge conflict "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" iss53\nAutomatic merge failed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" fix conflicts and "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" commit the result.\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看包含冲突的文件")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\nOn branch master\nYou have unmerged paths.\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fix conflicts and run "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git commit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nUnmerged paths:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to mark resolution"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    both modified:      index.html\n\nno changes added to commit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" and/or "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git commit -a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("在你解决了所有文件里的冲突之后，对每个文件使用 "),s("code",[t._v("git add")]),t._v(" 命令来将其标记为冲突已解决，并暂存。之后输入 "),s("code",[t._v("git commit")]),t._v(" 来完成合并提交。")]),t._v(" "),s("h3",{attrs:{id:"删除分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),s("p",[t._v("在合并完之后, 你可以用 "),s("code",[t._v("git branch -d")]),t._v(" 来删除掉不需要的分支。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("$ git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d iss53\nDeleted branch "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iss53")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("was aa722a3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),s("h3",{attrs:{id:"查看分支列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看分支列表"}},[t._v("#")]),t._v(" 查看分支列表")]),t._v(" "),s("p",[s("code",[t._v("git branch")]),t._v(" 命令如果不加任何参数运行它，会得到当前所有分支的一个列表")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n  iss53\n* master\n  testing\n")])])]),s("p",[s("code",[t._v("*")]),t._v(" 表示当前 HEAD 指针所指向的分支. 这意味着如果在这时候提交，master 分支将会随着新的工作向前移动。")]),t._v(" "),s("h3",{attrs:{id:"查看分支最后提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看分支最后提交"}},[t._v("#")]),t._v(" 查看分支最后提交")]),t._v(" "),s("p",[t._v("如果需要查看每一个分支的最后一次提交，可以运行 "),s("code",[t._v("git branch -v")]),t._v(" 命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 Merge branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'iss53'")]),t._v("\n  testing 782fd34 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" scott to the author list "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the readmes\n")])])]),s("h4",{attrs:{id:"查看「-已合并-未合并-」分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看「-已合并-未合并-」分支"}},[t._v("#")]),t._v(" 查看「 已合并 / 未合并 」分支")]),t._v(" "),s("p",[s("code",[t._v("--merged")]),t._v(" 与 "),s("code",[t._v("--no-merged")]),t._v(" 选项可以过滤分支列表中，已合并或未合并到当前分支的分支。")]),t._v(" "),s("p",[t._v("在这个列表中分支名字前没有 "),s("code",[t._v("*")]),t._v(" 号的分支，代表已经将它们的工作整合到了另一个分支中。通常可以使用 "),s("code",[t._v("git branch -d")]),t._v(" 删除掉。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --merged\n  iss53\n* master\n")])])]),s("h3",{attrs:{id:"变基"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变基"}},[t._v("#")]),t._v(" 变基")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("rebase")]),t._v(" 命令，执行变基操作，将一条分支上的提交，按照原有次序依次应用到另一分支上。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-13-21-54.gif",alt:"2020-09-20-13-21-54"}})]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout experiment\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\nFirst, rewinding "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" to replay your work on "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" of it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nApplying: added staged "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v("\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("git rebase [basebranch] [topicbranch]")]),t._v(" 命令可以直接将 Topic Branch 分支，即 experiment，变基到 Base Branch 分支上，即 master。")]),t._v(" "),s("p",[t._v("这样做能省去你先切换到 experiment 分支，再对其执行变基命令的多个步骤。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master experiment\n")])])]),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-09-05-50.png",alt:"2020-09-20-09-05-50"}})]),t._v(" "),s("p",[t._v("变基操作使得提交历史更加整洁。 在一条经过变基的分支上，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。")]),t._v(" "),s("h4",{attrs:{id:"交互式变基"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#交互式变基"}},[t._v("#")]),t._v(" 交互式变基")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git rebase -i")]),t._v(" 选项，进入交互式变基模式。Git 会打开文本编辑器，提交记录按照「 从旧到新 」排列。")]),t._v(" "),s("p",[t._v("在每一条提交上，可以应用很多种操作模式：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("pick")]),t._v("，简写 "),s("code",[t._v("p")]),t._v("：留下此提交。")]),t._v(" "),s("li",[s("code",[t._v("reword")]),t._v("，简写 "),s("code",[t._v("r")]),t._v("：留下此提交，但修改提交信息。")]),t._v(" "),s("li",[s("code",[t._v("edit")]),t._v("，简写 "),s("code",[t._v("e")]),t._v("：修改此提交。")]),t._v(" "),s("li",[s("code",[t._v("squash")]),t._v("，简写 "),s("code",[t._v("s")]),t._v("：将此提交合并到之前的提交中。")]),t._v(" "),s("li",[s("code",[t._v("fixup")]),t._v("，简写 "),s("code",[t._v("f")]),t._v("：将当前提交合并到之前的提交中，不保留提交消息。")]),t._v(" "),s("li",[s("code",[t._v("drop")]),t._v("，简写 "),s("code",[t._v("d")]),t._v("：删除提交。")]),t._v(" "),s("li",[s("code",[t._v("exec")]),t._v("，简写 "),s("code",[t._v("x")]),t._v("：在每一个需要变基的提交上执行一条命令。")])]),t._v(" "),s("p",[t._v("最常见的应用场景就是，合并提交记录。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-13-20-00.gif",alt:"2020-09-20-13-20-00"}})]),t._v(" "),s("h4",{attrs:{id:"变基的风险"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变基的风险"}},[t._v("#")]),t._v(" 变基的风险")]),t._v(" "),s("p",[t._v("变基的准则：")]),t._v(" "),s("ul",[s("li",[t._v("只把变基操作当作是在推送前，清理提交的工具。")]),t._v(" "),s("li",[s("strong",[t._v("只对尚未推送或分享给别人的本地提交执行变基操作，从不对已推送至别处的提交执行变基操作")]),t._v("。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。")]),t._v(" "),s("p",[t._v("如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交，并进行了后续工作。")]),t._v(" "),s("p",[t._v("此时，如果你用 "),s("code",[t._v("git rebase")]),t._v(" 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。")]),t._v(" "),s("p",[t._v("🌰 看个例子:")]),t._v(" "),s("p",[t._v("假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。 你的提交历史如图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-11-01-45.png",alt:"2020-09-20-11-01-45"}})]),t._v(" "),s("p",[t._v("然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。 你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-11-02-09.png",alt:"2020-09-20-11-02-09"}})]),t._v(" "),s("p",[t._v("接下来，这个人又决定把合并操作回滚，改用变基；继而又用 "),s("code",[t._v("git push --force")]),t._v(" 命令覆盖了服务器上的提交历史。 之后你从服务器抓取更新，会发现多出来一些新的提交。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-11-02-24.png",alt:"2020-09-20-11-02-24"}})]),t._v(" "),s("p",[t._v("结果就是你们两人的处境都十分尴尬。 如果你执行 "),s("code",[t._v("git pull")]),t._v(" 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-11-01-32.png",alt:"2020-09-20-11-01-32"}})]),t._v(" "),s("p",[t._v("此时如果你执行 "),s("code",[t._v("git log")]),t._v(" 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。 此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。 很明显对方并不想在提交历史中看到 C4 和 C6，因为之前就是他把这两个提交通过变基丢弃的。")]),t._v(" "),s("h4",{attrs:{id:"用变基解决变基"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用变基解决变基"}},[t._v("#")]),t._v(" 用变基解决变基")]),t._v(" "),s("p",[t._v("遇到上述情况，不要执行合并，而是执行 "),s("code",[t._v("git rebase teamone/master")]),t._v(", Git 将会：")]),t._v(" "),s("ul",[s("li",[t._v("检查哪些提交是我们的分支上独有的（ C2，C3，C4，C6，C7 ）")]),t._v(" "),s("li",[t._v("检查其中哪些提交不是合并操作的结果（ C2，C3，C4 ）")]),t._v(" "),s("li",[t._v("检查哪些提交的内容是目标分支不具备的（ 只有 C2 和 C3，因为 C4 其实就是 C4' ）")]),t._v(" "),s("li",[t._v("把这些提交应用在 "),s("code",[t._v("teamone/master")]),t._v(" 上面")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-11-01-12.png",alt:"2020-09-20-11-01-12"}})]),t._v(" "),s("p",[t._v("本例中使用 "),s("code",[t._v("git pull --rebase")]),t._v(" 命令可以完成上述操作. 它的意思是先 "),s("code",[t._v("git fetch")]),t._v("，再 "),s("code",[t._v("git rebase teamone/master")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[t._v("#")]),t._v(" 远程仓库")]),t._v(" "),s("p",[t._v("远程仓库是指，托管在网络中的版本库. 与他人协作时, 可以在这个远程仓库上根据需要「 Push 推送 」或「 Fetch 拉取 」数据。")]),t._v(" "),s("p",[t._v("下图各指令与远端库，本地库，暂存区，工作目录之间的关系：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-13-28-15.png",alt:"2020-09-20-13-28-15"}})]),t._v(" "),s("h3",{attrs:{id:"添加远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加远程仓库"}},[t._v("#")]),t._v(" 添加远程仓库")]),t._v(" "),s("h4",{attrs:{id:"添加远程库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加远程库"}},[t._v("#")]),t._v(" 添加远程库")]),t._v(" "),s("p",[t._v("场景: 先有本地库, 后有远程库")]),t._v(" "),s("p",[t._v("运行 "),s("code",[t._v("git remote add <shortname> <url>")]),t._v(" 添加一个新的远程仓库，同时可以为仓库指定一个名字。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\norigin\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" pb https://github.com/paulboone/ticgit\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\norigin\thttps://github.com/schacon/ticgit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin\thttps://github.com/schacon/ticgit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npb\thttps://github.com/paulboone/ticgit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npb\thttps://github.com/paulboone/ticgit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"从现有仓库克隆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从现有仓库克隆"}},[t._v("#")]),t._v(" 从现有仓库克隆")]),t._v(" "),s("p",[t._v("应用场景: 先有远程库, 后有本地库")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git clone [url]")]),t._v(" 指令把远程库克隆到本地。克隆的远程仓库默认名称 "),s("code",[t._v("origin")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git://github.com/schacon/grit.git\n")])])]),s("p",[t._v("如果你想在克隆远程仓库的时候，自定义本地仓库的目录名，可以在命令末尾指定新的名字。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git clone <版本库的网址> <本地目录名>")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git://github.com/schacon/grit.git myFolder\n")])])]),s("h3",{attrs:{id:"查看远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看远程仓库"}},[t._v("#")]),t._v(" 查看远程仓库")]),t._v(" "),s("p",[t._v("运行 "),s("code",[t._v("git remote")]),t._v(" 命令，它会列出当前仓库配置的每一个远程仓库的名字。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\norigin\n")])])]),s("p",[t._v("选项 "),s("code",[t._v("-v")]),t._v("，会显示，每个远程仓库执行 "),s("code",[t._v("fetch")]),t._v(" 和 "),s("code",[t._v("pull")]),t._v(" 操作时对应的 URL。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\norigin\thttps://github.com/schacon/ticgit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin\thttps://github.com/schacon/ticgit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果想要查看某一个远程仓库的更多信息，可以使用 "),s("code",[t._v("git remote show [remote-name]")]),t._v(" 命令")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote show origin\n* remote origin\n  Fetch URL: https://github.com/schacon/ticgit\n  Push  URL: https://github.com/schacon/ticgit\n  HEAD branch: master\n  Remote branches:\n    master                               tracked\n    dev-branch                           tracked\n  Local branch configured "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git pull'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v("\n    master merges with remote master\n  Local ref configured "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git push'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v("\n    master pushes to master "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("up to "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"拉取-fetch-抓取-pull"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拉取-fetch-抓取-pull"}},[t._v("#")]),t._v(" 拉取 fetch & 抓取 pull")]),t._v(" "),s("p",[s("code",[t._v("git fetch [remote-name]")]),t._v(" 命令会访问远程仓库，从中 "),s("strong",[t._v("拉取")]),t._v(" 所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。")]),t._v(" "),s("p",[s("code",[t._v("git fetch")]),t._v(" 命令并不会自动合并或修改你当前的工作。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-13-26-16.gif",alt:"2020-09-20-13-26-16"}})]),t._v(" "),s("p",[s("code",[t._v("git pull")]),t._v(" 命令等同于 "),s("code",[t._v("git fetch")]),t._v(" + "),s("code",[t._v("git merge")]),t._v("。不但拉取，还会进行合并。")]),t._v(" "),s("h3",{attrs:{id:"推送到远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推送到远程仓库"}},[t._v("#")]),t._v(" 推送到远程仓库")]),t._v(" "),s("p",[t._v("使用命令 "),s("code",[t._v("git push [remote-name] [branch-name]")]),t._v(" 将你本地的内容推送到远端服务器.")]),t._v(" "),s("p",[t._v("Push 指令其實做了幾件事：")]),t._v(" "),s("ul",[s("li",[t._v("把 "),s("code",[t._v("[branch-name]")]),t._v(" 這個分支的內容，推向 "),s("code",[t._v("[remote-name]")]),t._v(" 這個位置。")]),t._v(" "),s("li",[t._v("在 "),s("code",[t._v("[remote-name]")]),t._v(" 那個远端上，如果 "),s("code",[t._v("[branch-name]")]),t._v(" 不存在，就建立一個叫做 "),s("code",[t._v("[branch-name]")]),t._v(" 的同名分支。")]),t._v(" "),s("li",[t._v("但如果远端上就存在 "),s("code",[t._v("[branch-name]")]),t._v(" 分支，便会让 "),s("code",[t._v("[branch-name]")]),t._v(" 分支指向最新的提交上。")])]),t._v(" "),s("p",[t._v("只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。")]),t._v(" "),s("p",[t._v("你必须先将他们的工作 "),s("code",[t._v("fetch")]),t._v(" 抓取下来，并将其合并 "),s("code",[t._v("merge")]),t._v(" 进你的工作后才能推送。"),s("code",[t._v("git pull")]),t._v(" 拉取命令可以直接帮你实现这两步。")]),t._v(" "),s("h4",{attrs:{id:"upstream-上游"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#upstream-上游"}},[t._v("#")]),t._v(" upstream 上游")]),t._v(" "),s("p",[t._v("可以给分支设定一个「 "),s("strong",[t._v("上游 upstream")]),t._v(" 」分支。"),s("strong",[t._v("在分支上执行 "),s("code",[t._v("pull")]),t._v(", "),s("code",[t._v("fetch")]),t._v(", "),s("code",[t._v("push")]),t._v(" 命令时，不需要额外的参数，默认将上游分支作为目标")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("通常 upstream 是远端服务器上的某个分支，但也可以设定为在本地端的其它分支。")])]),t._v(" "),s("p",[t._v("通过 "),s("code",[t._v("git push -u [远程服务器] [本地分支:远端分支]")]),t._v(" 指令来设定 upstream。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master:master\n")])])]),s("ul",[s("li",[t._v("上面指令将远端 "),s("code",[t._v("origin")]),t._v(" 上的 "),s("code",[t._v("master")]),t._v(" 分支設定為本地 "),s("code",[t._v("master")]),t._v(" 分支的上游 upstream。")]),t._v(" "),s("li",[t._v("当直接执行 "),s("code",[t._v("git push")]),t._v(" 指令是，就会把本地 master 分支上的内容，更新到远端的 master 分支上。如果远端不存在 master 分支，则自动创建一个。")])]),t._v(" "),s("p",[t._v("上面的指令可以简写为：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])]),s("p",[t._v("如果远端的分支名和本地的不同，则不能简写：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master:cat\n")])])]),s("h3",{attrs:{id:"远程仓库的移除与重命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库的移除与重命名"}},[t._v("#")]),t._v(" 远程仓库的移除与重命名")]),t._v(" "),s("p",[t._v("运行 "),s("code",[t._v("git remote rename")]),t._v(" 去修改一个远程仓库的简写名")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),t._v(" pb paul\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\norigin\npaul\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("git remote rm")]),t._v(" 移除一个远程仓库")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" paul\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\norigin\n")])])]),s("h2",{attrs:{id:"修改历史记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改历史记录"}},[t._v("#")]),t._v(" 修改历史记录")]),t._v(" "),s("h3",{attrs:{id:"修改提交信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改提交信息"}},[t._v("#")]),t._v(" 修改提交信息")]),t._v(" "),s("h4",{attrs:{id:"修改最近一次提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改最近一次提交"}},[t._v("#")]),t._v(" 修改最近一次提交")]),t._v(" "),s("p",[t._v("要修改最後一次的 Commit 訊息，只要直接在 Commit 指令後面加上 "),s("code",[t._v("--amend")]),t._v(" 參數即可：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Welcome To Facebook"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master 614a90c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Welcome To Facebook\nDate: Wed Aug "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" 05:42:56 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2017")]),t._v(" +0800\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" insertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" deletions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncreate mode "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" config/database.yml\n")])])]),s("h4",{attrs:{id:"修改更早的提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改更早的提交"}},[t._v("#")]),t._v(" 修改更早的提交")]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("rebase")]),t._v(" 命令的互动模式来修改更早的提交信息.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看提交记录")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n27f6ed6 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n2bab3e7 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nca40fc9 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" cats\n1de2076 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\ncd82f29 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n382a2a5 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" database settings\nbb0c9c2 init commit\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 变基")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i bb0c9c2\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pick 382a2a5 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" database settings\npick cd82f29 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\npick 1de2076 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\npick ca40fc9 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" cats\npick 2bab3e7 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\npick 27f6ed6 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Rebase bb0c9c2..27f6ed6 onto bb0c9c2 (6 commands)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Commands:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# p, pick = use commit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# r, reword = use commit, but edit the commit message")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# e, edit = use commit, but stop for amending")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# s, squash = use commit, but meld into previous commit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# f, fixup = like "squash", but discard this commit\'s log message')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# x, exec = run command (the rest of the line) using shell")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# d, drop = remove commit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# These lines can be re-ordered; they are executed from top to bottom.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you remove a line here THAT COMMIT WILL BE LOST.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# However, if you remove everything, the rebase will be aborted.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Note that empty commits are commented out")]),t._v("\n")])])]),s("p",[t._v("将想要改信息的提交前面的 "),s("code",[t._v("pick")]),t._v(" 改成 "),s("code",[t._v("reword")]),t._v("，或是 "),s("code",[t._v("r")]),t._v(", 就表示待會我要來修改這兩次提交的信息.")]),t._v(" "),s("p",[t._v("因为提交改变了, 提交的 SHA-1 也就改变了. 之後的 Commit 因為前面的歷史改了，所以後面整串的 Commit 全部都重新做出新的 Commit 出來替代舊的 Commit。")]),t._v(" "),s("h3",{attrs:{id:"合并多个提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并多个提交"}},[t._v("#")]),t._v(" 合并多个提交")]),t._v(" "),s("p",[s("code",[t._v("rebase")]),t._v(" 的互动模式同样也可以合并多个提交, 以来让提交历史更简洁.")]),t._v(" "),s("p",[t._v("把想要合并的提交前的指令改成 "),s("code",[t._v("squash")]),t._v(" 或 "),s("code",[t._v("s")]),t._v(". 也可以用 "),s("code",[t._v("fixup")]),t._v(" 它与 "),s("code",[t._v("squash")]),t._v(" 相同，但不会保存当前 commit 的提交信息")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pick 382a2a5 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" database settings\npick cd82f29 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nsquash 1de2076 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nsquash ca40fc9 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" cats\npick 2bab3e7 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nsquash 27f6ed6 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),s("ul",[s("li",[t._v("最後一行的 "),s("code",[t._v("27f6ed6")]),t._v(" 會跟前一個 Commit "),s("code",[t._v("2bab3e7")]),t._v(" 進行合併")]),t._v(" "),s("li",[t._v("倒數第三號的 "),s("code",[t._v("ca40fc9")]),t._v(" 會跟前一個 Commit "),s("code",[t._v("1de2076")]),t._v(" 合併，但因為 "),s("code",[t._v("1de2076")]),t._v(" 又會再往前一個 Commit "),s("code",[t._v("cd82f29")]),t._v(" 合併")])]),t._v(" "),s("p",[t._v("存檔並離開 Vim 編輯器後，它會開始進行 Rebase，而在 Squash 的過程中，它還會跳出 Vim 編輯器讓你編輯一下訊息")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2019/02/20/5c6cdf896c1d5.png",alt:"squash1"}})]),t._v(" "),s("p",[t._v("把訊息改成「add all cats」：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2019/02/20/5c6cdf94aac1e.png",alt:"squash2"}})]),t._v(" "),s("h3",{attrs:{id:"将一个提交拆成多个"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将一个提交拆成多个"}},[t._v("#")]),t._v(" 将一个提交拆成多个")]),t._v(" "),s("p",[t._v("如果你在一个提交里做了多出改动, 你之后想把它拆成多个提交, 同樣也可使用互動模式的 Rebase 來操作.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n27f6ed6 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n2bab3e7 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nca40fc9 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" cats\n1de2076 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\ncd82f29 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n382a2a5 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" database settings\nbb0c9c2 init commit\n")])])]),s("p",[t._v("假如 "),s("code",[t._v("ca40fc9")]),t._v(" 這個 Commit 一口氣增加了兩個檔案，我想把它拆成兩個提交. 我们需要进入互动模式, 把要拆的那個 Commit 的 "),s("code",[t._v("pick")]),t._v(" 改成 "),s("code",[t._v("edit")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pick 382a2a5 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" database settings\npick cd82f29 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\npick 1de2076 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nedit ca40fc9 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" cats\npick 2bab3e7 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\npick 27f6ed6 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),s("p",[t._v("Rebase 在執行到 "),s("code",[t._v("ca40fc9")]),t._v(" 這個 Commit 的時候就會停下來：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2019/02/20/5c6ce0ef3d2bb.png",alt:"split1"}})]),t._v(" "),s("p",[s("code",[t._v("HEAD")]),t._v(" 指向 "),s("code",[t._v("ca40fc9")]),t._v(", 我们通过 "),s("code",[t._v("reset")]),t._v(" 指令到这个提交的上一个提交.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD^\n")])])]),s("p",[t._v("这两个提交之间的改动都处于 『 未暂存 』状态. 根据你自己的需要通过 "),s("code",[t._v("add")]),t._v(" 和 "),s("code",[t._v("commit")]),t._v(" 来进行提交.")]),t._v(" "),s("p",[t._v("等你弄完了, 別忘了現在還是處於 Rebase 狀態，通过 "),s("code",[t._v("--continue")]),t._v(" 参数来让 Rebase 执行完.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --continue\nSuccessfully rebased and updated refs/heads/master.\n")])])]),s("h3",{attrs:{id:"将当前改动追加到指定提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将当前改动追加到指定提交"}},[t._v("#")]),t._v(" 将当前改动追加到指定提交")]),t._v(" "),s("p",[t._v("将工作空间中的改动追加到某次提交上的步骤如下:")]),t._v(" "),s("ol",[s("li",[t._v("保存工作空间中的改动:")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("将 HEAD 移到需要更改的 commit 上:")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase 30c466 -i\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("找到需要更改的 commit, 将行首的 pick 改成 edit, 按 esc, 输入 :wq 退出。")]),t._v(" "),s("li",[t._v("将暂存的内容放出：\n"),s("ul",[s("li",[t._v("如果还有其他改动的文件，使用 git add 改动的文件添加改动文件到暂存。")])])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git stash pop\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[t._v("使用 "),s("code",[t._v("git commit --amend")]),t._v(" 追加改动到第一步中指定的 commit 上。如果有冲突, 编辑冲突文件, 解决冲突:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git add .\ngit commit --amend\n")])])]),s("ol",{attrs:{start:"6"}},[s("li",[t._v("解决冲突之后再执行 "),s("code",[t._v("git rebase --continue")])])]),t._v(" "),s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("h3",{attrs:{id:"断头-detached-head-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#断头-detached-head-是什么"}},[t._v("#")]),t._v(" 断头 Detached HEAD 是什么?")]),t._v(" "),s("p",[t._v("正常情况下，"),s("code",[t._v("HEAD")]),t._v(" 會指向某一個分支，而分支會指向某一個提交。当 "),s("code",[t._v("HEAD")]),t._v(" 没有指向一个分支的时候, 这个状态就被称为「 "),s("strong",[t._v("Detached HEAD 断头")]),t._v(" 」")]),t._v(" "),s("p",[t._v("可能發生這個狀態的原因有：")]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("checkout")]),t._v(" 指令直接跳到某個提交，而那個提交剛好目前沒有分支指著它。")]),t._v(" "),s("li",[s("code",[t._v("rebase")]),t._v(" 的過程其實也是處於不斷的 "),s("code",[t._v("detached HEAD")]),t._v(" 狀態。")]),t._v(" "),s("li",[t._v("切換到某個遠端分支的時候。")])]),t._v(" "),s("p",[t._v("让我们来说个更具体的例子:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-14-02-31.png",alt:"2020-09-20-14-02-31"}}),t._v("\n假如我使用 "),s("code",[t._v("checkout")]),t._v(" 指令切換至 "),s("code",[t._v("add cat 1")]),t._v(" 那個 "),s("code",[t._v("commmit")]),t._v(". 同时 "),s("code",[t._v("HEAD")]),t._v(" 也就指向了那个提交. 因为没有分支指向这个提交, 所有处于 "),s("code",[t._v("detached HEAD")]),t._v(" 状态.")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-14-02-45.png",alt:"2020-09-20-14-02-45"}}),t._v("\n这个时候如果再进行一次提交.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" no-head.html\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" no-head.html\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add a no-head file"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("detached HEAD b6d204e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" no-head "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" insertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" deletions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" no-head.html\n")])])]),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-14-02-59.png",alt:"2020-09-20-14-02-59"}})]),t._v(" "),s("p",[t._v("因为并没有一个分支指向这个新的提交, 只是 "),s("code",[t._v("HEAD")]),t._v(" 在指向它. 如果之后我让 "),s("code",[t._v("HEAD")]),t._v(" 再指向其他分支. 这个提交就不容易被找到了, 除非我记住它的 SHA-1 校验和。")]),t._v(" "),s("p",[t._v("如果還想留下這個提交，就給它一個分支指著它就行了.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch new_branch b6d204e\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout new_branch\n")])])]),s("p",[t._v("或者")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b new_branch b6d204e\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'new_branch'")]),t._v("\n")])])]),s("h3",{attrs:{id:"git-flow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-flow"}},[t._v("#")]),t._v(" Git Flow")]),t._v(" "),s("p",[t._v("Git Flow 是一种团队协作的工作流程规范。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-09-20-14-29-42.png",alt:"2020-09-20-14-29-42"}})]),t._v(" "),s("p",[t._v("一个项目存在如下分支：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("主分支")]),t._v(" Master Branch")]),t._v(" "),s("li",[s("strong",[t._v("开发分支")]),t._v(" Develop Branch")]),t._v(" "),s("li",[s("strong",[t._v("功能分支")]),t._v(" Feature Branch")]),t._v(" "),s("li",[s("strong",[t._v("补丁分支")]),t._v(" Hotfix Branch")]),t._v(" "),s("li",[s("strong",[t._v("发布分支")]),t._v(" Release Branch")])]),t._v(" "),s("p",[t._v("Git Flow 的缺点是：相对复杂，维护麻烦。")]),t._v(" "),s("h3",{attrs:{id:"commit-messgae-模板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-messgae-模板"}},[t._v("#")]),t._v(" Commit Messgae 模板")]),t._v(" "),s("p",[t._v("我使用的格式为:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("scope"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("subject"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 标题行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("BLANK LINE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 空行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 主题内容")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("BLANK LINE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 空行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("footer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 页脚注释")]),t._v("\n")])])]),s("p",[t._v("大致分为三个部分:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("标题行: 必填, 描述主要修改类型和内容")])]),t._v(" "),s("li",[s("p",[t._v("主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等")])]),t._v(" "),s("li",[s("p",[t._v("页脚注释: 放 Breaking Changes 或 Closed Issue")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("type")]),t._v(": 提交的类型")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("feat")]),t._v(": 新特性")]),t._v(" "),s("li",[s("code",[t._v("fix")]),t._v(": 修改问题")]),t._v(" "),s("li",[s("code",[t._v("refactor")]),t._v(": 代码重构")]),t._v(" "),s("li",[s("code",[t._v("docs")]),t._v(": 文档修改")]),t._v(" "),s("li",[s("code",[t._v("style")]),t._v(": 代码格式修改, (注意不是 CSS 修改)")]),t._v(" "),s("li",[s("code",[t._v("test")]),t._v(": 测试用例修改")]),t._v(" "),s("li",[s("code",[t._v("chore")]),t._v(": 其他修改, 比如构建流程, 依赖管理.")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("scope")]),t._v(": 影响的范围, 比如: route, component, utils, build…")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("subject")]),t._v(': 的概述, 建议符合 "50/72 formatting"')])]),t._v(" "),s("li",[s("p",[s("code",[t._v("body")]),t._v(': 具体修改内容, 可以分为多行, 建议符合 "50/72 formatting"')])]),t._v(" "),s("li",[s("p",[s("code",[t._v("footer")]),t._v(": 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.")])])]),t._v(" "),s("p",[t._v("通过修改 "),s("code",[t._v("git config --global commit.template [模板文件绝对路径]")]),t._v(" 可以添加模板。")]),t._v(" "),s("p",[t._v("如果要取消已设定的模板，则删除掉 "),s("code",[t._v("~/.gitconfig")]),t._v(" 文件中的 "),s("code",[t._v("[commit] template")]),t._v(" 部分。")]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651236225&idx=1&sn=dfda35481d2cf2c3435c5e9802a1dc81&chksm=bd497e058a3ef713a8020acf25e2d159d36dfad35b04b94fcfb41158fec571e2d43c617d7f05&mpshare=1&scene=1&srcid=&sharer_sharetime=1586565597279&sharer_shareid=9fc6c269db99975622f194cd8f0eba8f%23rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解常用的 Git 指令含义"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/12/git-workflow.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 工作流程"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2012/07/git.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 分支管理策略"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);