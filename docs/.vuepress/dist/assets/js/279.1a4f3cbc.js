(window.webpackJsonp=window.webpackJsonp||[]).push([[279],{221:function(t,s,a){"use strict";a.r(s);var v=a(0),_=function(t){t.options.__data__block__={mermaid_64a56ef4:"graph LR;\na(分析 Analysis)\nb(设计 Design)\nc(编程 Programming)\n\na --\x3e b --\x3e c\n"}},r=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面向对象分析-设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象分析-设计"}},[t._v("#")]),t._v(" 面向对象分析 / 设计")]),t._v(" "),a("h2",{attrs:{id:"什么是面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是面向对象"}},[t._v("#")]),t._v(" 什么是面向对象")]),t._v(" "),a("p",[t._v("面向对象是一种软件设计思想。")]),t._v(" "),a("p",[t._v("经常拿来与其比较的是『 面向过程 procedural oriented 』")]),t._v(" "),a("ul",[a("li",[t._v("想要实现 A 状态到 B 状态，用面向过程思想编码时，会定义出具体的实现步骤。")])]),t._v(" "),a("h3",{attrs:{id:"object-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-class"}},[t._v("#")]),t._v(" Object & Class")]),t._v(" "),a("p",[t._v("面向对象认为程序由一系列对象 Object 组成。 对象可以看作是对现实事物的抽象。一个对象有自己的属性 property 和行为 behavior。")]),t._v(" "),a("p",[t._v("Class 类是对象的定义，是对象的 Template。可以看作是对于同一类对象的抽象。 每一个对象都是 Class 的实例。在 Class 中需要定义对象所具有的属性和行为。")]),t._v(" "),a("p",[t._v("当你用于语言去描述一个软件需要实现的功能时，一般来说，描述中『 名词 none 』就代表着它是一个 Class，关于这个名词的『 动词 verb 』就代表它是这个 Class 的行为 behavior。")]),t._v(" "),a("p",[t._v("使用面向对象思想去开发软件的好处是：")]),t._v(" "),a("ul",[a("li",[t._v("让代码的可复用性更高。")]),t._v(" "),a("li",[t._v("当项目增大，变复杂时，可以很轻松的直接复用，或者稍加修改之前定义的 Class，就可以实现新的功能。")])]),t._v(" "),a("p",[t._v("相较于面向过程：")]),t._v(" "),a("ul",[a("li",[t._v("要实现一个新的功能，面向过程的代码就显得比较僵硬，不灵活，可复用性地。")])]),t._v(" "),a("h3",{attrs:{id:"抽象，多态，继承，封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象，多态，继承，封装"}},[t._v("#")]),t._v(" 抽象，多态，继承，封装")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-09-19-18-09.png",alt:"2020-08-09-19-18-09"}})]),t._v(" "),a("p",[t._v("可以简记为 "),a("strong",[t._v("A-P-I-E")]),t._v(" ( A Pie，一个派 )")]),t._v(" "),a("h4",{attrs:{id:"抽象-abstraction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象-abstraction"}},[t._v("#")]),t._v(" 抽象 Abstraction")]),t._v(" "),a("p",[t._v("对于现实中事物进行概念上的抽象，找出它所具有的属性和方法。")]),t._v(" "),a("p",[t._v("具体定义出哪些属性和方法取决于你的实际需求。")]),t._v(" "),a("p",[t._v("抽象是面向对象语言的核心。")]),t._v(" "),a("p",[t._v("🌰 Person 人：")]),t._v(" "),a("ul",[a("li",[t._v("属性：name，age，gender, ...")]),t._v(" "),a("li",[t._v("方法：speak，listen，walk，run，...")])]),t._v(" "),a("h4",{attrs:{id:"封装-encapsulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#封装-encapsulation"}},[t._v("#")]),t._v(" 封装 Encapsulation")]),t._v(" "),a("p",[t._v("对于对象中的一些数据 ( 属性的值 ) 和方法限制外界对其进行访问。")]),t._v(" "),a("p",[t._v('外界只可以访问在一个对象的类中定义的 public 公共方法。通过这些方法，外部可以间接地 "获取 / 更改" 对象的属性值，或者调用对象的私有方法。')]),t._v(" "),a("p",[t._v("这样做的好处有：")]),t._v(" "),a("ul",[a("li",[t._v("防止外部设置非法的 invalid 属性值；")]),t._v(" "),a("li",[t._v("限制外部去访问一些敏感的数据；")]),t._v(" "),a("li",[t._v('使 class 变成一个 "黑箱"，外部只需要调用暴露出的公共方法就可以使用这个类。而不需要，也不能够去管 class 内部的具体实现。')]),t._v(" "),a("li",[t._v("降低各个 class 间的依赖。修改一个 class 内部的实现，只要不更改其暴露出的接口，就不会影响到其他的 class。")])]),t._v(" "),a("p",[t._v("不同的面向对象编程语言，支持的封装等级都有些区别。但是总的核心思想是，"),a("strong",[t._v("只暴露必要的接口给外界，只要外界用不到就不暴露")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"继承-inheritance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承-inheritance"}},[t._v("#")]),t._v(" 继承 Inheritance")]),t._v(" "),a("p",[t._v("在已有的 class 基础之上去创建一个新的 class。新的 class 可以继承其属性和方法。( 具体的继承规则根据语言不同，又各有区别 )")]),t._v(" "),a("p",[t._v("被继承的类称为『 父类 』，继承类称为『 子类 』")]),t._v(" "),a("p",[t._v("父类可以看作是子类的抽象。")]),t._v(" "),a("h4",{attrs:{id:"多态-polymorphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态-polymorphism"}},[t._v("#")]),t._v(" 多态 Polymorphism")]),t._v(" "),a("p",[t._v('多态的意思就是 "多种形态" ( multiple form )')]),t._v(" "),a("p",[t._v("多态可以分为两种：")]),t._v(" "),a("p",[a("strong",[t._v("Dynamic 动态多态")]),t._v("：allows us to access methods using the same interface on different types of objects that may implement those methods in different ways.")]),t._v(" "),a("p",[t._v('有很多种方式去实现 "动态多态"：')]),t._v(" "),a("ul",[a("li",[t._v("Inheritance 继承，Abstract classes 抽象类，Interfaces 接口")])]),t._v(" "),a("p",[t._v('使用 "动态多态" 的好处是：')]),t._v(" "),a("ul",[a("li",[t._v("不同的对象都同一个接口提供了各自的实现，调用者可以通过在不同对象上调用同一个接口去使用它们各自的行为。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("Static 静态多态")]),t._v("： 使用了一个称为『 Overloading 重载 』的特性。重载允许你在一个类中定义具有同样名称的多个方法，它们通过不同的输入参数 input parameter 进行区别。")]),t._v(" "),a("h3",{attrs:{id:"分析-analysis，设计-design，编程-programming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分析-analysis，设计-design，编程-programming"}},[t._v("#")]),t._v(" 分析 Analysis，设计 Design，编程 Programming")]),t._v(" "),a("p",[t._v("在使用面向对象思想进行软件开发时，会经历如下三个流程：")]),t._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a56ef4",graph:t.$dataBlock.mermaid_64a56ef4}}),a("p",[t._v("分析阶段：")]),t._v(" "),a("ul",[a("li",[t._v("what do you need to do?")]),t._v(" "),a("li",[t._v("What's the problem you're trying to solve?")])]),t._v(" "),a("p",[t._v("设计阶段：")]),t._v(" "),a("ul",[a("li",[t._v("how you're going to do it.")])]),t._v(" "),a("p",[t._v("编程阶段：")]),t._v(" "),a("ul",[a("li",[t._v("用代码去具体实现设计。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("在分析 & 设计阶段，会经历如下五个流程：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("Gather Requirements")]),t._v(":\n"),a("ul",[a("li",[t._v("what our application needs to do?")]),t._v(" "),a("li",[t._v("What problem you are trying to solve?")])])]),t._v(" "),a("li",[a("strong",[t._v("Describe the application")]),t._v(":\n"),a("ul",[a("li",[t._v("Build a narrative in plain, conversational language for how people will use it.")])])]),t._v(" "),a("li",[a("strong",[t._v("Identify the main objects")]),t._v(":\n"),a("ul",[a("li",[t._v("identifying the most important objects")]),t._v(" "),a("li",[t._v("understanding each object's responsibilities,")]),t._v(" "),a("li",[t._v("the behaviors and properties they need to have")])])]),t._v(" "),a("li",[a("strong",[t._v("Describe the interactions")]),t._v(":\n"),a("ul",[a("li",[t._v("when they interact with other objects.")]),t._v(" "),a("li",[t._v("how they interact with other objects.")])])]),t._v(" "),a("li",[a("strong",[t._v("Create a class diagram")]),t._v(":\n"),a("ul",[a("li",[t._v("The class diagram is a visual representation of the classes in the application。")]),t._v(" "),a("li",[t._v("It shows what the classes look like, and the relationship between them.")]),t._v(" "),a("li",[t._v("It is the main output from the five-step process.")])])])]),t._v(" "),a("h3",{attrs:{id:"uml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml"}},[t._v("#")]),t._v(" UML")]),t._v(" "),a("p",[a("strong",[t._v("UML")]),t._v(" 全称 Unified Modeling Language, "),a("strong",[t._v("统一建模语言")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("UML 不是一个编程语言。")]),t._v(" "),a("li",[t._v("It's a graphical notation for drawing diagrams to visualize object oriented systems.")]),t._v(" "),a("li",[t._v("UML 有一个庞大的体系，但是在面向对象设计时只需要用到几种。")]),t._v(" "),a("li",[t._v("UML 仅仅是标准的图形化表示法, 它用于对设计和思想进行可视化展现. 如果没有良好的设计能力, 精通 UML 也没有用。")])]),t._v(" "),a("h2",{attrs:{id:"需求收集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需求收集"}},[t._v("#")]),t._v(" 需求收集")]),t._v(" "),a("p",[t._v("分析 & 设计阶段的第一步是 "),a("strong",[t._v("Gather Requirements 需求收集")]),t._v("。也就是搞清楚：")]),t._v(" "),a("ul",[a("li",[t._v("what your application or product needs to do.")]),t._v(" "),a("li",[t._v("What's the problem you're trying to solve?")])]),t._v(" "),a("p",[t._v("客户给出的需求可能是很模糊不清的，作为开发者需要弄清楚项目真正的需求是什么。")]),t._v(" "),a("h3",{attrs:{id:"functional-non-functional"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functional-non-functional"}},[t._v("#")]),t._v(" Functional & Non-functional")]),t._v(" "),a("p",[t._v("需求可以分为两种：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Functional requirements")]),t._v("：What are the necessary features and capabilities?\n"),a("ul",[a("li",[t._v("使用 must do 短语去描述。")])])]),t._v(" "),a("li",[a("strong",[t._v("Non-functional requirements")]),t._v("：how the application should function.\n"),a("ul",[a("li",[t._v("使用 should be 短语去描述。")])])])]),t._v(" "),a("h3",{attrs:{id:"furps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#furps"}},[t._v("#")]),t._v(" FURPS+")]),t._v(" "),a("p",[a("strong",[t._v("FURPS+")]),t._v(" 是一个更系统的化的需求分类方式：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("功能性")]),t._v("（ Functional ）: 特性、功能、安全性；\n"),a("ul",[a("li",[t._v("软件的核心功能。")])])]),t._v(" "),a("li",[a("strong",[t._v("可用性")]),t._v("（ Usability ）: 人性化因素、帮助、文档；\n"),a("ul",[a("li",[t._v("Usability affects the person who will be using the program. Is it easy on the eyes? Is it intuitive to use? Is the documentation accurate and complete?")])])]),t._v(" "),a("li",[a("strong",[t._v("可靠性")]),t._v("（ Reliability ）: 故障频率、可恢复性、可预测性；")]),t._v(" "),a("li",[a("strong",[t._v("性能")]),t._v("（ Performance ）: 响应时间、吞吐量、准确性、有效性、资源利用率；")]),t._v(" "),a("li",[a("strong",[t._v("可支持性")]),t._v("（ Supportability ）: 适应性、可维护性、国际化、可配置性。")])]),t._v(" "),a("p",[t._v("FURPS+ 中的 "),a("code",[t._v("+")]),t._v(" 是指一些额外的约束：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("设计")]),t._v("（ Design ）：constraints on how the software must be built；")]),t._v(" "),a("li",[a("strong",[t._v("实现")]),t._v("（ Implementation ）: 资源限制、语言和工具、硬件等；")]),t._v(" "),a("li",[a("strong",[t._v("接口")]),t._v("（ Interface ）: external system that needs to be interfaced with；")]),t._v(" "),a("li",[a("strong",[t._v("物理")]),t._v("（ Physical ）: 硬件设备的限制；")])]),t._v(" "),a("h3",{attrs:{id:"🌰-jukebox-自动唱机需求分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌰-jukebox-自动唱机需求分析"}},[t._v("#")]),t._v(" 🌰 Jukebox 自动唱机需求分析")]),t._v(" "),a("p",[t._v("The juke box should let a user select an album from the available music library, and then choose individual songs from that album to be played. And as an extra precaution, if one user adds more than three songs in a row to the play queue, and another user wants to play a song, they'll jump ahead in line.")]),t._v(" "),a("h4",{attrs:{id:"functional"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functional"}},[t._v("#")]),t._v(" Functional")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-09-14-09.png",alt:"2020-08-10-09-14-09"}}),t._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-09-14-46.png",alt:"2020-08-10-09-14-46"}}),t._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-09-16-42.png",alt:"2020-08-10-09-16-42"}})]),t._v(" "),a("h4",{attrs:{id:"non-functional"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#non-functional"}},[t._v("#")]),t._v(" Non-Functional")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-09-18-18.png",alt:"2020-08-10-09-18-18"}})]),t._v(" "),a("h2",{attrs:{id:"定义用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义用例"}},[t._v("#")]),t._v(" 定义用例")]),t._v(" "),a("p",[t._v('在定义完需求之后，让我们接着定义 "用户如何去使用这个软件"。')]),t._v(" "),a("p",[t._v("『 "),a("strong",[t._v("用例")]),t._v(" use case 』是文本形式的情节描述, 用以说明参与者 Actor 如何使用软件去实现目标的情节 Story。")]),t._v(" "),a("h3",{attrs:{id:"参与者-场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参与者-场景"}},[t._v("#")]),t._v(" 参与者, 场景")]),t._v(" "),a("p",[t._v("在编写用例时『 参与者 Actor 』和『 场景 Scenario 』是两个重要的概念：")]),t._v(" "),a("p",[a("strong",[t._v("参与者 Actor")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("任何会与系统产生交互的东西;")]),t._v(" "),a("li",[t._v("🌰 人, 计算机系统, 组织, etc;")]),t._v(" "),a("li",[t._v("🌰 结账系统: 收银员, 经理;")]),t._v(" "),a("li",[t._v("🌰 网络协议栈: 运输层, 网络层, etc;")])]),t._v(" "),a("p",[a("strong",[t._v("场景 Scenario")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("参与者与系统之间一系类特定的活动和交互;")]),t._v(" "),a("li",[t._v("一个用例就是一组相关的成功或失败场景的集合;")]),t._v(" "),a("li",[t._v("🌰 使用现金成功购买商品的场景;")]),t._v(" "),a("li",[t._v("🌰 信用卡付款被拒, 造成购买失败的场景;")])]),t._v(" "),a("p",[a("strong",[t._v("参与者的三种类型")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("主要参与者 primary actor")]),t._v(": 系统的主要用户。\n"),a("ul",[a("li",[t._v("🌰 收银员, 使用收银系统来处理顾客购物支付.")])])]),t._v(" "),a("li",[a("strong",[t._v("协助参与者 supporting actor")]),t._v(": 为系统提供服务;\n"),a("ul",[a("li",[t._v("🌰 自动付费授权系统, 用户认证登录系统;")])])]),t._v(" "),a("li",[a("strong",[t._v("幕后参与者 offstage actor")]),t._v(": 在用例行为中具有影响, 但不是主要或协助参与者;\n"),a("ul",[a("li",[t._v("🌰 政府税收机构, 从收银系统的流水中确定税收金额;")])])])]),t._v(" "),a("h3",{attrs:{id:"如何发现用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何发现用例"}},[t._v("#")]),t._v(" 如何发现用例")]),t._v(" "),a("p",[t._v("为满足主要参与者的目标而定义用例, 基本过程如下:")]),t._v(" "),a("p",[a("strong",[t._v("1 - 选择系统边界")]),t._v(":")]),t._v(" "),a("p",[t._v("定义什么东西在系统之外, 什么在系统之内.")]),t._v(" "),a("p",[t._v('如果对系统边界定义不清, 可以先定义外部的 "主要参与者" 和 "协助参与者", 然后再去定义系统边界.')]),t._v(" "),a("p",[a("strong",[t._v("2 & 3 - 确定参与者和目标")]),t._v(":")]),t._v(" "),a("p",[t._v("系统是服务于参与者以实现其目标的, 用例描述了这个过程。")]),t._v(" "),a("p",[t._v("应当首先定义「 主要参与者 」及其目标。这样可以先搭建起一个整体框架。")]),t._v(" "),a("p",[t._v("可以通过问以下问题, 来寻找参与者和目标:")]),t._v(" "),a("ul",[a("li",[t._v("系统主要是为谁服务的，希望实现它的什么目标？")]),t._v(" "),a("li",[t._v("谁来启动 / 停止系统？")]),t._v(" "),a("li",[t._v("时间是参与者吗？系统中是否存在某些活动需要去响应时间事件？")]),t._v(" "),a("li",[t._v("谁来完成用户管理 / 安全管理 / 系统管理？")]),t._v(" "),a("li",[t._v("谁来检测系统活动 & 性能 & 日志？")]),t._v(" "),a("li",[t._v("系统发生错误时应该通知谁？")]),t._v(" "),a("li",[t._v("有没有其他外部的软件或系统会调用该系统的服务？")])]),t._v(" "),a("p",[t._v("写出「 参与者 - 目标 」列表：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-10-45-43.png",alt:"2020-08-20-10-45-43"}})]),t._v(" "),a("p",[t._v("系统边界不同, 主要参与者和目标也不同:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-10-31-49.png",alt:"2020-08-20-10-31-49"}})]),t._v(" "),a("ul",[a("li",[t._v('🌰 例如, "POS 系统" 的主要服务于 "收银员", 而不是 "顾客". 所以主要参与者是 "收银员".')])]),t._v(" "),a("p",[t._v("画出「 UML 用例图 」以可视化的方式, 描述外部参与者对系统的使用：")]),t._v(" "),a("ul",[a("li",[t._v("用例图中，只表现「 用户目标级别 」的用例，也就是主要参与者的目标。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-10-46-37.png",alt:"2020-08-20-10-46-37"}}),t._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-10-47-46.png",alt:"2020-08-20-10-47-46"}})]),t._v(" "),a("p",[a("strong",[t._v("4 - 定义用例")]),t._v(":")]),t._v(" "),a("p",[t._v("为每个「 用户目标 」分别定义用例. 用例的名称形容了用户目标, 以动词开头。")]),t._v(" "),a("ul",[a("li",[t._v("🌰 目标: 处理销售; 用例: 处理销售;")])]),t._v(" "),a("p",[t._v('对于分散的 CRUD ( 创建, 提取, 更新, 删除 ) 目标, 可以合并成一个用例, 一般称为 "管理 XXX"。')]),t._v(" "),a("ul",[a("li",[t._v('🌰 例如, "管理用户" 用例, 可以同时满足 "编辑用户", "创建用户", "删除用户" 等目标.')])]),t._v(" "),a("h3",{attrs:{id:"用例的三种表述形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用例的三种表述形式"}},[t._v("#")]),t._v(" 用例的三种表述形式")]),t._v(" "),a("h4",{attrs:{id:"摘要-brief"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#摘要-brief"}},[t._v("#")]),t._v(" 摘要 brief")]),t._v(" "),a("p",[t._v("简洁的一段式概要, 通常用于主成功场景;")]),t._v(" "),a("details",{staticClass:"custom-block details",attrs:{open:"open"}},[a("summary",[t._v("🌰 例子：处理销售")]),t._v(" "),a("p",[t._v("顾客携带所购商品到收银台, 收银台使用 POS 系统记录每件商品. 系统连续显示累计总额, 并逐行显示明细. 顾客输入支付信息, 系统对支付信息进行验证和记录. 系统更新库存信息. 顾客从系统得到购物小票, 然后携带商品离开.")])]),t._v(" "),a("h4",{attrs:{id:"非正式-casual"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非正式-casual"}},[t._v("#")]),t._v(" 非正式 casual")]),t._v(" "),a("p",[t._v("非正式的段落, 用来描述不同的场景;")]),t._v(" "),a("details",{staticClass:"custom-block details",attrs:{open:"open"}},[a("summary",[t._v("🌰 例子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-09-36-28.png",alt:"2020-08-10-09-36-28"}})])]),t._v(" "),a("h4",{attrs:{id:"详述-fully-dressed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#详述-fully-dressed"}},[t._v("#")]),t._v(" 详述 fully dressed")]),t._v(" "),a("p",[t._v("以结构化的方式, 详细编写所有的步骤及各种变化 ( 分支 ) , 同时具有补充部分, 如前置条件和成功保证;")]),t._v(" "),a("p",[t._v("详述风格用例中的各部分名称, 及其意义:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("范围 scope")]),t._v("：界定了所要设计的系统 / 业务;")]),t._v(" "),a("li",[a("strong",[t._v("级别 level")]),t._v("：\n"),a("ul",[a("li",[t._v("用户目标级别 user-goal level: 描述了实现主要参与者目标的的场景;")]),t._v(" "),a("li",[t._v("子功能级别 subfunction level: 描述支持用户目标所需的子步骤。通常一个子步骤可能在多个用例中都被使用到, 所以单独定义;")])])]),t._v(" "),a("li",[a("strong",[t._v("主要参与者 primary actor")]),t._v("：调用系统服务来完成目标的主要参与者;")]),t._v(" "),a("li",[a("strong",[t._v("涉众及其关注点列表 stakeholders and interests")]),t._v("：与这个系统相关的所有人, 以及他们希望这个系统能够给他们带来的好处;")]),t._v(" "),a("li",[a("strong",[t._v("前置条件 & 成功保证 ( 后置条件 ) preconditions & success guarantee")]),t._v("：\n"),a("ul",[a("li",[t._v("前置条件: 用例在开始之前必须为真的条件;")]),t._v(" "),a("li",[t._v("后置条件: 用例成功结束后必须为真的条件;")])])]),t._v(" "),a("li",[a("strong",[t._v("主成功场景 main success scenario")]),t._v("：描述了满足涉众关注点的最主要的成功路径。不包含任何条件或分支, 所有的条件处理都推延到扩展部分;")]),t._v(" "),a("li",[a("strong",[t._v("扩展 extensions")]),t._v("：描述了其他所有场景或分支;\n"),a("ul",[a("li",[t._v("因为扩展场景是主成功场景的分支, 所以用主成功场景中对应的步骤编号 "),a("eq",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mn",[t._v("1..")]),a("mi",[t._v("N")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1..N")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")]),a("span",{staticClass:"mord"},[t._v(".")]),a("span",{staticClass:"mord"},[t._v(".")]),a("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])])])])]),t._v(" 对扩展场景进行标识;")],1),t._v(" "),a("li",[t._v("🌰 在主成功场景的第 "),a("code",[t._v("3")]),t._v(" 步, 出现了多条分支路径, 那么对应的第一个扩展被标记为 "),a("code",[t._v("3a")]),t._v(", 第二个扩展被标记为 "),a("code",[t._v("3b")]),t._v(", 以此类推;")])])]),t._v(" "),a("li",[a("strong",[t._v("特殊需求 special requirements")]),t._v('：包含于用例相关的 "非功能性需求" 和 "设计约束";')]),t._v(" "),a("li",[a("strong",[t._v("技术 & 数据变元表 technology & data variations list")]),t._v("：关于如何实现系统的技术性约束;")])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("🌰 例子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-20-12-22-14.png",alt:"2020-06-20-12-22-14"}}),t._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-20-12-23-02.png",alt:"2020-06-20-12-23-02"}}),t._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-20-12-23-15.png",alt:"2020-06-20-12-23-15"}}),t._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-20-12-23-37.png",alt:"2020-06-20-12-23-37"}}),t._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-20-12-23-49.png",alt:"2020-06-20-12-23-49"}}),t._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-20-12-24-00.png",alt:"2020-06-20-12-24-00"}})])]),t._v(" "),a("h3",{attrs:{id:"编写用例的一些准则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写用例的一些准则"}},[t._v("#")]),t._v(" 编写用例的一些准则")]),t._v(" "),a("p",[a("strong",[t._v("用例描述应与实现无关 & 尽量简洁")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("抛除具体实现细节, 只集中于用户真实意图。这种用例编写风格叫做『 "),a("strong",[t._v("本质风格")]),t._v(" Essential 』与之相对的是『 "),a("strong",[t._v("具体风格")]),t._v(" Concrete 』;")]),t._v(" "),a("li",[t._v("尽量抛出不必要的词汇；")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-10-18-25.png",alt:"2020-08-20-10-18-25"}})]),t._v(" "),a("p",[a("strong",[t._v("编写黑盒用例")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("不对系统内部具体的设计, 工作原理进行描述；")]),t._v(" "),a("li",[t._v('它只描述系统的 "职责", 也就是描述系统 "能够做" 什么, 而不是 "怎么做";')])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-10-16-13.png",alt:"2020-08-20-10-16-13"}})]),t._v(" "),a("p",[a("strong",[t._v("关注系统的参与者")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("用例中的每个场景执行完的结果, 应该是对参与者有价值的；")]),t._v(" "),a("li",[t._v("如果系统不能满足参与者所需, 那就是失败的；")])]),t._v(" "),a("h2",{attrs:{id:"domain-modeling-领域模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domain-modeling-领域模型"}},[t._v("#")]),t._v(" Domain Modeling 领域模型")]),t._v(" "),a("p",[t._v("在定义好「 用例 」之后。让我们先开始『 "),a("strong",[t._v("领域模型")]),t._v(" Domain Modeling 』的创建。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("领域模型是对现实世界事物，概念上的抽象表示")]),t._v("。")]),t._v(" "),a("li",[t._v("它将前面定义的业务领域中涉及到的各种事物，抽象定义成「 "),a("strong",[t._v("概念类")]),t._v(" 」并且定义概念类之间的关系。")]),t._v(" "),a("li",[t._v("通过领域模型, 团队可以在具体开发之前, 对整个项目的涉及的关键概念, 核心业务有一个整体且简化的了解. 并且领域模型可以一直作为参考在项目的各个阶段被使用, 便于团队间沟通和理解。")]),t._v(" "),a("li",[t._v("通过 UML 中的「 类图 Class Diagram 」来表示领域模型。")])]),t._v(" "),a("h3",{attrs:{id:"找出概念类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#找出概念类"}},[t._v("#")]),t._v(" 找出概念类")]),t._v(" "),a("ul",[a("li",[t._v("从编写的用例中找出所有的「 "),a("strong",[t._v("名词")]),t._v(" 」，它们是潜在的概念类或属性。")]),t._v(" "),a("li",[t._v("要注意，自然语言并不精确, 不用的名词短语可能指的是同一个概念类或属性, 还可能有歧义。在定义概念类时要仔细区别。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-10-26-23.png",alt:"2020-08-10-10-26-23"}})]),t._v(" "),a("h4",{attrs:{id:"不要把概念类和属性弄混"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不要把概念类和属性弄混"}},[t._v("#")]),t._v(" 不要把概念类和属性弄混")]),t._v(" "),a("p",[t._v("不要把应该是「 概念类 」的事物表示为「 属性 」")]),t._v(" "),a("p",[t._v("如果我们"),a("strong",[t._v("认为某个东西不能用字面量的值 ( 数字, 文本 ) 来表示, 那么它应该是")]),t._v("「 "),a("strong",[t._v("概念类")]),t._v(" 」. 反之就是「 属性 」")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-14-44-11.png",alt:"2020-08-20-14-44-11"}})]),t._v(" "),a("p",[a("strong",[t._v("Identifying class relationships")])]),t._v(" "),a("ul",[a("li",[t._v("找出有关联的对象，用直线连接它们。")]),t._v(" "),a("li",[t._v("在直线上用一个短语去描述这种关系。")]),t._v(" "),a("li",[t._v("并且标上对象之间的数量关系。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-14-47-07.png",alt:"2020-08-20-14-47-07"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-10-31-47.png",alt:"2020-08-10-10-31-47"}})]),t._v(" "),a("p",[t._v("『 "),a("strong",[t._v("多重性")]),t._v(" multiplicity 』定义了类 A 有多少个实例可以和类 B 的一个实例关联。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-14-48-58.png",alt:"2020-08-20-14-48-58"}})]),t._v(" "),a("p",[a("strong",[t._v("Identifying class responsibilities")])]),t._v(" "),a("ul",[a("li",[t._v('之后让我们在用例中找出与名词相关的 "动词"，它们是相关对象潜在的行为 behavior。')]),t._v(" "),a("li",[t._v('要注意，根据 "封装" 的理念，一个对象不可以直接更改另外一个对象内部的数据。用例描述中的动词经常表达的这种 "主动修改" 的意思。我们需要辨识出究竟哪些对象应该具有这些行为 ( 职责 )')]),t._v(" "),a("li",[t._v("对于每一动词都问一句，whose responsibility is it? Remember that an object should be responsible for itself.")]),t._v(" "),a("li",[t._v("🌰 Player 驾驶 Spaceship 去 move，Player 只是 move 动作的触发者，真正执行 move 行为的是 Spaceship。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-10-37-21.png",alt:"2020-08-10-10-37-21"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-10-36-07.png",alt:"2020-08-10-10-36-07"}})]),t._v(" "),a("h2",{attrs:{id:"系统顺序图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统顺序图"}},[t._v("#")]),t._v(" 系统顺序图")]),t._v(" "),a("p",[t._v("用例描述了外部参与者如何与我们希望创建的系统进行交互的. 交互中, 参与者触发了『 "),a("strong",[t._v("系统事件")]),t._v(" system event 』, 系统会通过一些『 "),a("strong",[t._v("系统操作")]),t._v(" system operation 』来对这些事件进行处理。")]),t._v(" "),a("p",[t._v("在『 "),a("strong",[t._v("系统顺序图")]),t._v(" System Sequence Diagram 』中我们将系统视为「 黑盒 」。在图中，表现出系统可以通过「 系统操作 」处理参与者发起的「 系统事件 」, 但是不说如何处理的;")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-15-27-34.png",alt:"2020-08-20-15-27-34"}})]),t._v(" "),a("p",[t._v("系统事件的名称一般以「 "),a("strong",[t._v("动词")]),t._v(" 」开始。应该表达「 "),a("strong",[t._v("操作的意图")]),t._v(" 」, 而不是具体的实现。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("enterItem(itemId)")]),t._v(" 要好于 "),a("code",[t._v("scan (itemId)")]),t._v("。因为这个操作的目的是把商品的 ID 输入到系统中, 而具体使用什么设备 ( 扫描仪, 键盘, 语音输入 ... ) 我是不管的。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("下图展示了「 用例 」与「 系统顺序图 」的对应关系：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-15-33-11.png",alt:"2020-08-20-15-33-11"}})]),t._v(" "),a("h2",{attrs:{id:"操作契约"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作契约"}},[t._v("#")]),t._v(" 操作契约")]),t._v(" "),a("p",[t._v("在「 系统顺序图 」中，我们只是表示出参与者触发「 系统事件 」和「 系统操作 」之间的关系。有时候我们需要定义『 "),a("strong",[t._v("操作契约")]),t._v(" Operation Contracts 』对「 系统操作 」进行更为详细和精确的描述。")]),t._v(" "),a("p",[t._v("在编写完了「 系统顺序图 」后, 如果觉得「 系统操作 」太复杂, 其执行后的结果在图中表示不出, 或者在用例中描述的不清楚, 则可以为其构造契约.")]),t._v(" "),a("p",[t._v("操作契约使用『 "),a("strong",[t._v("前置条件")]),t._v(" Pre-Conditions 』和『 "),a("strong",[t._v("后置条件")]),t._v(" Post-Conditions 』, "),a("strong",[t._v("描述了系统操作被调用前后, 领域模型里对象的状态变化")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("前置条件：执行操作之前，对系统或领域模型对象状态的重要假设。")]),t._v(" "),a("li",[t._v("后置条件：描述了操作结束后，领域模型内对象的状态，包括创建实例，形成或消除关联，以及属性值的改变。")])]),t._v(" "),a("p",[t._v("记住，前置条件和后置条件描述的是领域模型中的对象的状态，所有，"),a("strong",[t._v("在编写上应该使用描述状态的语句")]),t._v("，而不是指令式的语句。")]),t._v(" "),a("ul",[a("li",[t._v('较好："创建了 XXX"')]),t._v(" "),a("li",[t._v('较差："创建 XXX" 或 "XXX 被创建"')])]),t._v(" "),a("details",{staticClass:"custom-block details",attrs:{open:"open"}},[a("summary",[t._v("🌰 例子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-15-47-05.png",alt:"2020-08-20-15-47-05"}})])]),t._v(" "),a("h2",{attrs:{id:"对象设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象设计"}},[t._v("#")]),t._v(" 对象设计")]),t._v(" "),a("p",[t._v("下面我们由面向「 分析 」的工作过渡到「 软件设计 」工作.")]),t._v(" "),a("p",[t._v("我们需要开始设计真正在软件中要使用的对象 Object 了。")]),t._v(" "),a("p",[t._v("『 "),a("strong",[t._v("对象模型")]),t._v(" Object Model 』由两种类型:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("动态模型")]),t._v(": 用于表示对象之间的交互。用「 UML 交互图 」表达。")]),t._v(" "),a("li",[a("strong",[t._v("静态模型")]),t._v(": 用于表示对象所具有的名称，属性，方法。用「 UML 类图 」表达;")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-15-53-52.png",alt:"2020-08-20-15-53-52"}})]),t._v(" "),a("p",[a("strong",[t._v("在绘制时")]),t._v("「 "),a("strong",[t._v("动态模型")]),t._v(" 」"),a("strong",[t._v("要优先与")]),t._v("「 "),a("strong",[t._v("静态模型")]),t._v(" 」。因为具体系统需要哪些对象, 对象具备哪些方法, 在绘制动态模型时才能准确的落实。")]),t._v(" "),a("h3",{attrs:{id:"uml-交互图绘制「-动态模型-」"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-交互图绘制「-动态模型-」"}},[t._v("#")]),t._v(" UML 交互图绘制「 动态模型 」")]),t._v(" "),a("p",[t._v("『 "),a("strong",[t._v("UML 交互图")]),t._v(" Interaction Diagram 』用以描述对象间通过「 "),a("strong",[t._v("消息")]),t._v(" 」进行交互。具体可以使用「 顺序图 Sequence Diagram 」和「 通信图 Communication Diagram 」来表示。这里主要介绍『 "),a("strong",[t._v("UML 顺序图")]),t._v(" 』")]),t._v(" "),a("blockquote",[a("p",[t._v("A "),a("strong",[t._v("message")]),t._v(" is an element in a Unified Modeling Language (UML) diagram that defines a specific kind of communication between instances in an interaction. A message conveys information from one instance to another instance in an interaction.")])]),t._v(" "),a("p",[t._v("下图 👇 是代码与顺序图之间的对应关系：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-22-06.png",alt:"2020-08-20-16-22-06"}})]),t._v(" "),a("h4",{attrs:{id:"uml-顺序图的基本表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-顺序图的基本表示法"}},[t._v("#")]),t._v(" UML 顺序图的基本表示法")]),t._v(" "),a("p",[t._v("用『 "),a("strong",[t._v("生命线框图")]),t._v(" Lifeline Box 』来表示参与者, 在软件系统中表示为类的实例。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-24-01.png",alt:"2020-08-20-16-24-01"}}),t._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-25-16.png",alt:"2020-08-20-16-25-16"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("在两个生命线框图之间的垂直的生命线上用「 "),a("strong",[t._v("带实心箭头的实线")]),t._v(" 」并附以「 "),a("strong",[t._v("消息表达式")]),t._v(" 」的方式来表示对象间的『 "),a("strong",[t._v("消息")]),t._v(" 』。生命线自上而下表示时间顺序。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-29-33.png",alt:"2020-08-20-16-29-33"}})]),t._v(" "),a("p",[t._v("『 "),a("strong",[t._v("消息表达式")]),t._v(" 』的通用语法如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("message")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parameter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("parameterType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("returnType\n")])])]),a("ul",[a("li",[t._v("如果没有参数，可以省略不写。")]),t._v(" "),a("li",[t._v("如果不是必要，也可以不写类型信息。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-31-38.png",alt:"2020-08-20-16-31-38"}})]),t._v(" "),a("p",[t._v("在表示「 "),a("strong",[t._v("应答 / 返回")]),t._v(" 」时，可以用如下两种方式：")]),t._v(" "),a("ol",[a("li",[t._v("使用消息表达式 "),a("code",[t._v("returnVar = message(parameter)")])]),t._v(" "),a("li",[t._v("在活动条末端使用「 应答消息线 」，用带箭头的虚线表示。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-40-30.png",alt:"2020-08-20-16-40-30"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("对象可以发送给「 自身 」消息")]),t._v("：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-34-23.png",alt:"2020-08-20-16-34-23"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("用「 "),a("strong",[t._v("虚线实心箭头")]),t._v(" 」表示"),a("strong",[t._v("实例的创建")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-41-26.png",alt:"2020-08-20-16-41-26"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("用「 "),a("strong",[t._v("X")]),t._v(" 」表示，"),a("strong",[t._v("实例的销毁")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-42-59.png",alt:"2020-08-20-16-42-59"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("使用「 "),a("strong",[t._v("图框")]),t._v(" Frame 」来表示条件判断, 循环等操作:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-44-52.png",alt:"2020-08-20-16-44-52"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-48-06.png",alt:"2020-08-20-16-48-06"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-16-48-40.png",alt:"2020-08-20-16-48-40"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("交互图之间是可以互相关联的")]),t._v(". 可以使用「 图框 」来创建关联:")]),t._v(" "),a("ul",[a("li",[t._v("将整个交互图放入图框之中, 并加上交互图的名字;")]),t._v(" "),a("li",[t._v("然后把标记为 "),a("code",[t._v("ref")]),t._v(" 的图框中放入想要引用的交互图的名字, 就可以作为引用在另一个交互图中使用了;")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-35-41.png",alt:"2020-06-25-21-35-41"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("用「 刺形箭头 」表示"),a("strong",[t._v("异步调用")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-41-47.png",alt:"2020-06-25-21-41-47"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-42-08.png",alt:"2020-06-25-21-42-08"}})]),t._v(" "),a("ul",[a("li",[t._v("『 "),a("strong",[t._v("主动对象")]),t._v(" active object 』: 指的是在自己的执行线程中运行或控制自己的执行线程的实例。用生命线框图两侧加双竖线来表示。")])]),t._v(" "),a("h3",{attrs:{id:"uml-类图绘制「-静态模型-」"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-类图绘制「-静态模型-」"}},[t._v("#")]),t._v(" UML 类图绘制「 静态模型 」")]),t._v(" "),a("p",[t._v("之前定义的「 领域模型 」表示的是对现实事物概念性的抽象, 而「 对象模型 」表示的是软件中实际要创建的类。")]),t._v(" "),a("h4",{attrs:{id:"uml-类图基本格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-类图基本格式"}},[t._v("#")]),t._v(" UML 类图基本格式")]),t._v(" "),a("p",[a("strong",[t._v("UML 类图")]),t._v("的格式如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-10-56-58.png",alt:"2020-08-10-10-56-58"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-10-58-47.png",alt:"2020-08-10-10-58-47"}})]),t._v(" "),a("p",[t._v('根据 "封装" 的理念，我们只向外界暴露必要的接口。')]),t._v(" "),a("ul",[a("li",[t._v("用 "),a("code",[t._v("-")]),t._v(" 表示「 "),a("strong",[t._v("私有")]),t._v(" private 」方法和属性；")]),t._v(" "),a("li",[t._v("用 "),a("code",[t._v("+")]),t._v(" 表示「 "),a("strong",[t._v("公共")]),t._v(" public 」方法和属性；")])]),t._v(" "),a("p",[t._v("用「 "),a("strong",[t._v("下划线")]),t._v(" 」表示「 "),a("strong",[t._v("静态")]),t._v(" staitc 」属性或方法：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-17-34-00.png",alt:"2020-08-20-17-34-00"}})]),t._v(" "),a("p",[t._v("用 "),a("code",[t._v("{ }")]),t._v(" 来表示「 "),a("strong",[t._v("约束")]),t._v(" 」，即对于 UML 元素的限制或条件：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-17-36-31.png",alt:"2020-08-20-17-36-31"}})]),t._v(" "),a("h4",{attrs:{id:"类之间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类之间的关系"}},[t._v("#")]),t._v(" 类之间的关系")]),t._v(" "),a("p",[t._v("类关系涉及「 "),a("strong",[t._v("依赖、关联、聚合、组合、泛化")]),t._v(" 」这五种关系，耦合度依次递增。")]),t._v(" "),a("ul",[a("li",[t._v("所有的这些关系都可以看作是「 依赖 」关系，只不过根据耦合度不同，和具体表现形式不同，分别拆分成五种关系类型。")]),t._v(" "),a("li",[t._v("关于「 耦合度 」，可以简单地理解为当一个类发生变更时，对其他类造成的影响程度，影响越小则耦合度越弱，影响越大耦合度越强。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-21-09-12-57.png",alt:"2020-08-21-09-12-57"}})]),t._v(" "),a("p",[a("strong",[t._v("Dependency 依赖")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("用「 "),a("strong",[t._v("箭头虚线")]),t._v(" 」来表示，箭头指向被依赖的类。")]),t._v(" "),a("li",[t._v("依赖关系是五种关系中耦合最小的一种关系。对象 A 要实现某个行为引用了对象 B，则对象 A 依赖对象 B。")]),t._v(" "),a("li",[t._v("在代码中主要体现为，对象 B 在另一个对象 A 中作为全局变量，参数变量，局部变量，返回值，或被调用静态方法。则对象 A 依赖对象 B。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-20-17-40-17.png",alt:"2020-08-20-17-40-17"}})]),t._v(" "),a("p",[a("strong",[t._v("Association 关联")])]),t._v(" "),a("ul",[a("li",[t._v("用「 "),a("strong",[t._v("箭头实线")]),t._v(" 」来表示。")]),t._v(" "),a("li",[t._v("关联也是属于依赖的一种，但是耦合程度更强。所以把它单独从依赖中拆分出来。")]),t._v(" "),a("li",[t._v("关联关系中，对象 B 作为对象 A 的一个属性存在。发生依赖关系的两个对象都不会增加属性。")]),t._v(" "),a("li",[t._v("从对象的生命周期来看，依赖关系中，依赖关系仅在对象的某个方法被调用时产生，伴随着方法的结束而结束。而在关联关系中，当依赖对象实例化时，就与被依赖对象建立了关系。在依赖对象销毁时，关系随之结束。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-21-10-03-56.png",alt:"2020-08-21-10-03-56"}})]),t._v(" "),a("p",[t._v("关联关系有「 单向关联、双向关联、自身关联、多维关联 」等：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-21-10-10-36.png",alt:"2020-08-21-10-10-36"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("Aggregation 聚合")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("使用「 "),a("strong",[t._v("空心菱形实线")]),t._v(" 」去表示。")]),t._v(" "),a("li",[t._v("是关联关系的一种，但是耦合性更强。个体对象作为集体的一个属性中的元素存在。")]),t._v(" "),a("li",[t._v("表示集体与个体之间的关联关系。集体不会因为一个个体的离开而解散。集体与个体对象可以各自独立存在。")]),t._v(" "),a("li",[t._v("个体对象可以作为集体对象构造函数的参数传入，或者通过属性的 Setter 方法传入。")]),t._v(" "),a("li",[t._v("🌰 班级与学生，部门与员工")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-11-16-19.png",alt:"2020-08-10-11-16-19"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("Composition 组合")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("使用「 "),a("strong",[t._v("实心菱形实线")]),t._v(" 」去表示。")]),t._v(" "),a("li",[t._v("是关联关系的一种，耦合性比聚合关系更强。部分对象作为组合对象的一个属性存在。")]),t._v(" "),a("li",[t._v("表示整体与部分的关系，部分不可以在外部独立存在，部分和整体是共存亡的关系。")]),t._v(" "),a("li",[t._v("个体对象在整体对象的构造函数中被实例化。")]),t._v(" "),a("li",[t._v("🌰 人与心脏，公司与部门")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-11-19-44.png",alt:"2020-08-10-11-19-44"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("Generalization 泛化")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("泛化指的是类与类之间的继承关系和类与接口之间的实现关系。")])]),t._v(" "),a("p",[t._v("「 "),a("strong",[t._v("继承")]),t._v(" Inheritance 」关系使用「 "),a("strong",[t._v("空心三角箭头实线")]),t._v(" 」表示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-11-11-26.png",alt:"2020-08-10-11-11-26"}})]),t._v(" "),a("p",[t._v("「 "),a("strong",[t._v("实现")]),t._v(" Realization / Implementation 」关系使用「 "),a("strong",[t._v("空心三角箭头虚线")]),t._v(" 」表示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-21-09-11-02.png",alt:"2020-08-21-09-11-02"}})]),t._v(" "),a("h4",{attrs:{id:"对象间的「-可见性-」"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象间的「-可见性-」"}},[t._v("#")]),t._v(" 对象间的「 可见性 」")]),t._v(" "),a("p",[t._v("『 "),a("strong",[t._v("可见性")]),t._v(" visibility 』是对象访问其他对象的能力. 对象 A 到对象 B 的可见性通常有四种:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("属性可见性")]),t._v(" attribute visibility：B 是 A 的属性。")]),t._v(" "),a("li",[a("strong",[t._v("参数可见性")]),t._v(" parameter visibility：B 是 A 中方法的参数。")]),t._v(" "),a("li",[a("strong",[t._v("局部可见性")]),t._v(" local visibility：B 是 A 中方法的局部对象。")]),t._v(" "),a("li",[a("strong",[t._v("全局可见性")]),t._v(" global visibility：B 对象被分配给全局变量。")])]),t._v(" "),a("p",[t._v("属性可见性，是相对持久的。只要 A 和 B 存在，这种可见性就可以保持。")]),t._v(" "),a("p",[t._v("参数可见性 & 局部可见性，是相对暂时的，这种可见性仅存在方法的范围内。")]),t._v(" "),a("h4",{attrs:{id:"将-uml-类图编写成代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将-uml-类图编写成代码"}},[t._v("#")]),t._v(" 将 UML 类图编写成代码")]),t._v(" "),a("p",[t._v("之后你可以按照类图去初步编写对应代码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-10-11-01-10.png",alt:"2020-08-10-11-01-10"}})]),t._v(" "),a("h2",{attrs:{id:"设计原则-设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计原则-设计模式"}},[t._v("#")]),t._v(" 设计原则 & 设计模式")]),t._v(" "),a("p",[t._v("上面 👆 介绍了如何设计「 对象模型 」但是设计并不是凭空瞎想的, 是有章法可寻的。")]),t._v(" "),a("p",[t._v("在设计, 建模和编写代码时, 我们可以应用各种验证可行的 OO 「 "),a("strong",[t._v("设计原则")]),t._v(" 」和「 "),a("strong",[t._v("设计模式")]),t._v(" 」")]),t._v(" "),a("p",[a("strong",[t._v("设计模式，就是对「 已有问题 」及其「 解决方案 」的总结和描述")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("已有问题，指的是在前人开发时出现过的问题，很大可能性我以后在开发时也会遇到。它不是一个之前从未出现过的新问题。")]),t._v(" "),a("li",[t._v("设计模式可以帮我在遇着同类问题时，提供一个验证可行的解决方案。")])]),t._v(" "),a("p",[t._v("具体可以参考如下两篇：")]),t._v(" "),a("ul",[a("li",[a("router-link",{attrs:{to:"/计算机科学/软件开发/GRASP&SOLID.html"}},[t._v("GRASP 设计模式 & SOLID 设计原则")])],1),t._v(" "),a("li",[a("router-link",{attrs:{to:"/计算机科学/软件开发/GoF设计模式.html"}},[t._v("GoF 设计模式")])],1)]),t._v(" "),a("h2",{attrs:{id:"软件测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件测试"}},[t._v("#")]),t._v(" 软件测试")]),t._v(" "),a("p",[t._v("测试驱动开发 Test-Driven Development, TDD 是 XP 极限编程提供的优秀实践。在这种实践中，开发者要在写代码之前先写好「 测试代码 」，然后再进行业务逻辑的编写。保证代码可以通过测试之后，在继续编写更多的测试代码，如此反复。")]),t._v(" "),a("h2",{attrs:{id:"持续交付"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持续交付"}},[t._v("#")]),t._v(" 持续交付")]),t._v(" "),a("h2",{attrs:{id:"其他内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他内容"}},[t._v("#")]),t._v(" 其他内容")]),t._v(" "),a("h3",{attrs:{id:"uml-活动图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-活动图"}},[t._v("#")]),t._v(" UML 活动图")]),t._v(" "),a("p",[t._v("『 "),a("strong",[t._v("UML 活动图")]),t._v(" 』表示一个过程中的多个顺序活动和并行活动。可以用来对业务过程，工作流，数据流，和复杂算法进行建模。")]),t._v(" "),a("p",[t._v("通过活动图可以可视化地展现复杂的业务过程。更加直观，更加容易理解。")]),t._v(" "),a("h4",{attrs:{id:"活动图的基本元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#活动图的基本元素"}},[t._v("#")]),t._v(" 活动图的基本元素")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-21-19-36-35.png",alt:"2020-08-21-19-36-35"}})]),t._v(" "),a("h4",{attrs:{id:"🌰-使用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌰-使用示例"}},[t._v("#")]),t._v(" 🌰 使用示例")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-21-19-47-51.png",alt:"2020-08-21-19-47-51"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-21-19-47-18.png",alt:"2020-08-21-19-47-18"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-08-21-19-48-11.png",alt:"2020-08-21-19-48-11"}})])],1)}),[],!1,null,null,null);"function"==typeof _&&_(r);s.default=r.exports}}]);