(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{402:function(v,_,t){"use strict";t.r(_);var a=t(0),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"线性表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线性表"}},[v._v("#")]),v._v(" 线性表")]),v._v(" "),t("h2",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[v._v("#")]),v._v(" 数组")]),v._v(" "),t("p",[v._v("『 "),t("strong",[v._v("数组")]),v._v(" 』（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。")]),v._v(" "),t("h3",{attrs:{id:"概念解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念解析"}},[v._v("#")]),v._v(" 概念解析")]),v._v(" "),t("p",[v._v("『 "),t("strong",[v._v("线性表")]),v._v(" 』简单说就是数据排成一条线一样的结构.  表上每一个位置上的数据最多有前后两个方向.  除了数组，链表、队列、栈等也是线性表结构")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/Ofk2ILu.jpg",alt:"b6b71ec46935130dff5c4b62cf273477"}})]),v._v(" "),t("p",[v._v("『 "),t("strong",[v._v("连续的内存空间和相同类型的数据")]),v._v(' 』让数组可以实现 "随机访问" 但也让数组操作变得低效')]),v._v(" "),t("p",[v._v("🌰 举例:")]),v._v(" "),t("p",[v._v("假如有一个长度为 10 的 int 类型数组.  计算机分配了一块连续的内存空间 1000 - 1039, 内存块的首地址为 1000")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/xr3dOhf.jpg",alt:"98df8e702b14096e7ee4a5141260cdc4"}})]),v._v(" "),t("p",[v._v("计算机会给每个\b内存单元分配一个地址, 计算机通过地址来访问内存中的数据.  当计算机要随机访问其中的某个\b元素的时候, 它会计算出\b元素的内存地址.")]),v._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[v._v("注意")]),v._v(" "),t("p",[v._v("\b很多人会说数组查找某个元素的时间复杂度\b为 O(1), 其实是数组支持随机访问, 使用下标随机访问的时间复杂度为 O(1)")])]),v._v(" "),t("h3",{attrs:{id:"低效的-插入-和-删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#低效的-插入-和-删除"}},[v._v("#")]),v._v(' 低效的 "插入" 和 "删除"')]),v._v(" "),t("p",[v._v("『 "),t("strong",[v._v("插入")]),v._v(' 』: 在数组顺序是 "有序" 的情况下.  假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。')]),v._v(" "),t("p",[v._v("如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数组插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。 这样的话插入的事件复杂度就为 O(1)")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/D9AhCdv.jpg",alt:"3f70b4ad9069ec568a2caaddc231b7dc"}})]),v._v(" "),t("p",[v._v("『 "),t("strong",[v._v("删除")]),v._v(" 』: 跟插入数据类似，如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据.")]),v._v(" "),t("p",[v._v("和插入类似，如果删除数组末尾的数据，则最好情况时间复杂度为 O(1)；如果删除开头的数据，则最坏情况时间复杂度为 O(n)；平均情况时间复杂度也为 O(n)。")]),v._v(" "),t("p",[v._v("为了提高效率, 在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。我们可以将多次删除操作集中在一起执.")]),v._v(" "),t("p",[v._v("假如数组 a[10] 中存储了 8 个元素：a，b，c，d，e，f，g，h。现在，我们要依次删除 a，b，c 三个元素。为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。")]),v._v(" "),t("h2",{attrs:{id:"链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[v._v("#")]),v._v(" 链表")]),v._v(" "),t("p",[v._v("『 链表 』是一种非连续、非顺序的存储结构.  数据元素的逻辑顺序是通过链表中的指针链接次序实现的。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/OEFlhsx.jpg",alt:"d5d5bee4be28326ba3c28373808a62cd"}})]),v._v(" "),t("p",[v._v("不同于数组, 如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。")]),v._v(" "),t("p",[v._v("而链表恰恰相反，它并不需要一块连续的内存空间.  它通过“指针”将一组零散的内存块串联起来使用，所以如果我们申请的是 100MB 大小的链表，根本不会有问题。")]),v._v(" "),t("h3",{attrs:{id:"常见的链表结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的链表结构"}},[v._v("#")]),v._v(" 常见的链表结构")]),v._v(" "),t("p",[v._v("『 "),t("strong",[v._v("单链表")]),v._v(" 』: 链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的 “结点”。")]),v._v(" "),t("p",[v._v('每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。我们把这个记录下个结点地址的指针叫作 "后继指针 next"。')]),v._v(" "),t("p",[v._v('链表上第一个结点叫作 "头结点"，把最后一个结点叫作 "尾结点"。头结点用来记录链表的基地址。尾结点指向一个空地址 '),t("code",[v._v("NULL")]),v._v("，表示这是链表上最后一个结点。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/3U5wLvh.jpg",alt:"b93e7ade9bb927baad1348d9a806ddeb"}})]),v._v(" "),t("p",[v._v("在链表中插入或者删除一个数据，我们并不需要为了保持内存的连续性而搬移结点，因为链表的存储空间本身就不是连续的。我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度是 O(1)。")]),v._v(" "),t("p",[v._v("但链表要想随机访问第 k 个元素，就那么高效了.  因为链表中的数据并非连续存储的，所以无法像数组那样，，根据首地址和下标，，通过寻址公式就能直接计算出对应的内存地址. 需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。")]),v._v(" "),t("p",[v._v("『 "),t("strong",[v._v("循环列表")]),v._v(" 』: 是一种特殊的单链表.  它跟单链表唯一的区别就在尾结点.  循环链表的尾结点指针是指向链表的头结点。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/WeOa4XU.jpg",alt:"86cb7dc331ea958b0a108b911f38d155"}})]),v._v(" "),t("p",[v._v("和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环型结构特点时，就特别适合采用循环链表。")]),v._v(" "),t("p",[v._v("『 \b"),t("strong",[v._v("双向列表")]),v._v(' 』: 每个结点不止有一个 "后继指针 next" 指向后面的结点，还有一个 "前驱指针 prev" 指向前面的结点。这也导致如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。但可以支持双向遍历，灵活性更强')]),v._v(" "),t("p",[t("img",{attrs:{src:"https://i.imgur.com/M4xeTxM.jpg",alt:"cbc8ab20276e2f9312030c313a9ef70b"}})]),v._v(" "),t("p",[v._v("从结构上来看，双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效。")]),v._v(" "),t("p",[v._v("你可能会说，我刚讲到单链表的插入、删除操作的时间复杂度已经是 O(1) 了，双向链表还能再怎么高效呢？")]),v._v(" "),t("p",[v._v("在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：")]),v._v(" "),t("ul",[t("li",[v._v("删除结点中 “值等于某个给定值” 的结点；")]),v._v(" "),t("li",[v._v("删除给定指针指向的结点")])]),v._v(" "),t("p",[v._v("第一种情况，不管是单链表还是双向链表，都需要从头结点开始一个一个依次遍历对比，直到找到值等于给定值的结点，然后再删除")]),v._v(" "),t("p",[v._v("尽管单纯的删除操作时间复杂度是 O(1)，但遍历查找的时间复杂度为 O(n)。根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为 O(n)")]),v._v(" "),t("p",[v._v("第二种情况，我们已经找到了要删除的结点，但是删除某个结点 q 需要知道其前驱结点，而单链表并不支持直接获取前驱结点，所以，为了找到前驱结点，我们还是要从头结点开始遍历链表. 单链表删除操作需要 O(n) 的时间复杂度.   但是对于双向链表来说，结点已经保存了前驱结点的指针. 所以，双向链表只需要在 O(1) 的时间复杂度内就搞定了！")]),v._v(" "),t("h3",{attrs:{id:"链表-vs-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表-vs-数组"}},[v._v("#")]),v._v(" 链表 VS 数组")]),v._v(" "),t("p",[v._v("数组和链表的对比，并不能局限于时间复杂度。在实际的软件开发中，不能仅仅利用复杂度分析就决定使用哪个数据结构来存储数据。")]),v._v(" "),t("p",[v._v("数组简单易用，在实现上使用的是连续的内存空间，可以借助 CPU 的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对 CPU 缓存不友好，没办法有效预读。")]),v._v(" "),t("p",[v._v("数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它.  链表本身没有大小的限制，天然地支持动态扩容")]),v._v(" "),t("p",[v._v("如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的存储空间去存储一份指向下一个结点的指针")]),v._v(" "),t("h2",{attrs:{id:"栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[v._v("#")]),v._v(" 栈")]),v._v(" "),t("p",[v._v("『 "),t("strong",[v._v("栈")]),v._v(' 』的结构为 "后进者先出，先进者后出".  就像码盘子.  从栈的操作特性上来看，栈是一种“操作受限”的线性表，只允许在一端插入和删除数据。但这样有什么好处呢?')]),v._v(" "),t("p",[v._v("从功能上来说，数组或链表确实可以替代栈，但数组或链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然也就更容易出错。")]),v._v(" "),t("p",[v._v("当某个数据集合只涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性，我们就应该首选 “栈” 这种数据结构。")]),v._v(" "),t("p",[t("strong",[v._v("特定数据结构是对特定场景的抽象")])]),v._v(" "),t("h2",{attrs:{id:"队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[v._v("#")]),v._v(" 队列")]),v._v(" "),t("p",[v._v("『 "),t("strong",[v._v("队列")]),v._v(' 』先进者先出，这就是典型的“队列”。队列跟栈非常相似，支持的操作也很有限，最基本的操作也是两个："入队" 放一个数据到队列尾部, "出队" 从队列头部取一个元素。')])])}),[],!1,null,null,null);_.default=s.exports}}]);