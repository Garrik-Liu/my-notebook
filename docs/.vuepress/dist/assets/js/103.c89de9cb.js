(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{315:function(t,e,v){"use strict";v.r(e);var l=v(0),s=Object(l.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"servlet"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#servlet"}},[t._v("#")]),t._v(" Servlet")]),t._v(" "),v("h2",{attrs:{id:"什么是-servlet"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是-servlet"}},[t._v("#")]),t._v(" 什么是 Servlet")]),t._v(" "),v("ul",[v("li",[t._v("Servlet 是运行在服务器的 Java 小程序，是 sun 公司提供的一套规范（接口）")]),t._v(" "),v("li",[t._v("用来处理客户端请求，和发出响应；")]),t._v(" "),v("li",[t._v("当服务器收到请求，就会按照一定的规则调用代码，然后返回给客户端响应；")])]),t._v(" "),v("h2",{attrs:{id:"servlet-快速入门"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#servlet-快速入门"}},[t._v("#")]),t._v(" Servlet 快速入门")]),t._v(" "),v("h3",{attrs:{id:"创建-service"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建-service"}},[t._v("#")]),t._v(" 创建 service")]),t._v(" "),v("ul",[v("li",[t._v("在项目目录中 "),v("code",[t._v("JavaResource/src")]),t._v(" 下，创建一个包名称为 "),v("code",[t._v("com.xxxx.servlet")]),t._v("；")]),t._v(" "),v("li",[t._v("在包中创建一个 class 文件，名为 "),v("code",[t._v("FirstServlet.java")]),t._v("；")]),t._v(" "),v("li",[t._v("在该 class 中实现 Servlet 接口，也就是实现它没有完成的方法：\n"),v("ul",[v("li",[t._v("主要是 "),v("code",[t._v("service")]),t._v(" 方法，该方法用于处理请求和返回；")])])])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-22-16-28-57.png",alt:"2020-1-22-16-28-57.png"}})]),t._v(" "),v("ul",[v("li",[t._v("在 "),v("code",[t._v("web.xml")]),t._v(" 中进行 Servlet 配置：\n"),v("ul",[v("li",[v("code",[t._v("<servlet>")]),t._v(" 里面定义 servlet 的名字，和类实现的位置；")]),t._v(" "),v("li",[v("code",[t._v("<servlet-mapping>")]),t._v(" 里面做一个映射，对应的 api 访问对应的服务；")])])])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-22-16-30-55.png",alt:"2020-1-22-16-30-55.png"}})]),t._v(" "),v("ul",[v("li",[t._v("在 "),v("code",[t._v("service")]),t._v(" 方法中，通过 "),v("code",[t._v("HttpServiceResponse")]),t._v(" 对象来进行响应：")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-22-16-31-20.png",alt:"2020-1-22-16-31-20.png"}})]),t._v(" "),v("p",[t._v("之后访问对应的 URL 就可以对 Servlet 发起请求，并获得响应了。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-22-22-36-7.png",alt:"2020-1-22-22-36-7.png"}})]),t._v(" "),v("h3",{attrs:{id:"生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("init")]),t._v("：\n"),v("ul",[v("li",[t._v("默认，第一次接收到请求访问的时候创建对象，调用此方法；")]),t._v(" "),v("li",[t._v("对象被创建完后，会被缓存。之后接收请求，就不调用此方法了；")]),t._v(" "),v("li",[t._v("通过配置可以设置在服务器启动时创建对象，调用此方法：\n"),v("ul",[v("li",[t._v("通过 "),v("code",[t._v("<load-on-startup>")]),t._v(" 来让服务器启动时创建 servlet 对象；")]),t._v(" "),v("li",[t._v("中间的数字，是创建的优先级；")]),t._v(" "),v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-24-13-16-31.png",alt:"2020-1-24-13-16-31.png"}})])])])])]),t._v(" "),v("li",[v("strong",[t._v("service")]),t._v("：\n"),v("ul",[v("li",[t._v("每次接收到请求的时候被调用；")])])]),t._v(" "),v("li",[v("strong",[t._v("destory")]),t._v("：\n"),v("ul",[v("li",[t._v("当 servel 销毁前被调用；")]),t._v(" "),v("li",[t._v("服务器关系，servlet 销毁；")])])])]),t._v(" "),v("h3",{attrs:{id:"servlet-配置信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#servlet-配置信息"}},[t._v("#")]),t._v(" Servlet 配置信息")]),t._v(" "),v("h4",{attrs:{id:"config-参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#config-参数"}},[t._v("#")]),t._v(" config 参数")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("init")]),t._v(" 方法里的 ServletConfig 类型参数可以用来：\n"),v("ul",[v("li",[t._v("获取 servlet 的配置信息；")]),t._v(" "),v("li",[t._v("获取 web.xml 中的初始化参数；")]),t._v(" "),v("li",[t._v("获取 servletContext 上下文对象；")])])])]),t._v(" "),v("p",[t._v("在 xml 里定义初始化参数：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-24-14-44-18.png",alt:"2020-1-24-14-44-18.png"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-24-14-42-0.png",alt:"2020-1-24-14-42-0.png"}})]),t._v(" "),v("h4",{attrs:{id:"url-patten"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#url-patten"}},[t._v("#")]),t._v(" url-patten")]),t._v(" "),v("p",[t._v("web.xml 中 Servlet 对应的 url 匹配方式有三种：")]),t._v(" "),v("ul",[v("li",[t._v("完全匹配：\n"),v("ul",[v("li",[t._v("必须 url 和定义的路径完全一样，才可以匹配；")]),t._v(" "),v("li",[v("code",[t._v("<url-pattern>/FirstServlet</url-pattern>")])]),t._v(" "),v("li",[t._v("示例 URL："),v("code",[t._v("http://localhost:8080/myWeb/FirstServlet")])])])]),t._v(" "),v("li",[t._v("目录匹配：\n"),v("ul",[v("li",[t._v("只要 url 中包括了定义的路径，就可以匹配；")]),t._v(" "),v("li",[v("code",[t._v("<url-pattern>/FirstServlet/*</url-pattern>")])]),t._v(" "),v("li",[t._v("示例 URL："),v("code",[t._v("http://localhost:8080/myWeb/FirstServlet/123")])])])]),t._v(" "),v("li",[t._v("扩展名匹配：\n"),v("ul",[v("li",[t._v("只有 url 最后以定义的后缀结尾，就可以匹配；")]),t._v(" "),v("li",[v("code",[t._v("<url-pattern>*.FirstServlet</url-pattern>")])]),t._v(" "),v("li",[t._v("示例 URL："),v("code",[t._v("http://localhost:8080/myWeb/123.FirstServlet")])])])])]),t._v(" "),v("h4",{attrs:{id:"缺省-servlet"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缺省-servlet"}},[t._v("#")]),t._v(" 缺省 Servlet")]),t._v(" "),v("ul",[v("li",[t._v("访问的 Servlet 不存在时，就会找缺省的路径对应的 Servlet；")]),t._v(" "),v("li",[v("code",[t._v("<url-patternn>/</url-patternn>")])])]),t._v(" "),v("h4",{attrs:{id:"全局-web-xml"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#全局-web-xml"}},[t._v("#")]),t._v(" 全局 web.xml")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-24-15-24-14.png",alt:"2020-1-24-15-24-14.png"}})]),t._v(" "),v("ul",[v("li",[t._v("应用所部署到的服务器也有一个 web.xml 文件；")]),t._v(" "),v("li",[t._v("它对于所有部署到服务器上的应用都有效；")]),t._v(" "),v("li",[t._v("之前没在应用里设置缺省 Servlet 的时候，就是应用的全局 web.xml 里的缺省 Servlet；")]),t._v(" "),v("li",[t._v("当在做路径匹配的时候，先去应用自己的 web.xml 查找，找不到再去全局的里面找；")])]),t._v(" "),v("h4",{attrs:{id:"静态资源加载过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#静态资源加载过程"}},[t._v("#")]),t._v(" 静态资源加载过程")]),t._v(" "),v("ul",[v("li",[t._v("在 "),v("code",[t._v("http://域名:端口/应用名/")]),t._v(" 后面写的静态资源，在被请求时，依旧去找有没有匹配的 Servlet。服务器会拿 "),v("code",[t._v("<url-pattern>")]),t._v(" 进行匹配；")]),t._v(" "),v("li",[t._v("如果有，则加载对应的 Servlet；")]),t._v(" "),v("li",[t._v("如果没有就去在应用目录下找缺省 Servlet；")]),t._v(" "),v("li",[t._v("如果应用自己没有缺省 Servlet，就去找全局的缺省 Servlet；")]),t._v(" "),v("li",[t._v("全局缺省 Servlet 对应是名为 default 的 Servlet；")]),t._v(" "),v("li",[t._v("default Servlet 会到当前应用的 WebContent 目录中去找对应名称的静态资源；")]),t._v(" "),v("li",[v("code",[t._v("http://域名:端口/应用名/")]),t._v(" 后面什么都不写，则默认去找 WebContent 目录中的 index.html 文件；")]),t._v(" "),v("li",[t._v("如果找到了，就响应给服务器；")]),t._v(" "),v("li",[t._v("如果没有，就报 404；")])]),t._v(" "),v("details",{staticClass:"custom-block details",attrs:{open:"open"}},[v("summary",[t._v("例子：")]),t._v(" "),v("p",[t._v("在项目 WebContent 下创建一个 haha.html 文件；")]),t._v(" "),v("p",[t._v("然后访问这个文件，服务器就会返回它；")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-24-15-44-57.png",alt:"2020-1-24-15-44-57.png"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-24-15-44-29.png",alt:"2020-1-24-15-44-29.png"}})])]),t._v(" "),v("h2",{attrs:{id:"反射机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反射机制"}},[t._v("#")]),t._v(" 反射机制")]),t._v(" "),v("h3",{attrs:{id:"类的加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的加载"}},[t._v("#")]),t._v(" 类的加载")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("当程序要使用某个类时，如果类还没有加载到内存中。系统会通过"),v("strong",[t._v("加载，连接，初始化")]),t._v("三步来实现呢对类的初始化：")]),t._v(" "),v("ul",[v("li",[t._v("加载：将 class 文件读入内存，并为之创建一个 Class 对象（字节码对象）；")]),t._v(" "),v("li",[t._v("连接：\n"),v("ul",[v("li",[t._v("验证：是否有正确的内部结构，并与其他类协调一致；")]),t._v(" "),v("li",[t._v("准备：负责为类的静态成员分配内存，并设置默认初始化值；")])])]),t._v(" "),v("li",[t._v("初始化：初始化成员变量；")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("加载时机")]),t._v("：（执行以下操作时，会进行类的加载）")]),t._v(" "),v("ul",[v("li",[t._v("创建类的实例；")]),t._v(" "),v("li",[t._v("访问类的静态变量，为静态变量赋值；")]),t._v(" "),v("li",[t._v("调用类的静态方法；")]),t._v(" "),v("li",[t._v("初始化某个类的子类；")]),t._v(" "),v("li",[t._v("使用反射方式来强制创建某个类或者接口对应的 java.lang.Class 对象；")])])])]),t._v(" "),v("h3",{attrs:{id:"类加载器-class-loader"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类加载器-class-loader"}},[t._v("#")]),t._v(" 类加载器 Class Loader")]),t._v(" "),v("ul",[v("li",[t._v("负责将 .class 文件加载到内存中，并为之生成对应的 Class 对象（字节码对象）；")]),t._v(" "),v("li",[t._v("我们并不需要掌握加载机制，但通过了解类加载机制，可以更好的了解程序运行；")]),t._v(" "),v("li",[t._v("类加载器分类：\n"),v("ul",[v("li",[t._v("根类加载器：负责 Java 核心类加载；")]),t._v(" "),v("li",[t._v("扩展类加载器：负责 jar 包的加载；")]),t._v(" "),v("li",[t._v("系统类加载器：负责 JVM 启动时，加载来自 java 命令的 class 文件；")])])])]),t._v(" "),v("h3",{attrs:{id:"什么是反射"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是反射"}},[t._v("#")]),t._v(" 什么是反射")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("创建对象的三个阶段：")]),t._v(" "),v("ul",[v("li",[t._v("源文件阶段 “.java 文件”；")]),t._v(" "),v("li",[t._v("编译成字节码阶段 “.class 文件”；")]),t._v(" "),v("li",[t._v("创建对象阶段 “new 对象名称”；")])])]),t._v(" "),v("li",[v("p",[t._v("内省：在运行时能够获取 JavaBean 当中的属性名称和 get 和 set 方法；")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("反射")])]),t._v(" "),v("ul",[v("li",[t._v("Java 反射机制是在运行状态中，对于任意的一个类，拿到字节码之后，都能访问这个类的所有属性和方法；")]),t._v(" "),v("li",[t._v("通过字节码还能创建对象；")]),t._v(" "),v("li",[v("strong",[t._v("这种动态获取信息以及动态调用对象的方法的功能被称为“反射机制”")]),t._v("；")]),t._v(" "),v("li",[t._v("要想使用反射，必须获取字节码文件；")])])]),t._v(" "),v("li",[v("p",[t._v("获取字节码文件：")]),t._v(" "),v("ul",[v("li",[t._v("Object 类的 "),v("code",[t._v("getClass()")]),t._v(" 方法；")]),t._v(" "),v("li",[t._v("静态属性 class；")]),t._v(" "),v("li",[t._v("Class 类中静态方法 "),v("code",[t._v("forName()")]),t._v("；")]),t._v(" "),v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-22-23-19-31.png",alt:"2020-1-22-23-19-31.png"}})])])])]),t._v(" "),v("h3",{attrs:{id:"“反射机制”-实践"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#“反射机制”-实践"}},[t._v("#")]),t._v(" “反射机制” 实践")]),t._v(" "),v("h4",{attrs:{id:"通过字节码创建对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#通过字节码创建对象"}},[t._v("#")]),t._v(" 通过字节码创建对象")]),t._v(" "),v("p",[t._v("先创建一个类：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-23-0-15-32.png",alt:"2020-1-23-0-15-32.png"}})]),t._v(" "),v("p",[t._v("然后用字节码去创建对象：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-23-0-11-52.png",alt:"2020-1-23-0-11-52.png"}})]),t._v(" "),v("h4",{attrs:{id:"获取字段，设置字段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#获取字段，设置字段"}},[t._v("#")]),t._v(" 获取字段，设置字段")]),t._v(" "),v("p",[v("strong",[t._v("获取公共字段")]),t._v("：")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("getField()")]),t._v(" 方法返回一个 Field 对象，该对象反射类中指定的 public 字段；")]),t._v(" "),v("li",[v("code",[t._v("set()")]),t._v(" 方法来为指定的对象，设置对应字段的值；")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-23-0-17-5.png",alt:"2020-1-23-0-17-5.png"}})]),t._v(" "),v("p",[v("strong",[t._v("获取私有字段")]),t._v("：")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("getDeclaredField()")]),t._v(" 方法返回一个 Field 对象，该对象反射类中指定的已声明字段；")]),t._v(" "),v("li",[v("code",[t._v("setAccessible()")]),t._v(" 方法让私有字段变得允许访问；")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-23-0-28-2.png",alt:"2020-1-23-0-28-2.png"}})]),t._v(" "),v("h4",{attrs:{id:"获取方法，执行方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#获取方法，执行方法"}},[t._v("#")]),t._v(" 获取方法，执行方法")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-23-0-38-7.png",alt:"2020-1-23-0-38-7.png"}})]),t._v(" "),v("h3",{attrs:{id:"tomcat-反射加载-servlet"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-反射加载-servlet"}},[t._v("#")]),t._v(" Tomcat 反射加载 Servlet")]),t._v(" "),v("h2",{attrs:{id:"使用注解创建-servlet"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用注解创建-servlet"}},[t._v("#")]),t._v(" 使用注解创建 Servlet")]),t._v(" "),v("ul",[v("li",[t._v("之前创建 Servlet 时，每次都要去 "),v("code",[t._v("web.xml")]),t._v(" 下添加 "),v("code",[t._v("<servlet>")]),t._v(" 和 "),v("code",[t._v("<servlet-mapping>")]),t._v("；")]),t._v(" "),v("li",[t._v("从 Servlet 3.0 开始，可以直接使用 “注解” 的形式去使用 Servlet；")]),t._v(" "),v("li",[t._v("创建过程：\n"),v("ul",[v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-0-40-4.png",alt:"2020-1-26-0-40-4.png"}})]),t._v(" "),v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-0-40-54.png",alt:"2020-1-26-0-40-54.png"}})]),t._v(" "),v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-0-41-53.png",alt:"2020-1-26-0-41-53.png"}})]),t._v(" "),v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-0-42-29.png",alt:"2020-1-26-0-42-29.png"}})])])]),t._v(" "),v("li",[t._v("创建好的 Servlet 上会有一个 "),v("code",[t._v('@WebServlet("/myServlet")')]),t._v(" ：\n"),v("ul",[v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-0-54-20.png",alt:"2020-1-26-0-54-20.png"}})]),t._v(" "),v("li",[t._v("这个就是一个注解；")]),t._v(" "),v("li",[t._v("贴上注解之后，就不用去 web.xml 中手动配置了；")]),t._v(" "),v("li",[t._v("注解中括号内的内容，就是 url-pattern 的内容；")])])]),t._v(" "),v("li",[t._v("注意，为了让注解生效。"),v("code",[t._v("web.xml")]),t._v(" 当中的 "),v("code",[t._v("metadata-complete")]),t._v(" 要设置为 "),v("code",[t._v("false")]),t._v("。它表示，是否扫描类当中定义的注解；\n"),v("ul",[v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-0-58-7.png",alt:"2020-1-26-0-58-7.png"}})])])])]),t._v(" "),v("h2",{attrs:{id:"httpservlet"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#httpservlet"}},[t._v("#")]),t._v(" HttpServlet")]),t._v(" "),v("ul",[v("li",[t._v("用上面 👆 方法，直接 new 的 Servlet 就是一个 HttpServlet；")]),t._v(" "),v("li",[t._v("HttpServlet 专门用来负责处理 http 请求与响应；")]),t._v(" "),v("li",[t._v("HttpServlet 是 GenericServlet 的子类；\n"),v("ul",[v("li",[v("code",[t._v("class HttpServlet extends GenericServlet")]),t._v("；")])])]),t._v(" "),v("li",[t._v("GenericServlet 实现了 Servlet 接口；\n"),v("ul",[v("li",[v("code",[t._v("class GenericServlet implements Servlet")]),t._v("；")])])]),t._v(" "),v("li",[t._v("HttpServlet 方法：\n"),v("ul",[v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-1-14-15.png",alt:"2020-1-26-1-14-15.png"}})]),t._v(" "),v("li",[v("strong",[t._v("service 方法")]),t._v("：无论接收 get 或 post 请求，都执行；\n"),v("ul",[v("li",[t._v("一旦写了 service 方法，就并不会再执行 doGet 或 doPost 方法；")])])]),t._v(" "),v("li",[v("strong",[t._v("doGet 方法")]),t._v("：接收到 get 方法时执行；")]),t._v(" "),v("li",[v("strong",[t._v("doPost 方法")]),t._v("：接收到 post 方法时执行；")])])]),t._v(" "),v("li",[t._v("HttpServlet 内部方法调用过程：\n"),v("ul",[v("li",[t._v("当接收到一个请求，Tomcat 会先找对应的 Servlet 的 service 方法；")]),t._v(" "),v("li",[t._v("如果 Servlet 没有 service 方法，就去它的父类 HttpServlet 中找；\n"),v("ul",[v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-16-56-41.png",alt:"2020-1-26-16-56-41.png"}})])])]),t._v(" "),v("li",[t._v("父类当中找到 service 是参数为 ServletRequest，它会在内部把参数转化为 HttpServletRequest；")]),t._v(" "),v("li",[t._v("转换完毕后，会继续调用参数为 HttpServletRequest 的 service 方法；\n"),v("ul",[v("li",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-16-57-35.png",alt:"2020-1-26-16-57-35.png"}})]),t._v(" "),v("li",[t._v("如果在自己实现的 HttpServlet 中，定义了 service 方法，那么就会覆盖上面这个方法。自己定义的 service 会被调用；")]),t._v(" "),v("li",[t._v("自己没有定义 service 方法的话，就会根据请求方法（get，post，put，delete）来调用对应的方法；")])])])])])]),t._v(" "),v("h2",{attrs:{id:"案例：用户登录功能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#案例：用户登录功能"}},[t._v("#")]),t._v(" 案例：用户登录功能")]),t._v(" "),v("ul",[v("li",[t._v("需求： 用户输入用户名和密码，程序需要去数据库验证登录是否正确；")]),t._v(" "),v("li",[t._v("步骤：\n"),v("ul",[v("li",[t._v("到数据库创建一个 “用户表”:")]),t._v(" "),v("li",[t._v("编写 html 登录页面；")]),t._v(" "),v("li",[t._v("创建 LoginServlet；")]),t._v(" "),v("li")])])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-17-4-6.png",alt:"2020-1-26-17-4-6.png"}})]),t._v(" "),v("p",[t._v("创建用户表：")]),t._v(" "),v("ul",[v("li",[t._v("id；")]),t._v(" "),v("li",[t._v("name；")]),t._v(" "),v("li",[t._v("password；")]),t._v(" "),v("li",[t._v("email；")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-17-11-7.png",alt:"2020-1-26-17-11-7.png"}})]),t._v(" "),v("p",[t._v("Java 项目中创建数据表的映射：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-17-12-31.png",alt:"2020-1-26-17-12-31.png"}})])])}),[],!1,null,null,null);e.default=s.exports}}]);