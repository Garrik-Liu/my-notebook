(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{205:function(t,s,e){"use strict";e.r(s);var i=e(0),n=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"适配器模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 适配器模式")]),s("p",[this._v("适配器模式（Adapter）："),s("strong",[this._v("将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决")]),this._v("。")]),s("p",[this._v("简单来说, 适配器就像我们生活中用的转换插头.  在编程中, 适配器就是为两个代码库所写的代码兼容运行而书写的额外代码。有了这样的适配器，你就不需要特意地重写以前的功能代码了。你只需要让用以前的代码库所写的代码适配新代码库就可以了。")])])}],!1,null,null,null);s.default=n.exports}}]);