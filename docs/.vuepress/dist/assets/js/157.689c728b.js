(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{368:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"maven"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven"}},[a._v("#")]),a._v(" Maven")]),a._v(" "),s("p",[s("a",{attrs:{href:"http://c.biancheng.net/view/4715.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("C 语言中文网 Maven"),s("OutboundLink")],1),a._v(" "),s("a",{attrs:{href:"http://www.yiidian.com/maven/what-is-maven.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("一点教程 Maven"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"什么是-maven"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-maven"}},[a._v("#")]),a._v(" 什么是 Maven")]),a._v(" "),s("ul",[s("li",[a._v("Maven 是 Apache 开源组织奉献的一个开源项目；")]),a._v(" "),s("li",[a._v("Maven 的本质是一个"),s("strong",[a._v("项目管理工具")]),a._v("，将项目开发和管理过程抽象成一个"),s("strong",[a._v("项目对象模型")]),a._v("（POM）；")]),a._v(" "),s("li",[a._v("开发人员只需做一些简单的配置，就可以批量完成项目的构建、报告和文档的生成工作；")]),a._v(" "),s("li",[a._v("Maven 可以统一管理所有的依赖 jar 包；")]),a._v(" "),s("li",[a._v("Maven 作为一个开放的架构，提供了公共接口，方便同第三方插件集成。程序员可以将自己需要的插件，动态地集成到 Maven，从而扩展新的管理功能；")])]),a._v(" "),s("h2",{attrs:{id:"maven-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven-安装"}},[a._v("#")]),a._v(" Maven 安装")]),a._v(" "),s("ul",[s("li",[a._v("前往 http://maven.apache.org/download.cgi 下载 Binary 文件；")]),a._v(" "),s("li",[a._v("下载完，解压后，放到自己想放的目录下。我放在了 "),s("code",[a._v("/Library")]),a._v(" 目录下；")]),a._v(" "),s("li",[a._v("之后修改 "),s("code",[a._v("~/.bash_profile")]),a._v(" 文件配置路径；")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("M2_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/Library/apache-maven-3.3.3\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$M2_HOME")]),a._v("/bin\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("JAVA_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/Library/Java/JavaVirtualMachines/jdk1.7.0_11.jdk/Contents/Home\n")])])]),s("ul",[s("li",[a._v("修改完，执行 "),s("code",[a._v("source ~/.bash_profile")]),a._v("；")]),a._v(" "),s("li",[a._v("然后执行 "),s("code",[a._v("mvn -v")]),a._v(" 查看是否安装成功；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-11-25-22.png",alt:"2020-2-24-11-25-22.png"}})]),a._v(" "),s("h2",{attrs:{id:"命令行创建-maven-项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令行创建-maven-项目"}},[a._v("#")]),a._v(" 命令行创建 Maven 项目")]),a._v(" "),s("h4",{attrs:{id:"直接输入-mvn-archetype-generate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接输入-mvn-archetype-generate"}},[a._v("#")]),a._v(" 直接输入 mvn archetype:generate")]),a._v(" "),s("ul",[s("li",[a._v("输入命令 "),s("code",[a._v("mvn archetype:generate")]),a._v("，按回车，根据提示输入参数；")]),a._v(" "),s("li",[a._v("会先让你选骨架，默认使用 "),s("code",[a._v("maven-archetype-quickstart")]),a._v("；")]),a._v(" "),s("li",[a._v("然后一步步提示输入 groupId、artifactId、version、packageName 等信息；")]),a._v(" "),s("li",[a._v("上面输入的这些信息，在后面有讲解；")]),a._v(" "),s("li",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-13-12-31.png",alt:"2020-2-24-13-12-31.png"}})]),a._v(" "),s("li",[a._v("之后项目就创建好了；")])]),a._v(" "),s("h4",{attrs:{id:"在命令中使用参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在命令中使用参数"}},[a._v("#")]),a._v(" 在命令中使用参数")]),a._v(" "),s("ul",[s("li",[a._v("也可以在命令行中，直接把各种参数都填进去；")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("mvn archetype:generate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n    -DgroupId"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("com.garrik "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n    -DartifactId"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("HelloWorld "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n    -DarchetypeArtifactId"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("maven-archetype-quickstart "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n    -Dversion"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),a._v("-SNAPSHOT\n")])])]),s("h2",{attrs:{id:"maven-基础概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven-基础概念"}},[a._v("#")]),a._v(" Maven 基础概念")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-14-12-11.png",alt:"2020-2-24-14-12-11.png"}})]),a._v(" "),s("h3",{attrs:{id:"pom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pom"}},[a._v("#")]),a._v(" POM")]),a._v(" "),s("ul",[s("li",[a._v("POM (Project Object Model) 项目对象模型；")]),a._v(" "),s("li",[a._v("是一个 XML 文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等；")]),a._v(" "),s("li",[a._v("执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标；")])]),a._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("project")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("xmlns")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("http://maven.apache.org/POM/4.0.0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("xmlns:")]),a._v("xsi")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("http://www.w3.org/2001/XMLSchema-instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("xsi:")]),a._v("schemaLocation")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("http://maven.apache.org/POM/4.0.0\n    http://maven.apache.org/xsd/maven-4.0.0.xsd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!-- 模型版本 --\x3e")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("modelVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("4.0.0"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("modelVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --\x3e")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("com.companyname.project-group"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --\x3e")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("project"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!-- 版本号 --\x3e")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("1.0"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("project")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),s("h3",{attrs:{id:"坐标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#坐标"}},[a._v("#")]),a._v(" 坐标")]),a._v(" "),s("ul",[s("li",[a._v("groupId：定义当前项目隶属项目、组织，公司")]),a._v(" "),s("li",[a._v("artifactId：定义实际项目中的一个模块")]),a._v(" "),s("li",[a._v("version：定义当前项目的当前版本")]),a._v(" "),s("li",[a._v("groupId , artifactId , version 三个元素是项目的坐标，是这个项目的唯一标识；")]),a._v(" "),s("li",[a._v("groupId 建议具体到项目名，因为公司或者组织下有多个项目，而 artifactId 只能代表模块名；")])]),a._v(" "),s("h3",{attrs:{id:"maven-仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven-仓库"}},[a._v("#")]),a._v(" Maven 仓库")]),a._v(" "),s("ul",[s("li",[a._v("在 Maven 的术语中，仓库是一个位置（place）；")]),a._v(" "),s("li",[a._v("Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库；")]),a._v(" "),s("li",[a._v("在 Maven 中，任何一个依赖、插件或者项目打包之后的输出，都可以称之为构件 （一般这个构件是 jar 包）；")]),a._v(" "),s("li",[a._v("Maven 仓库能帮助我们管理构件。它就是放置所有 JAR 文件（WAR，ZIP，POM 等等）的地方；")]),a._v(" "),s("li",[a._v("Maven 仓库有三种类型：\n"),s("ul",[s("li",[a._v("本地（local）")]),a._v(" "),s("li",[a._v("中央（central）")]),a._v(" "),s("li",[a._v("远程（remote）")])])])]),a._v(" "),s("p",[s("strong",[a._v("本地仓库")]),a._v("：")]),a._v(" "),s("ul",[s("li",[a._v("运行 Maven 的时候，Maven 所需要的任何构件都是直接从本地仓库获取的；")]),a._v(" "),s("li",[a._v("如果本地仓库没有，它会首先尝试从远程仓库下载构件至本地仓库，然后再使用本地仓库的构件；")]),a._v(" "),s("li",[a._v("默认情况下，每个用户在自己的用户目录下都有一个路径名为 "),s("code",[a._v(".m2/respository/")]),a._v(" 的仓库目录；")]),a._v(" "),s("li",[a._v("可以在 Maven 所在根目录的 "),s("code",[a._v("\\conf")]),a._v(" 目录中的 "),s("code",[a._v("settings.xml")]),a._v(" 文件中定义另一个路径；")])]),a._v(" "),s("p",[s("strong",[a._v("中央仓库")]),a._v("：")]),a._v(" "),s("ul",[s("li",[a._v("Maven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库；")]),a._v(" "),s("li",[a._v("一般来说，简单的 Java 项目依赖的构件都可以在这里下载到；")]),a._v(" "),s("li",[a._v("要浏览中央仓库的内容，maven 社区提供了一个 URL：http://search.maven.org/#browse；")])]),a._v(" "),s("p",[s("strong",[a._v("远程仓库")]),a._v("：")]),a._v(" "),s("ul",[s("li",[a._v("远程仓库是开发人员自己定制仓库，包含了所需要的代码库或者其他工程中用到的 jar 文件；")]),a._v(" "),s("li",[a._v("下面的 pom.xml，Maven 将从远程仓库中下载该 pom.xml 中声明的所依赖的（在中央仓库中获取不到的）文件")]),a._v(" "),s("li",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-13-52-29.png",alt:"2020-2-24-13-52-29.png"}})])]),a._v(" "),s("p",[s("strong",[a._v("依赖搜索顺序")]),a._v("：\n当我们执行 Maven 构建命令时，Maven 开始按照以下顺序查找依赖的库：")]),a._v(" "),s("ul",[s("li",[a._v("步骤 1：在"),s("strong",[a._v("本地仓库")]),a._v("中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。")]),a._v(" "),s("li",[a._v("步骤 2：在"),s("strong",[a._v("中央仓库")]),a._v("中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中以备将来引用。")]),a._v(" "),s("li",[a._v("步骤 3：如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。")]),a._v(" "),s("li",[a._v("步骤 4：在一个或多个"),s("strong",[a._v("远程仓库")]),a._v("中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。")])]),a._v(" "),s("h3",{attrs:{id:"工程结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工程结构"}},[a._v("#")]),a._v(" 工程结构")]),a._v(" "),s("p",[a._v("Maven 的标准工程结构如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-13-55-36.png",alt:"2020-2-24-13-55-36.png"}})]),a._v(" "),s("ul",[s("li",[a._v("如果是 Web 项目，"),s("code",[a._v("src/main/")]),a._v(" 目录下，还应该有 "),s("code",[a._v("webapp")]),a._v(" 目录。用来存放 web 项目资源；")])]),a._v(" "),s("h3",{attrs:{id:"项目骨架-archetype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目骨架-archetype"}},[a._v("#")]),a._v(" 项目骨架 Archetype")]),a._v(" "),s("ul",[s("li",[a._v("骨架是一个 Maven 项目的基础模板；")]),a._v(" "),s("li",[a._v("利用这个模板我们就可快速的建立一个新的该类型项目；")]),a._v(" "),s("li",[a._v("Maven 所提供的 archetype 功能都是由插件 Maven Archetype Plugin 完成的；")]),a._v(" "),s("li",[a._v("主要命令：\n"),s("ul",[s("li",[s("code",[a._v("archetype:generate")]),a._v(" 从项目骨架创建一个 maven 项目；")]),a._v(" "),s("li",[s("code",[a._v("archetype:create-from-project")]),a._v(" 根据一个项目创建项目骨架；")])])])]),a._v(" "),s("h3",{attrs:{id:"生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[a._v("#")]),a._v(" 生命周期")]),a._v(" "),s("ul",[s("li",[a._v("Maven 生命周期就是为了对所有的构建过程进行抽象和统一；")]),a._v(" "),s("li",[a._v("Maven 有三套相互独立的生命周期：\n"),s("ul",[s("li",[s("strong",[a._v("Clean Lifecycle")]),a._v(" 在进行真正的构建之前进行一些清理工作；")]),a._v(" "),s("li",[s("strong",[a._v("Default Lifecycle")]),a._v(" 构建的核心部分，编译，测试，打包，部署等等；")]),a._v(" "),s("li",[s("strong",[a._v("Site Lifecycle")]),a._v(" 生成项目报告，站点，发布站点；")])])]),a._v(" "),s("li",[a._v("它们是相互独立的，可以分别被调用；")]),a._v(" "),s("li",[a._v("管理项目生命周期过程都是基于"),s("strong",[a._v("插件")]),a._v("完成的；")])]),a._v(" "),s("p",[a._v("下面 👇 列出了一些关键节点：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-14-8-37.png",alt:"2020-2-24-14-8-37.png"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-14-10-32.png",alt:"2020-2-24-14-10-32.png"}})]),a._v(" "),s("h2",{attrs:{id:"idea-集成-maven-插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idea-集成-maven-插件"}},[a._v("#")]),a._v(" idea 集成 Maven 插件")]),a._v(" "),s("ul",[s("li",[a._v("打开 IDEA，点开 Preference，然后设置 Maven 的路径；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-11-58-3.png",alt:"2020-2-24-11-58-3.png"}})]),a._v(" "),s("ul",[s("li",[a._v("但是这里 IDEA 已经提供了一个自带的 Maven，就可以直接用；")])]),a._v(" "),s("h4",{attrs:{id:"在-idea-中使用骨架创建-java-项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-idea-中使用骨架创建-java-项目"}},[a._v("#")]),a._v(" 在 IDEA 中使用骨架创建 Java 项目")]),a._v(" "),s("ul",[s("li",[a._v("想在 idea 中使用骨架，在创建项目时，选择 Maven；")]),a._v(" "),s("li",[a._v("然后点击 Create from archetype；")]),a._v(" "),s("li",[a._v("然后选择想要的骨架就可以了；")]),a._v(" "),s("li",[a._v("之后整个项目的结构，都会被搭建好；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-12-8-49.png",alt:"2020-2-24-12-8-49.png"}})]),a._v(" "),s("h4",{attrs:{id:"在-idea-中使用骨架创建-web-项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-idea-中使用骨架创建-web-项目"}},[a._v("#")]),a._v(" 在 IDEA 中使用骨架创建 Web 项目")]),a._v(" "),s("ul",[s("li",[a._v("选择 "),s("code",[a._v("maven-archetype-webapp")]),a._v(" 骨架；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-14-23-26.png",alt:"2020-2-24-14-23-26.png"}})]),a._v(" "),s("ul",[s("li",[a._v("然后点击 App Configuration，配置 Tomcat；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-14-24-18.png",alt:"2020-2-24-14-24-18.png"}})]),a._v(" "),s("ul",[s("li",[a._v("然后选择 Tomcat Server")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-14-20-2.png",alt:"2020-2-24-14-20-2.png"}})]),a._v(" "),s("ul",[s("li",[a._v("直接可以直接击 fix，就可以自动配置了；")]),a._v(" "),s("li",[a._v("选择 war explored；\n"),s("ul",[s("li",[a._v("war 模式这种可以称之为是发布模式，这是先打成 war 包，再发布；")]),a._v(" "),s("li",[a._v("war exploded 模式是直接把文件夹、jsp 页面 、classes 等等移到 Tomcat 部署文件夹里面，进行加载部署。因此这种方式"),s("strong",[a._v("支持热部署")]),a._v("，一般在开发的时候也是用这种方式；")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-14-22-41.png",alt:"2020-2-24-14-22-41.png"}})]),a._v(" "),s("ul",[s("li",[a._v("配置完毕，点击运行按钮，就可以了；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-14-26-45.png",alt:"2020-2-24-14-26-45.png"}})]),a._v(" "),s("h2",{attrs:{id:"maven-使用实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven-使用实例"}},[a._v("#")]),a._v(" Maven 使用实例")]),a._v(" "),s("h4",{attrs:{id:"servlet-跳转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servlet-跳转"}},[a._v("#")]),a._v(" Servlet 跳转")]),a._v(" "),s("ul",[s("li",[a._v("在刚刚创建的 WebApp 项目中的 "),s("code",[a._v("main")]),a._v(" 目录下创建一个 "),s("code",[a._v("java")]),a._v(" 目录；")]),a._v(" "),s("li",[a._v("然后再在 "),s("code",[a._v("java")]),a._v(" 目录下创建 Package "),s("code",[a._v("com.myWeb.servlet")]),a._v("；")]),a._v(" "),s("li",[a._v("之后右键新建一个 Servlet；\n"),s("ul",[s("li",[a._v("如果你发现右键之后，没有 Servlet 选项。说明 Maven 没有引入 Servlet 依赖；")]),a._v(" "),s("li",[a._v("找到 pom.xml 文件，进去后右键点击 Generate -> Dependencies；\n"),s("ul",[s("li",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-17-52-34.png",alt:"2020-2-24-17-52-34.png"}})])])]),a._v(" "),s("li",[a._v("然后就可以搜索我们想要的依赖了；\n"),s("ul",[s("li",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-17-53-31.png",alt:"2020-2-24-17-53-31.png"}})])])]),a._v(" "),s("li",[a._v("引入依赖后，问题就解决了；")])])]),a._v(" "),s("li",[a._v("新建的 Servlet 取名字 MyServlet；\n"),s("ul",[s("li",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-17-55-11.png",alt:"2020-2-24-17-55-11.png"}})])])]),a._v(" "),s("li",[a._v("然后开始编写代码；")]),a._v(" "),s("li",[a._v("注意要设置注解中的 "),s("code",[a._v("urlPatterns")]),a._v(" 参数；")]),a._v(" "),s("li",[a._v("通过 "),s("code",[a._v("request.getRequestDispatcher")]),a._v(" 方法来将 GET 请求转发给 "),s("code",[a._v("haha.jsp")]),a._v(" 文件；\n"),s("ul",[s("li",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-18-42-13.png",alt:"2020-2-24-18-42-13.png"}})])])]),a._v(" "),s("li",[a._v("haha.jsp 就随便写一下就行了；\n"),s("ul",[s("li",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-24-18-42-41.png",alt:"2020-2-24-18-42-41.png"}})])])]),a._v(" "),s("li",[a._v("运行 Tomcat，任务完成；")])])])}),[],!1,null,null,null);t.default=r.exports}}]);