(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{443:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"贪心算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),a("h2",{attrs:{id:"什么是贪心算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是贪心算法"}},[t._v("#")]),t._v(" 什么是贪心算法")]),t._v(" "),a("p",[t._v("贪心算法（greedy algorithm），又称贪婪算法，是一种在每一步选择中都采取在当前状态下最优的选择，从而希望导致结果是最优的算法。")]),t._v(" "),a("p",[t._v("换句话说，"),a("strong",[t._v("贪心算法总是做出局部最优选择，希望这样能得到全局最优解")]),t._v("。")]),t._v(" "),a("p",[t._v("💡 基本思路：")]),t._v(" "),a("ul",[a("li",[t._v("建立数学模型来描述问题；")]),t._v(" "),a("li",[t._v("把求解的问题分成若干个子问题；")]),t._v(" "),a("li",[t._v("对每一子问题求解，得到子问题的局部最优解；")]),t._v(" "),a("li",[t._v("将所有子问题的局部最优解综合起来，得到问题的最终解；")])]),t._v(" "),a("h2",{attrs:{id:"什么时候用贪心算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候用贪心算法"}},[t._v("#")]),t._v(" 什么时候用贪心算法")]),t._v(" "),a("p",[t._v("只有满足 “"),a("strong",[t._v("贪心选择性质")]),t._v("” 和 “"),a("strong",[t._v("最优子结构性质")]),t._v("” 的问题才能 用贪心算法找到最优解。")]),t._v(" "),a("h3",{attrs:{id:"贪心选择性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪心选择性质"}},[t._v("#")]),t._v(" 贪心选择性质")]),t._v(" "),a("p",[t._v("贪心选择性质指的是，可以通过做出局部最优选择，来构造全局最优解。换句话说，"),a("strong",[t._v("前面的选择不影响，也不依赖后面的选择")]),t._v("。")]),t._v(" "),a("p",[t._v("下面是一个反例：")]),t._v(" "),a("details",{staticClass:"custom-block details",attrs:{open:"open"}},[a("summary",[t._v("例子：")]),t._v(" "),a("p",[t._v("🌰 在一个有权图中，我们从顶点 S 开始，找一条到顶点 T 的最短路径（路径中边的权值和最小）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-21-16-11-22.png",alt:"2020-1-21-16-11-22.png"}})]),t._v(" "),a("p",[t._v("贪心算法的解决思路："),a("strong",[t._v("每次都选择一条跟当前顶点相连的权最小的边，直到找到顶点 T")]),t._v("。")]),t._v(" "),a("p",[t._v("按照这种思路，我们求出的最短路径是 S->A->E->T，路径长度是 1+4+4=9。")]),t._v(" "),a("p",[t._v("但是，这种贪心的选择方式，最终求的路径并不是最短路径，因为路径 S->B->D->T 才是最短路径，因为这条路径的长度是 2+2+2=6。")]),t._v(" "),a("p",[t._v("在这个问题上，"),a("strong",[t._v("贪心算法不工作的主要原因是，前面的选择，会影响后面的选择")]),t._v("。如果我们第一步从顶点 S 走到顶点 A，那接下来面对的顶点和边，跟第一步从顶点 S 走到顶点 B，是完全不同的。所以，即便我们第一步选择最优的走法，但有可能因为这一步选择，导致后面每一步的选择都很糟糕，最终也就无缘全局最优解了。")])]),t._v(" "),a("h3",{attrs:{id:"最优子结构性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最优子结构性质"}},[t._v("#")]),t._v(" 最优子结构性质")]),t._v(" "),a("p",[a("strong",[t._v("如果一个问题的最优解包含其子问题的最优解，则称此问题具有最优子结构性质")]),t._v("。")]),t._v(" "),a("details",{staticClass:"custom-block details",attrs:{open:"open"}},[a("summary",[t._v("例子：")]),t._v(" "),a("p",[t._v("🌰 举例来说，想要从 A 到 B 找一条最短路径。假设找到的路径为 A->C->D->B 最短。那么最优子结构性质说的是，如果对于路径上的任意一点，到 B 都存在一条最短路径是包含在上述 A 到 B 的最短路径里。")]),t._v(" "),a("p",[t._v("比如这里如果满足最优子结构性质应该有 C->D->B 是 C 到 B 的一条最短路径。不可能是别的路径。")]),t._v(" "),a("p",[t._v("如果说 C->H->B 才是从 C 到 B 的一条最短路径，那么这个问题就不满足最优子结构性质。")])]),t._v(" "),a("h2",{attrs:{id:"调度问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调度问题"}},[t._v("#")]),t._v(" 调度问题")]),t._v(" "),a("h2",{attrs:{id:"找硬币问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#找硬币问题"}},[t._v("#")]),t._v(" 找硬币问题")]),t._v(" "),a("p",[a("strong",[t._v("问题描述")]),t._v("：用 25 美分，10 美分，5 美分，1 美分硬币找 n 美分零钱，使硬币总数尽可能的少。")]),t._v(" "),a("p",[a("strong",[t._v("思路")]),t._v("：通过贪心算法，在每一步选择可能的最大面值硬币，使得每一步选择的硬币面值加一起不超过 n。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 找零钱的贪心算法")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value：金额；coins：储存硬币面值的数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("change")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" coins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// count 数组用来给各个面值的硬币计数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("coins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" coins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" coins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" coins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"需要"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" coins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"面值硬币"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"个；"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在使用 25 美分，10 美分，5 美分，1 美分硬币。去给 50 美分找零的情况下，代码输出如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("需要 25 面值硬币 2 个；\n需要 10 面值硬币 0 个；\n需要 5 面值硬币 0 个；\n需要 1 面值硬币 0 个；\n")])])]),a("p",[t._v("但是如果只能使用 25 美分，10 美分，1 美分硬币。去给 30 美分找零。上面的算法就会使用 1 个 25 美分，5 个 1 美分。但实际情况下，3 个 10 美分硬币才是最少的选择。")]),t._v(" "),a("p",[t._v("所以，"),a("strong",[t._v("不是所以的硬币面值组合都可以用贪心算法找到最优解")]),t._v("。具体的证明这里先不展开。")]),t._v(" "),a("h2",{attrs:{id:"霍夫曼编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#霍夫曼编码"}},[t._v("#")]),t._v(" 霍夫曼编码")]),t._v(" "),a("p",[t._v("假设我有一个包含 1000 个字符的文件，每个字符占 1 个 byte（1 byte = 8 bits）， 存储这 1000 个字符就一共需要 8000 bits，那有没有更加节省空间的存储方式呢？")]),t._v(" "),a("p",[t._v("假设我们通过统计分析发现，这 1000 个字符中只包含 6 种不同字符，假设它们分别是 a、b、c、d、e、f。而 3 个二进制位（bit）就可以表示 8 个不同的字符，所以，为了尽量减少存储空间，每个字符我们用 3 个二进制位来表示。那存储这 1000 个字符只需要 3000bits 就可以了")]),t._v(" "),a("p",[t._v("霍夫曼编码在上面思路的基础上，还会考察每个字符出现的频率，根据频率的不同，选择不同长度的编码。"),a("strong",[t._v("把出现频率比较多的字符，用稍微短一些的编码；出现频率比较少的字符，用稍微长一些的编码")]),t._v("。霍夫曼编码通过这种不等长的编码方法，来进一步增加压缩的效率。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-21-19-49-27.png",alt:"2020-1-21-19-49-27.png"}})]),t._v(" "),a("p",[t._v("但是编码不等长，在解压的时候，该如何去判断应该读取多长的编码呢？为了避免解压缩过程中的歧义，"),a("strong",[t._v("霍夫曼编码要求各个字符的编码之间，不会出现某个编码是另一个编码前缀的情况。")])]),t._v(" "),a("p",[t._v("在解压缩的时候，我们每次会读取尽可能长的可解压的二进制串。一旦发现可识别的编码，就把它截取出来进行翻译。")])])}),[],!1,null,null,null);s.default=r.exports}}]);