(window.webpackJsonp=window.webpackJsonp||[]).push([[251],{463:function(s,t,a){"use strict";a.r(t);var r=a(0),i=Object(r.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"细化迭代-1-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#细化迭代-1-基础"}},[s._v("#")]),s._v(" 细化迭代 1 - 基础")]),s._v(" "),a("h2",{attrs:{id:"迭代-1-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代-1-基础"}},[s._v("#")]),s._v(" 迭代 1 - 基础")]),s._v(" "),a("h3",{attrs:{id:"迭代-1-的需求-重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代-1-的需求-重点"}},[s._v("#")]),s._v(" 迭代 1 的需求 & 重点")]),s._v(" "),a("blockquote",[a("p",[s._v("下面 👇 给出的只是用以讲解的案例. 真实项目中, 应当以架构为核心, 先迭代最重要, 最困难, 最具风险的需求.")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-21-23-16-36.png",alt:"2020-06-21-23-16-36"}})]),s._v(" "),a("p",[s._v("上面 👆 例子, 只展示了在第一次迭代中, 对于『 "),a("strong",[s._v("处理销售")]),s._v(" 』用例要处理的需求. 除此之外, 还需要对其他大量的用例展开分析;")]),s._v(" "),a("p",[s._v('每次迭代只处理一个用例的一部分需求, 通过若干次迭代对同一个用例进行 "增量式开发"')]),s._v(" "),a("ul",[a("li",[s._v("简短的用例可以在一次迭代内完成;")])]),s._v(" "),a("h3",{attrs:{id:"过程-初始-细化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过程-初始-细化"}},[s._v("#")]),s._v(" 过程: 初始 & 细化")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("细化")]),s._v(" elaboration 』是一般项目中最初的一系列迭代. 此阶段需要, "),a("strong",[s._v("构建核心架构, 解决高风险元素, 定义大部分需求, 以及预计总体进度和资源")])]),s._v(" "),a("p",[s._v("细化阶段构建的核心架构被称为『 "),a("strong",[s._v("架构原型")]),s._v(" architectural prototype 』")]),s._v(" "),a("ul",[a("li",[s._v("这不是一个可以废弃掉, 实验性的原型. 它是最终完成的系统的一部分;")]),s._v(" "),a("li",[s._v("这个架构也可以称为『 "),a("strong",[s._v("可执行架构")]),s._v(" executable architecture 』和『 "),a("strong",[s._v("架构基线")]),s._v(" architectural baseline 』")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-21-23-36-37.png",alt:"2020-06-21-23-36-37"}})]),s._v(" "),a("p",[a("strong",[s._v("细化阶段需要创建的制品")]),s._v(":")]),s._v(" "),a("ul",[a("li",[s._v("注意这些制品不是在一次迭代中完成的, 是跨越多次迭代进行精化的;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-21-23-39-03.png",alt:"2020-06-21-23-39-03"}})]),s._v(" "),a("p",[a("strong",[s._v("细化阶段要避免的错误")]),s._v(" ❌:")]),s._v(" "),a("ul",[a("li",[s._v("如果出现了这些错误, 说明你在 UP 之上强加了瀑布思想;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-21-23-38-22.png",alt:"2020-06-21-23-38-22"}})]),s._v(" "),a("h3",{attrs:{id:"过程-计划下一个迭代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过程-计划下一个迭代"}},[s._v("#")]),s._v(" 过程: 计划下一个迭代")]),s._v(" "),a("p",[s._v('可以通过 "风险, 覆盖范围, 关键程度" 组织需求和迭代:')]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("风险")]),s._v(": 即包含技术复杂性, 也包含其他因素, 例如工作量或可用性的不确定性;")]),s._v(" "),a("li",[a("strong",[s._v("覆盖范围")]),s._v(": 早期迭代中至少要涉及系统的所有主要部分;")]),s._v(" "),a("li",[a("strong",[s._v("关键程度")]),s._v(": 客户认为具有高业务价值的功能;")])]),s._v(" "),a("p",[s._v("这些标准用来对不同迭代中的工作划分等级.")]),s._v(" "),a("ul",[a("li",[s._v("早期迭代用于实现高等级的场景;")]),s._v(" "),a("li",[s._v('某些与用例核心业务逻辑无关的高阶特性, 例如 "日志服务". 此类需求也需要划分等级;')]),s._v(" "),a("li",[s._v("在每次新的迭代中, 都需要重新划分需求的等级. 因为新的需求和新理解, 会影响等级的排列;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-21-23-46-15.png",alt:"2020-06-21-23-46-15"}})]),s._v(" "),a("h2",{attrs:{id:"领域模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#领域模型"}},[s._v("#")]),s._v(" 领域模型")]),s._v(" "),a("h3",{attrs:{id:"什么是领域模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是领域模型"}},[s._v("#")]),s._v(" 什么是领域模型")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-14-33-44.png",alt:"2020-06-22-14-33-44"}})]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("领域模型")]),s._v(" domain model 』是对现实世界事物概念上的抽象表示, 其中包含了各种概念类具有的属性, 以及它们之间的关联:")]),s._v(" "),a("ul",[a("li",[s._v("通过 UML 表示法, 领域模型被描述为一组没有定义操作的 『 "),a("strong",[s._v("类图")]),s._v(" class diagram 』")]),s._v(" "),a("li",[s._v("也被称为『 "),a("strong",[s._v("概念模型")]),s._v(" 』『 "),a("strong",[s._v("领域对象模型")]),s._v(" 』『 "),a("strong",[s._v("分析对象模型")]),s._v(" 』")]),s._v(" "),a("li",[s._v("在 UP 中, 领域模型用于抽象的解释业务领域中涉及到的各种事物;")]),s._v(" "),a("li",[s._v("通过领域模型, 团队可以在具体开发之前, 对整个项目的涉及的关键概念, 核心业务有一个整体且简化的了解. 并且领域模型可以一直作为参考在项目的各个阶段被使用, 便于团队间沟通和理解;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-15-10-03.png",alt:"2020-06-22-15-10-03"}})]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("概念类")]),s._v(" conceptual class 』是指对现实世界事物抽象出来的类.")]),s._v(" "),a("p",[s._v("定义一个概念类时, 可以从三个角度出发:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("符号")]),s._v(": 表示概念类的词语或图像;")]),s._v(" "),a("li",[a("strong",[s._v("内涵")]),s._v(": 概念类的定义;")]),s._v(" "),a("li",[a("strong",[s._v("外延")]),s._v(": 概念类所使用的的一组示例;")])]),s._v(" "),a("p",[s._v("🌰 例如, 在考虑购买交易事件的概念类时:")]),s._v(" "),a("ul",[a("li",[s._v("使用符号 "),a("code",[s._v("Sale")]),s._v(" 对其命名;")]),s._v(" "),a("li",[s._v('Sale 的内涵是 "表示购买交易的事件, 并且具有 购买日期 和 具体时间 属性"')]),s._v(" "),a("li",[s._v('Sale 的外延是 "所有销售的购买交易实例集合";')])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-15-14-20.png",alt:"2020-06-22-15-14-20"}})]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("领域模型是对现实世界事物的抽象表示, ❌ "),a("strong",[s._v("不是对软件对象的表示")]),s._v(" ( 例如, Java 类 )")]),s._v(" "),a("ul",[a("li",[s._v("领域模型中不应该包含『 软件制品 』或包含任何指责与方法的『 软件类 』")]),s._v(" "),a("li",[s._v("除非要针对现实世界中的软件, 进行概念上的抽象;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-14-58-32.png",alt:"2020-06-22-14-58-32"}})]),s._v(" "),a("p",[s._v("在软件开发中, 也有人把软件中的『 "),a("strong",[s._v("领域层")]),s._v(" domain layer 』 称为『 领域对象 』")]),s._v(" "),a("ul",[a("li",[s._v("『 领域层 』中的类包含业务逻辑, 例如, "),a("code",[s._v("Board")]),s._v(" 类具有 "),a("code",[s._v("gerSquare")]),s._v(" 方法.")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-15-03-55.png",alt:"2020-06-22-15-03-55"}})]),s._v(" "),a("p",[a("strong",[s._v("对于术语的混淆, 会造成团队之中理解的不一致")]),s._v(". 在本书中:")]),s._v(" "),a("ul",[a("li",[s._v("『 领域模型 』指对现实世界事物的抽象;")]),s._v(" "),a("li",[s._v("『 领域层 』指对具有业务逻辑的软件对象的抽象;")])]),s._v(" "),a("p",[s._v("在开发领域层的软件类时, "),a("strong",[s._v('"软件类的名称" 应该源于 "领域模型中的名称"')]),s._v(":")]),s._v(" "),a("ul",[a("li",[s._v("这样可以"),a("strong",[s._v("减小")]),s._v(' "领域模型" 与 "软件模型" 之间的 "'),a("strong",[s._v("表示差异")]),s._v('";')]),s._v(" "),a("li",[s._v("以便于开发团队可以更简便地理解软件;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-20-28-26.png",alt:"2020-06-22-20-28-26"}})]),s._v(" "),a("h3",{attrs:{id:"创建领域模型-寻找概念类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建领域模型-寻找概念类"}},[s._v("#")]),s._v(" 创建领域模型 & 寻找概念类")]),s._v(" "),a("h4",{attrs:{id:"如何创建领域模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何创建领域模型"}},[s._v("#")]),s._v(" 如何创建领域模型")]),s._v(" "),a("p",[s._v("以当前迭代中所有设计的需求为边界:")]),s._v(" "),a("ul",[a("li",[s._v("先寻找概念类;")]),s._v(" "),a("li",[s._v("再将其绘制为 UML 类图中的类;")]),s._v(" "),a("li",[s._v("最后添加类的属性, 以及类与类之间的关联")])]),s._v(" "),a("h4",{attrs:{id:"如何找到概念类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何找到概念类"}},[s._v("#")]),s._v(" 如何找到概念类")]),s._v(" "),a("p",[a("strong",[s._v("方法 1: 重用现有的模型")]),s._v(": 这是最简单的方法, 很多领域都存在已发布的领域模型. 根据自己的项目需求, 稍加修改就可以.")]),s._v(" "),a("p",[a("strong",[s._v("方法 2: 使用分类列表")]),s._v(": 可以通过制作概念类候选列表来开始创建领域模型;")]),s._v(" "),a("ul",[a("li",[s._v("根据需求去列出项目会涉及到的概念类的类别列表;")]),s._v(" "),a("li",[s._v("然后在每个类别下再列出具体的概念类;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-20-41-00.png",alt:"2020-06-22-20-41-00"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-20-41-21.png",alt:"2020-06-22-20-41-21"}})]),s._v(" "),a("p",[a("strong",[s._v("方法 3: 识别名词短语")]),s._v(": 从需求的文本性描述中, 识别出名词和短语, 将其作为候选的概念类或属性;")]),s._v(" "),a("ul",[a("li",[s._v("但是要注意, 自然语言并不精确, 不用的名词短语可能指的是同一个概念类或属性, 还可能有歧义. 使用时要谨慎;")]),s._v(" "),a("li",[s._v('建议与 "分类列表" 一起使用;')])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-20-45-29.png",alt:"2020-06-22-20-45-29"}})]),s._v(" "),a("h4",{attrs:{id:"敏捷建模"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#敏捷建模"}},[s._v("#")]),s._v(" 敏捷建模")]),s._v(" "),a("p",[s._v("在领域建模过程中, 通常会遗漏掉一些概念类, 在后面进行草图设计或编程时可能会发现这些类.")]),s._v(" "),a("p",[s._v("但是如果领域模型采用的是『 "),a("strong",[s._v("敏捷建模")]),s._v(" 』的方法:")]),s._v(" "),a("ul",[a("li",[s._v("那么就没有必要再将遗漏掉的类更新到领域模型上.")]),s._v(" "),a("li",[s._v("因为领域模型的目的是为了让团队能快速理解和沟通项目的关键概念. 并不需要完美;")]),s._v(" "),a("li",[s._v("如果没有十足的理由, 就没有必要更新最初的领域模型;")])]),s._v(" "),a("h4",{attrs:{id:"不要把概念类和属性弄混"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不要把概念类和属性弄混"}},[s._v("#")]),s._v(" 不要把概念类和属性弄混")]),s._v(" "),a("p",[s._v('不要把应该是 "概念类" 的事物表示为 "属性".')]),s._v(" "),a("p",[s._v('如果我们认为某个东西不能用字面量的值 ( 数字, 文本 ) 来表示, 那么它应该是 "概念类". 反之就是 "属性".')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-21-27-17.png",alt:"2020-06-22-21-27-17"}})]),s._v(" "),a("h3",{attrs:{id:"关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联"}},[s._v("#")]),s._v(" 关联")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("关联")]),s._v(" association 』是类 ( 更准确的说, 是这些类的实例 ) 之间的关系.")]),s._v(" "),a("ul",[a("li",[s._v("关联被表示为类之间的连线;")]),s._v(" "),a("li",[s._v('中间放上首字母大写的 "关联名称";\n'),a("ul",[a("li",[s._v('使用动词短语, 不要使用不会增强我们对领域理解的词语 ( 例如. "使用", "拥有", etc. )')])])]),s._v(" "),a("li",[s._v('关联的末端可以包含 "多重性" 表达式, 用以指明类的实例之间的数量关系;')])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-22-22-57-36.png",alt:"2020-06-22-22-57-36"}})]),s._v(" "),a("h4",{attrs:{id:"多重性表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多重性表达式"}},[s._v("#")]),s._v(" 多重性表达式")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("多重性")]),s._v(" multiplicity 』定义了类 A 有多少个实例可以和类 B 的一个实例关联.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-09-40-22.png",alt:"2020-06-23-09-40-22"}})]),s._v(" "),a("h4",{attrs:{id:"🌰-示例-nextgen-pos-的领域模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌰-示例-nextgen-pos-的领域模型"}},[s._v("#")]),s._v(" 🌰 示例: NextGen POS 的领域模型")]),s._v(" "),a("p",[s._v("下图 👇 展示了 POS 系统基于本次迭代的部分领域模型:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-09-43-25.png",alt:"2020-06-23-09-43-25"}})]),s._v(" "),a("h3",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[s._v("#")]),s._v(" 属性")]),s._v(" "),a("p",[s._v('当 "需求" 中需要概念类的实例记住一些信息时, 就需要引入『 '),a("strong",[s._v("属性")]),s._v(" 』")]),s._v(" "),a("p",[s._v('🌰 例如, 在 "处理销售" 用例中, 票据通常含有 "日期", "时间" 信息. 这些信息都应该作为票据概念类的属性;')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-09-48-19.png",alt:"2020-06-23-09-48-19"}})]),s._v(" "),a("ul",[a("li",[s._v('通常把属性可见性假设为 "私有的 ( '),a("code",[s._v("-")]),s._v(' )" 所以一般不会显式的写出来;')]),s._v(" "),a("li",[a("code",[s._v("Sale")]),s._v(" 中的 "),a("code",[s._v("total")]),s._v(" 属性可以从 "),a("code",[s._v("SalesLineItems")]),s._v(" 中的信息计算出来, 所以 "),a("code",[s._v("total")]),s._v(" 是一个『 "),a("strong",[s._v("导出属性")]),s._v(" 』在名字前加 "),a("code",[s._v("/")]),s._v(" 符号;")])]),s._v(" "),a("h4",{attrs:{id:"属性的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的类型"}},[s._v("#")]),s._v(" 属性的类型")]),s._v(" "),a("p",[s._v("领域模型属性的类型应该是『 "),a("strong",[s._v("基本类型")]),s._v(" 』例如, Boolean, Number, Character, String, Date 之类的;")]),s._v(" "),a("p",[s._v("如果想表达一个类中使用了另一个类, 应该使用『 "),a("strong",[s._v("关联")]),s._v(" 』而不是把概念类作为属性.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-09-59-45.png",alt:"2020-06-23-09-59-45"}})]),s._v(" "),a("p",[s._v('软件的 "设计模型" 中, 一个类的属性的数据类型可以是另一个类.')]),s._v(" "),a("p",[s._v("但是, 即使属性的类型是基本类型, 但是它作为『 "),a("strong",[s._v("外键")]),s._v(" 』来将两个类关联起来, 这样也是不行的. "),a("strong",[s._v('在 "领域模型" 中表示类与类之间关系只能用 "关联" 而不是 "属性"')]),s._v(".")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-10-15-49.png",alt:"2020-06-23-10-15-49"}})]),s._v(" "),a("h4",{attrs:{id:"定义新的数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义新的数据类型"}},[s._v("#")]),s._v(" 定义新的数据类型")]),s._v(" "),a("p",[s._v("在以下 👇 的这些情况中, 数据值不仅仅是简单的字符串或数字, 所以可以创建新的数据类型:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-10-04-30.png",alt:"2020-06-23-10-04-30"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-10-11-10.png",alt:"2020-06-23-10-11-10"}})]),s._v(" "),a("p",[s._v('是否把新创建的数据类型作为一个 "概念类" 表现在领域模型中, 取决于你想让领域模型表达什么, 具体看情况而定.')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-10-06-54.png",alt:"2020-06-23-10-06-54"}})]),s._v(" "),a("h4",{attrs:{id:"🌰-示例-nextgen-pos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌰-示例-nextgen-pos"}},[s._v("#")]),s._v(" 🌰 示例: NextGen POS")]),s._v(" "),a("p",[s._v('下图 👇 中的属性反映本次迭代的 "处理销售" 用例的 "现金支付场景" 中的信息需求:')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-10-09-58.png",alt:"2020-06-23-10-09-58"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-10-10-07.png",alt:"2020-06-23-10-10-07"}})]),s._v(" "),a("h2",{attrs:{id:"系统顺序图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统顺序图"}},[s._v("#")]),s._v(" 系统顺序图")]),s._v(" "),a("p",[s._v('通过用例中描述的一系列特定事件, 我们可以绘制 "系统顺序图". 而它是 "操作契约" 和 "软件对象设计" 的重要输入.')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-10-36-28.png",alt:"2020-06-23-10-36-28"}})]),s._v(" "),a("h3",{attrs:{id:"什么是系统顺序图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是系统顺序图"}},[s._v("#")]),s._v(" 什么是系统顺序图")]),s._v(" "),a("p",[s._v("用例描述了外部参与者如何与我们希望创建的系统进行交互的. 交互中, 参与者发起了『 "),a("strong",[s._v("系统事件")]),s._v(" system event 』, 系统会通过一些『 "),a("strong",[s._v("系统操作")]),s._v(" system operation 』来对这些事件进行处理.")]),s._v(" "),a("ul",[a("li",[s._v("通过 "),a("strong",[s._v("UML 的顺序图")]),s._v("作为表示法;")]),s._v(" "),a("li",[s._v("系统顺序图中, 将系统视为"),a("strong",[s._v("黑盒")]),s._v(', 它只表现出系统可以通过 "系统操作" 处理参与者发起的 "系统事件", 但是不说如何处理的;')])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-10-52-00.png",alt:"2020-06-23-10-52-00"}})]),s._v(" "),a("h4",{attrs:{id:"系统事件的命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统事件的命名"}},[s._v("#")]),s._v(" 系统事件的命名")]),s._v(" "),a("ul",[a("li",[s._v('系统事件的名称应该表达 "'),a("strong",[s._v("操作的意图")]),s._v('", 而不是具体的实现;\n'),a("ul",[a("li",[a("code",[s._v("enterItem(itemId)")]),s._v(" 要好于 "),a("code",[s._v("scan (itemId)")]),s._v(", 因为这个操作的目的是把商品的 ID 输入到系统中, 而具体使用什么设备 ( 扫描仪, 键盘, 语音输入 ... ) 我是不管的;")])])]),s._v(" "),a("li",[s._v("系统事件的名称一般"),a("strong",[s._v('以 "动词" 开始')]),s._v(":\n"),a("ul",[a("li",[s._v("🌰 增加..., 输入..., 产生..., 请求..., etc.")])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-10-45-22.png",alt:"2020-06-23-10-45-22"}})]),s._v(" "),a("h3",{attrs:{id:"系统顺序图和用例的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统顺序图和用例的关系"}},[s._v("#")]),s._v(" 系统顺序图和用例的关系")]),s._v(" "),a("p",[s._v("系统顺序图 SSD 展示的是用例中一个场景的系统事件, 因此它是从对用例的观察中产生的;")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-10-40-28.png",alt:"2020-06-23-10-40-28"}})]),s._v(" "),a("h2",{attrs:{id:"操作契约"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作契约"}},[s._v("#")]),s._v(" 操作契约")]),s._v(" "),a("h3",{attrs:{id:"什么是操作契约"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是操作契约"}},[s._v("#")]),s._v(" 什么是操作契约")]),s._v(" "),a("p",[s._v('系统操作是作为黑盒的系统在其公共接口中提供的操作. 参与者触发 "系统事件", 然后通过调用系统中对应的 "系统操作" 来处理这个事件;')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-14-03-35.png",alt:"2020-06-23-14-03-35"}})]),s._v(" "),a("p",[s._v("有时候我们需要对系统行为进行更为详细和精确的描述.")]),s._v(" "),a("p",[s._v('操作契约使用 "前置条件" 和 "后置条件" 的形式, 描述了系统操作被调用前后, 领域模型里对象的详细状态变化.')]),s._v(" "),a("p",[s._v("在编写完了 SSD 后, 如果觉得系统操作太复杂, 其执行后的结果不明显, 或者在用例中描述的不清楚, 则可以为其构造契约.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-14-01-33.png",alt:"2020-06-23-14-01-33"}})]),s._v(" "),a("h3",{attrs:{id:"后置条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后置条件"}},[s._v("#")]),s._v(" 后置条件")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-14-10-45.png",alt:"2020-06-23-14-10-45"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-14-11-20.png",alt:"2020-06-23-14-11-20"}})]),s._v(" "),a("p",[s._v('记住, 前置条件和后置条件描述的是领域模型中的对象的状态, 受系统操作所引起的状态变化的 "'),a("strong",[s._v("观察结果")]),s._v('".')]),s._v(" "),a("p",[s._v("所有, 在编写上应该使用描述状态的语句, 而不是指令式的语句:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-14-18-26.png",alt:"2020-06-23-14-18-26"}})]),s._v(" "),a("h3",{attrs:{id:"🌰-示例-nextgen-pos-契约"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌰-示例-nextgen-pos-契约"}},[s._v("#")]),s._v(" 🌰 示例: NextGen POS 契约")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-14-20-04.png",alt:"2020-06-23-14-20-04"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-23-14-19-48.png",alt:"2020-06-23-14-19-48"}})]),s._v(" "),a("h2",{attrs:{id:"逻辑架构-uml-包图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑架构-uml-包图"}},[s._v("#")]),s._v(" 逻辑架构 & UML 包图")]),s._v(" "),a("p",[s._v('下面我们由面向 "分析" 的工作过渡到 "软件设计" 工作.')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-19-30-51.png",alt:"2020-06-25-19-30-51"}})]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("逻辑架构")]),s._v(" Logical Architecture, LA 』是软件类的宏观组织结构:")]),s._v(" "),a("ul",[a("li",[s._v("它将软件类组织为『 "),a("strong",[s._v("包")]),s._v(" 』也可以称为『 命名空间 』")]),s._v(" "),a("li",[s._v("称为逻辑架构的原因是, 它是与具体实现无关的设计;")])]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("层")]),s._v(" layer 』是对类, 包或子系统的一个粗粒度的分组.")]),s._v(" "),a("ul",[a("li",[s._v("较高层可以调用较低层的服务;\n"),a("ul",[a("li",[a("strong",[s._v("严格的分层架构")]),s._v("中, 层只能调用其相邻的下层服务;\n"),a("ul",[a("li",[s._v("🌰 网络协议栈")])])]),s._v(" "),a("li",[a("strong",[s._v("宽松的分层架构")]),s._v("中, 高层可以跨层调用低层的服务;\n"),a("ul",[a("li",[s._v("🌰 Web 应用, UI 层既可以调用相邻的应用逻辑层, 也可以调用更低等的一些系统服务;")])])])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-20-35-08.png",alt:"2020-06-25-20-35-08"}})]),s._v(" "),a("h3",{attrs:{id:"uml-包图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-包图"}},[s._v("#")]),s._v(" UML 包图")]),s._v(" "),a("p",[s._v('UML 包图用于描述系统的逻辑架构中的 "层, 子系统, 包"')]),s._v(" "),a("ul",[a("li",[s._v("包内部显示了其成员, 在左上的标签中标识包名, 也可以在包体内部标识包名;")]),s._v(" "),a("li",[s._v("包之间的依赖关系用『 "),a("strong",[s._v("依赖线")]),s._v(" 』来表示, 其实带箭头的虚线, 箭头指向被依赖的包;")]),s._v(" "),a("li",[s._v("包代表命名空间, 包含在包中的成员, 可以用『 "),a("strong",[s._v("权限的名称去表示")]),s._v(" 』\n"),a("ul",[a("li",[s._v("🌰 "),a("code",[s._v("java::util::Date")])])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-20-39-49.png",alt:"2020-06-25-20-39-49"}})]),s._v(" "),a("h3",{attrs:{id:"使用层进行设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用层进行设计"}},[s._v("#")]),s._v(" 使用层进行设计")]),s._v(" "),a("p",[s._v("层的本质思想就是 "),a("strong",[s._v("将系统的大型逻辑结构组织成为独立的, 职责相关的离散层, 具有清晰, 内聚的关注分离")])]),s._v(" "),a("ul",[a("li",[s._v("较低层提供较低级一般性的服务, 较高层提供与应用相关的服务;")]),s._v(" "),a("li",[s._v("较高层依赖与较低层, 而不是反过来;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-20-49-06.png",alt:"2020-06-25-20-49-06"}})]),s._v(" "),a("p",[a("strong",[s._v("职责内聚, 关系分离")]),s._v(": 同一层的对象在职责上是紧密关联的. 不同层的对象做不同的事情.")]),s._v(" "),a("ul",[a("li",[s._v('🌰 "UI 层" 就只关注 UI 的事情, 比如捕获鼠标键盘触发的事件. 具体的业务逻辑交给更低的 "领域层" 对象, 比如计算销售总金额;')])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-20-52-01.png",alt:"2020-06-25-20-52-01"}})]),s._v(" "),a("h4",{attrs:{id:"层-分区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#层-分区"}},[s._v("#")]),s._v(" 层 & 分区")]),s._v(" "),a("p",[s._v("架构中的『 "),a("strong",[s._v("层")]),s._v(" layer 』是对系统在垂直放上的划分, 而『 "),a("strong",[s._v("分区")]),s._v(" partition 』是对层在水平方向上的划分:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-20-54-48.png",alt:"2020-06-25-20-54-48"}})]),s._v(" "),a("h4",{attrs:{id:"领域模型-领域层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#领域模型-领域层"}},[s._v("#")]),s._v(" 领域模型 & 领域层")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-20-55-46.png",alt:"2020-06-25-20-55-46"}})]),s._v(" "),a("p",[s._v("领域层从领域模型之间获得灵感来创建. 领域层中包含的『 领域对象 domain object 』是对现实事物的抽象, 它具有和现实事物相类似的属性和行为:")]),s._v(" "),a("ul",[a("li",[s._v("🌰 真实世界的 POS 机具有销售和支付的功能, 在软件中, 我们创建 Sale 和 Payment 类也具有类似的功能;")]),s._v(" "),a("li",[s._v("领域层在系统架构中是处理业务逻辑的层;")])]),s._v(" "),a("h4",{attrs:{id:"不要把外部资源表示为最底层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不要把外部资源表示为最底层"}},[s._v("#")]),s._v(" 不要把外部资源表示为最底层")]),s._v(" "),a("p",[s._v('对于系统中依赖的外部资源和服务, 例如数据库. 我们不要把它单独看作一层, 而是看作 "领域层" 的一部分 ( 子领域 )')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-20-59-30.png",alt:"2020-06-25-20-59-30"}})]),s._v(" "),a("h3",{attrs:{id:"模型-视图分离原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模型-视图分离原则"}},[s._v("#")]),s._v(" 模型 - 视图分离原则")]),s._v(" "),a("p",[s._v("这里『 "),a("strong",[s._v("模型")]),s._v(' 』指的就是 "领域层",『 '),a("strong",[s._v("视图")]),s._v(' 』指的是 "UI 层".')]),s._v(" "),a("p",[s._v("模型和视图之间不直接互相调用, 而是需要通过一套统一的接口进行交互. 软件实现时, 需要提供接口的实现类.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-01-46.png",alt:"2020-06-25-21-01-46"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-04-33.png",alt:"2020-06-25-21-04-33"}})]),s._v(" "),a("h3",{attrs:{id:"ssd-操作系统和层之间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssd-操作系统和层之间的关系"}},[s._v("#")]),s._v(" SSD, 操作系统和层之间的关系")]),s._v(" "),a("p",[s._v("系统活动图 SSD 隐藏了特定 UI 对象, 描绘的是外部参与者对于系统的调用. 但是它真正描述的是, UI 层发送到领域层的消息;")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-08-10.png",alt:"2020-06-25-21-08-10"}})]),s._v(" "),a("h2",{attrs:{id:"迈向对象设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迈向对象设计"}},[s._v("#")]),s._v(" 迈向对象设计")]),s._v(" "),a("p",[s._v("对象模型由两种类型:")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("动态模型")]),s._v(": 用于设计逻辑, 行为, 方法体. 用 UML 交互图表达;")]),s._v(" "),a("li",[a("strong",[s._v("静态模型")]),s._v(": 用于设计包, 类名, 属性, 和方法签名. 用 UML 类图表达;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-16-15.png",alt:"2020-06-25-21-16-15"}})]),s._v(" "),a("p",[s._v('"动态模型" 要优先与制作 "静态模型". 因为具体系统需要哪些对象, 对象具备哪些方法, 在绘制动态模型时才能准确的落实;')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-49-19.png",alt:"2020-06-25-21-49-19"}})]),s._v(" "),a("h2",{attrs:{id:"uml-交互图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-交互图"}},[s._v("#")]),s._v(" UML 交互图")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("UML 交互图")]),s._v(' interaction diagram 』用以描述对象间通 "消息" 的交互. 这里主要介绍『 '),a("strong",[s._v("UML 顺序图")]),s._v(" 』")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-20-21.png",alt:"2020-06-25-21-20-21"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-21-11.png",alt:"2020-06-25-21-21-11"}})]),s._v(" "),a("h3",{attrs:{id:"uml-顺序图的基本表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-顺序图的基本表示法"}},[s._v("#")]),s._v(" UML 顺序图的基本表示法")]),s._v(" "),a("p",[s._v("用『 "),a("strong",[s._v("生命线框图")]),s._v(" lifeline 』来表示参与者, 在软件系统中表示为类的实例.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-22-38.png",alt:"2020-06-25-21-22-38"}})]),s._v(" "),a("p",[s._v("用『 "),a("strong",[s._v("消息表达式")]),s._v(" 』来表示对象间传递的消息, 语法如下:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-23-28.png",alt:"2020-06-25-21-23-28"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-23-46.png",alt:"2020-06-25-21-23-46"}})]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("单例对象")]),s._v(" Signleton 』在生命线框图中在右上角表示一个 "),a("code",[s._v("1")]),s._v(":")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-24-50.png",alt:"2020-06-25-21-24-50"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-26-15.png",alt:"2020-06-25-21-26-15"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-28-28.png",alt:"2020-06-25-21-28-28"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-28-35.png",alt:"2020-06-25-21-28-35"}})]),s._v(" "),a("p",[a("strong",[s._v("实例的创建")]),s._v(': UML 顺序图中用 "'),a("strong",[s._v("虚线实心箭头")]),s._v('" 来表示实例的创建.')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-30-08.png",alt:"2020-06-25-21-30-08"}})]),s._v(" "),a("p",[a("strong",[s._v("实例的销毁")]),s._v(":")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-30-27.png",alt:"2020-06-25-21-30-27"}})]),s._v(" "),a("p",[s._v("使用『 "),a("strong",[s._v("图框")]),s._v(" frame 』来表示条件判断, 循环等操作:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-31-55.png",alt:"2020-06-25-21-31-55"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-32-16.png",alt:"2020-06-25-21-32-16"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-32-09.png",alt:"2020-06-25-21-32-09"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-32-30.png",alt:"2020-06-25-21-32-30"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-33-05.png",alt:"2020-06-25-21-33-05"}})]),s._v(" "),a("p",[s._v("上面 👆 这个图可能展现的是下面的代码:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-35-08.png",alt:"2020-06-25-21-35-08"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-35-24.png",alt:"2020-06-25-21-35-24"}})]),s._v(" "),a("p",[a("strong",[s._v("关联交互图")]),s._v(": 交互图之间是可以互相关联的. 可以使用『 "),a("strong",[s._v("图框")]),s._v(" 』来创建关联:")]),s._v(" "),a("ul",[a("li",[s._v("将整个交互图放入图框之中, 并加上交互图的名字;")]),s._v(" "),a("li",[s._v("然后把标记为 "),a("code",[s._v("ref")]),s._v(" 的图框中放入想要引用的交互图的名字, 就可以作为引用在另一个交互图中使用了;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-35-41.png",alt:"2020-06-25-21-35-41"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-38-51.png",alt:"2020-06-25-21-38-51"}})]),s._v(" "),a("p",[a("strong",[s._v("异步调用")]),s._v(': 用 "刺形箭头" 表示异步调用;')]),s._v(" "),a("ul",[a("li",[s._v("『 主动对象 active object 』: 指的是在自己的执行线程中运行或控制自己的执行线程的实例. 用生命线框图两侧加双竖线来表示;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-41-47.png",alt:"2020-06-25-21-41-47"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-42-08.png",alt:"2020-06-25-21-42-08"}})]),s._v(" "),a("h2",{attrs:{id:"uml-类图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-类图"}},[s._v("#")]),s._v(" UML 类图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-43-57.png",alt:"2020-06-25-21-43-57"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-48-12.png",alt:"2020-06-25-21-48-12"}})]),s._v(" "),a("ul",[a("li",[s._v("属性的 getter 和 setter 一般不写, 默认存在.")])]),s._v(" "),a("h3",{attrs:{id:"领域模型-设计类图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#领域模型-设计类图"}},[s._v("#")]),s._v(" 领域模型 & 设计类图")]),s._v(" "),a("p",[s._v('它们都用 UML 类图来表示, 但是 "领域模型" 表示的是对现实事物概念性的抽象, 而 "设计类图" 表示的是软件中要创建的类的抽象;')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-25-21-46-10.png",alt:"2020-06-25-21-46-10"}})]),s._v(" "),a("h3",{attrs:{id:"uml-类图中常用表示方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-类图中常用表示方法"}},[s._v("#")]),s._v(" UML 类图中常用表示方法")]),s._v(" "),a("h4",{attrs:{id:"注解符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解符号"}},[s._v("#")]),s._v(" 注解符号")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("注解符号")]),s._v(" note symbol 』显示为褶角矩形, 使用虚线连接到要注解的元素上. 可以表示很多事物:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-09-36-17.png",alt:"2020-06-26-09-36-17"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-09-37-44.png",alt:"2020-06-26-09-37-44"}})]),s._v(" "),a("h4",{attrs:{id:"关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[s._v("#")]),s._v(" 关键字")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("关键字")]),s._v(" keyword 』是对模型元素分类的文本修饰.")]),s._v(" "),a("p",[s._v("一般使用 "),a("code",[s._v("<< >>")]),s._v(" 符号表示, 有的也用 "),a("code",[s._v("{ }")]),s._v(" 表示.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-09-41-15.png",alt:"2020-06-26-09-41-15"}})]),s._v(" "),a("h4",{attrs:{id:"约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约束"}},[s._v("#")]),s._v(" 约束")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("约束")]),s._v(" 』是对 UML 元素的限制或条件, 用放在 "),a("code",[s._v("{ }")]),s._v(" 之中的文本来表示.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-09-44-57.png",alt:"2020-06-26-09-44-57"}})]),s._v(" "),a("h4",{attrs:{id:"泛化-继承-抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛化-继承-抽象类"}},[s._v("#")]),s._v(" 泛化 ( 继承, 抽象类 )")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("泛化")]),s._v(' generalization 』用一条从子类到超类的 "实线空心箭头" 表示.')]),s._v(" "),a("p",[s._v('一般在软件设计中, "继承关系" 和 "抽象类 & 实现类" 呈现泛化关系.')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-09-52-33.png",alt:"2020-06-26-09-52-33"}})]),s._v(" "),a("h4",{attrs:{id:"依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖"}},[s._v("#")]),s._v(" 依赖")]),s._v(" "),a("p",[s._v("对象之间的『 "),a("strong",[s._v("依赖")]),s._v(' dependency 』关系可以用 "虚线箭头" 表示.')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-09-55-53.png",alt:"2020-06-26-09-55-53"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-09-56-21.png",alt:"2020-06-26-09-56-21"}})]),s._v(" "),a("h4",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),a("p",[s._v("UML 提供多种方式表示接口.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-09-48-44.png",alt:"2020-06-26-09-48-44"}})]),s._v(" "),a("h4",{attrs:{id:"组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合"}},[s._v("#")]),s._v(" 组合")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("组合")]),s._v(" composition 』描述了一种整体与部分的聚合关系.")]),s._v(" "),a("ul",[a("li",[s._v("部分实例不能单独存在, 必须属于一个组成实例;")]),s._v(" "),a("li",[s._v("组成实例需要负责创建 / 删除其部分实例;")]),s._v(" "),a("li",[s._v('🌰 "手" 与 "手指" 的关系;')])]),s._v(" "),a("p",[s._v('使用 "实线实心菱形箭头" 来表示组合, 箭头指向组成类.')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-09-59-46.png",alt:"2020-06-26-09-59-46"}})]),s._v(" "),a("h4",{attrs:{id:"限定关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限定关联"}},[s._v("#")]),s._v(" 限定关联")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("限定关联")]),s._v(" qualified association 』具有『 "),a("strong",[s._v("限定符")]),s._v(" qualifier 』用于从一个规模较大的对象集合中, 依据限定符找到一个或多个匹配的对象.")]),s._v(" "),a("ul",[a("li",[s._v("🌰 在 HashMap 中找到指定键配置的值;")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-10-02-23.png",alt:"2020-06-26-10-02-23"}})]),s._v(" "),a("h4",{attrs:{id:"关联类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联类"}},[s._v("#")]),s._v(" 关联类")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("关联类")]),s._v(' association class 』允许将关联本身作为类. 从关联到关联类用 "虚线" 表示.')]),s._v(" "),a("ul",[a("li",[s._v('"Company" 与 "Person" 的关联关系可以表示为一个 "Employment" 雇佣关系类')])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-10-04-54.png",alt:"2020-06-26-10-04-54"}})]),s._v(" "),a("h4",{attrs:{id:"模板类-泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板类-泛型"}},[s._v("#")]),s._v(" 模板类 ( 泛型 )")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-10-08-01.png",alt:"2020-06-26-10-08-01"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-10-06-39.png",alt:"2020-06-26-10-06-39"}})]),s._v(" "),a("h2",{attrs:{id:"grasp-基于职责设计对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grasp-基于职责设计对象"}},[s._v("#")]),s._v(" GRASP 基于职责设计对象")]),s._v(" "),a("p",[s._v('上面 👆 介绍了软件设计和建模时需要做的 "动态建模" UML 交互图 和 "静态建模" UML 类图.')]),s._v(" "),a("p",[s._v("但是设计并不是凭空瞎想的, 是有章法可寻的.")]),s._v(" "),a("p",[s._v("在设计, 建模和编写代码时, 我们可以应用各种验证可行的 OO 设计原则, 如 "),a("strong",[s._v("GRASP")]),s._v(" 或 "),a("strong",[s._v("GoF")]),s._v(" 等设计模式. 这些设计模式总的来说遵循了『 "),a("strong",[s._v("职责驱动设计")]),s._v(" RDD 』原则.")]),s._v(" "),a("p",[s._v('下图 👇 展示了 "分析阶段" 的制品作为输入, 与 "设计阶段" 的输出之间的关系.')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-10-39-44.png",alt:"2020-06-26-10-39-44"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-10-40-07.png",alt:"2020-06-26-10-40-07"}})]),s._v(" "),a("h3",{attrs:{id:"职责驱动设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#职责驱动设计"}},[s._v("#")]),s._v(" 职责驱动设计")]),s._v(" "),a("p",[s._v("在『 "),a("strong",[s._v("职责驱动设计")]),s._v(" Responsibility-driven design , RRD 』中认为软件对象是具有职责的. 也就是对象自身是具备行为的.")]),s._v(" "),a("p",[s._v("职责和方法并非同一个事物, 职责是一种抽象, 而方法实现了职责.")]),s._v(" "),a("p",[s._v("根据职责粒度的不同, 一个职责可能会被转化成一个或多个方法.")]),s._v(" "),a("ul",[a("li",[s._v("🌰 创建 Sale 对象, 可能只涉及一个类中的一个方法;")]),s._v(" "),a("li",[s._v("🌰 提供 MySQL 数据库的访问, 可能会涉及到多个类中的多个方法;")])]),s._v(" "),a("p",[s._v("一个 OO 软件设计就可以看作是一堆有职责的对象进行协作构成的共同体.")]),s._v(" "),a("h3",{attrs:{id:"grasp-基于-oo-设计的系统方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grasp-基于-oo-设计的系统方法"}},[s._v("#")]),s._v(" GRASP 基于 OO 设计的系统方法")]),s._v(" "),a("p",[s._v("GRASP 是『 "),a("strong",[s._v("通用职责分配软件模式")]),s._v(' General Responsibility Assignment Software Patterns 』的缩写. 它是一套依据 "职责驱动" 定义的设计原则. 它作为一个设计工具, 以一种系统的, 合理的, 可以解释的方式来指导你进行 "对象设计和职责分配".')]),s._v(" "),a("p",[s._v("在编写代码和建模时, 我们就可以依据 GRASP 来给对象分配职责了. 绘制 UML 交互图时, 就是在决定职责的分配.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-13-49-40.png",alt:"2020-06-26-13-49-40"}})]),s._v(" "),a("p",[s._v('GRASP 中定义了 9 个基本的 OO 设计模式. 模式是对 "已有问题" 和 "解决方案" 的系统化的总结与描述.')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-14-44-13.png",alt:"2020-06-26-14-44-13"}})]),s._v(" "),a("h3",{attrs:{id:"如何在对象设计中应用-garsp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何在对象设计中应用-garsp"}},[s._v("#")]),s._v(" 如何在对象设计中应用 GARSP")]),s._v(" "),a("h4",{attrs:{id:"创建者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建者"}},[s._v("#")]),s._v(" 创建者")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-14-48-35.png",alt:"2020-06-26-14-48-35"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-14-49-15.png",alt:"2020-06-26-14-49-15"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-14-51-31.png",alt:"2020-06-26-14-51-31"}})]),s._v(" "),a("p",[s._v('创建者模式的基本意图是, 寻找任何情况下都与 "被创建对象" 具有连接的对象作为 "创建者". 这样做的原因是为了保持低耦合性, 因为创建者类无论如何都与被创建类有关系, 所以让他作为创建者不会增加什么耦合性.')]),s._v(" "),a("h4",{attrs:{id:"信息专家-专家"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信息专家-专家"}},[s._v("#")]),s._v(" 信息专家 ( 专家 )")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-05-19.png",alt:"2020-06-26-15-05-19"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-05-51.png",alt:"2020-06-26-15-05-51"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-06-01.png",alt:"2020-06-26-15-06-01"}})]),s._v(" "),a("p",[s._v('为了完成职责往往需要分布在不同对象中的信息, 每个对象都具有各自的职责, 这些局部的 "信息专家" 互相通过信息来协作, 共同完成职责.')]),s._v(" "),a("h4",{attrs:{id:"低耦合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#低耦合"}},[s._v("#")]),s._v(" 低耦合")]),s._v(" "),a("p",[a("strong",[s._v("问题")]),s._v(": 如何降低依赖性, 减少变化带来的影响, 提高重用性?")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-25-05.png",alt:"2020-06-26-15-25-05"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-25-23.png",alt:"2020-06-26-15-25-23"}})]),s._v(" "),a("p",[s._v('高耦合本身并不带来问题, 带来问题的是与 "不稳定的元素" 进行耦合.')]),s._v(" "),a("ul",[a("li",[s._v("例如 A 对象与 B 对象耦合在一起去实现一个功能, 但是 B 对象的实现可能随时会发生改变, 那么这种设计就是危险的. 因为 A 对 B 是不可控的.")]),s._v(" "),a("li",[s._v("J2EE 能够安全的与 Java 官方提供的库 ( 例如 "),a("code",[s._v("java.util")]),s._v(" ) 耦合在一起, 是因为他们是稳定的, 可控的. Java 官方不会突然间给你改一套完全不兼容的实现.")])]),s._v(" "),a("h4",{attrs:{id:"控制器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制器"}},[s._v("#")]),s._v(" 控制器")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-33-10.png",alt:"2020-06-26-15-33-10"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-35-00.png",alt:"2020-06-26-15-35-00"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-38-57.png",alt:"2020-06-26-15-38-57"}})]),s._v(" "),a("h4",{attrs:{id:"高内聚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高内聚"}},[s._v("#")]),s._v(" 高内聚")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-49-26.png",alt:"2020-06-26-15-49-26"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-49-37.png",alt:"2020-06-26-15-49-37"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-52-20.png",alt:"2020-06-26-15-52-20"}})]),s._v(" "),a("h2",{attrs:{id:"🌰-示例-应用-grasp-进行对象设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌰-示例-应用-grasp-进行对象设计"}},[s._v("#")]),s._v(" 🌰 示例: 应用 GRASP 进行对象设计")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-01-28.png",alt:"2020-06-26-16-01-28"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-01-41.png",alt:"2020-06-26-16-01-41"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-06-01.png",alt:"2020-06-26-16-06-01"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-06-11.png",alt:"2020-06-26-16-06-11"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-09-06.png",alt:"2020-06-26-16-09-06"}})]),s._v(" "),a("h4",{attrs:{id:"设计-makenewsale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计-makenewsale"}},[s._v("#")]),s._v(" 设计 makeNewSale")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-10-37.png",alt:"2020-06-26-16-10-37"}})]),s._v(" "),a("h4",{attrs:{id:"设计-enteritem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计-enteritem"}},[s._v("#")]),s._v(" 设计 enterItem")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-11-38.png",alt:"2020-06-26-16-11-38"}})]),s._v(" "),a("h4",{attrs:{id:"设计-endsale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计-endsale"}},[s._v("#")]),s._v(" 设计 endSale")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-12-23.png",alt:"2020-06-26-16-12-23"}})]),s._v(" "),a("h4",{attrs:{id:"设计-makepayment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计-makepayment"}},[s._v("#")]),s._v(" 设计 makePayment")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-13-37.png",alt:"2020-06-26-16-13-37"}})]),s._v(" "),a("h4",{attrs:{id:"nextgen-迭代-1-最终的-dcd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nextgen-迭代-1-最终的-dcd"}},[s._v("#")]),s._v(" NextGen 迭代 1 最终的 DCD")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-14-04.png",alt:"2020-06-26-16-14-04"}})]),s._v(" "),a("h4",{attrs:{id:"ui-层连接到领域层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ui-层连接到领域层"}},[s._v("#")]),s._v(" UI 层连接到领域层")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-15-17.png",alt:"2020-06-26-16-15-17"}})]),s._v(" "),a("h4",{attrs:{id:"初始化和启动用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化和启动用例"}},[s._v("#")]),s._v(" 初始化和启动用例")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-15-00.png",alt:"2020-06-26-16-15-00"}})]),s._v(" "),a("h2",{attrs:{id:"对可见性进行设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对可见性进行设计"}},[s._v("#")]),s._v(" 对可见性进行设计")]),s._v(" "),a("p",[s._v("『 "),a("strong",[s._v("可见性")]),s._v(' 』是对象 "看到 / 访问" 其他对象的能力. 对象 A 到对象 B 的可见性通常有四种:')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-54-28.png",alt:"2020-06-26-15-54-28"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-55-35.png",alt:"2020-06-26-15-55-35"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-56-18.png",alt:"2020-06-26-15-56-18"}})]),s._v(" "),a("p",[a("strong",[s._v("局部可见性")]),s._v(": 当 B 被声明为 A 方法内的局部对象时, 存在 A 到 B 的局部可见性 local visibility. 这种可见性仅存在方法的范围内, 是临时的.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-15-58-05.png",alt:"2020-06-26-15-58-05"}})]),s._v(" "),a("h2",{attrs:{id:"将设计映射为代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将设计映射为代码"}},[s._v("#")]),s._v(" 将设计映射为代码")]),s._v(" "),a("p",[s._v('类的实现顺序要按照 "'),a("strong",[s._v("耦合度从低到高")]),s._v('" 的顺序来完成:')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-18-34.png",alt:"2020-06-26-16-18-34"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-25-24.png",alt:"2020-06-26-16-25-24"}})]),s._v(" "),a("h2",{attrs:{id:"测试驱动开发-重构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试驱动开发-重构"}},[s._v("#")]),s._v(" 测试驱动开发 & 重构")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-23-36.png",alt:"2020-06-26-16-23-36"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-26-46.png",alt:"2020-06-26-16-26-46"}}),s._v(" "),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-06-26-16-29-03.png",alt:"2020-06-26-16-29-03"}})])])}),[],!1,null,null,null);t.default=i.exports}}]);