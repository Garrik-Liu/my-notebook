(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{341:function(t,a,s){"use strict";s.r(a);var r=s(0),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),s("h2",{attrs:{id:"算法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法-2"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),s("p",[t._v("离散数学中有多种一般性问题。例如，已知一串整数，求最大的一个；已知一个集合，列出其所有子集；给定一个整数集合，把这些整数从小到大排序；已知一个网络，找出两个顶点之间的最短路径等。遇到这样的问题时，首先要做的就是构造一个模型把问题转换为数学问题。")]),t._v(" "),s("p",[t._v("建立合适的数学模型只是解题的第一步。完整的解题还需要利用这一模型解决一般性问题的方法。理想的情况是需要一个过程，它能够遵循一系列步骤导致找到所求的答案。这一系列步骤就称为一个算法（algorithm）")]),t._v(" "),s("div",{staticClass:"theorem"},[s("p",{staticClass:"title"},[t._v("定义：")]),s("p",[t._v("『 "),s("strong",[t._v("算法")]),t._v(" 』是进行一项计算或解决一个问题的准确指令的有限序列。")])]),s("details",{staticClass:"custom-block details",attrs:{open:"open"}},[s("summary",[t._v("例子：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/uuedVDE.png",alt:"Screen Shot 2020-01-09 at 10.24.57 PM"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/jknnk9j.png",alt:"Screen Shot 2020-01-09 at 10.26.12 PM"}})])]),t._v(" "),s("p",[t._v("\b"),s("img",{attrs:{src:"https://i.imgur.com/4oN9hZn.png",alt:"Screen Shot 2020-01-09 at 10.26.39 PM"}})]),t._v(" "),s("details",{staticClass:"custom-block details",attrs:{open:"open"}},[s("summary",[t._v("例子：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/tzRPGcd.png",alt:"Screen Shot 2020-01-09 at 10.27.02 PM"}})])]),t._v(" "),s("h3",{attrs:{id:"搜索算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#搜索算法"}},[t._v("#")]),t._v(" 搜索算法")]),t._v(" "),s("p",[t._v("在有序表中定位一个元素的问题经常会出现在各种应用场景。例如检查单词拼写的程序要在字典中搜索，而字典其实就是单词的有序表。这一类问题称为"),s("strong",[t._v("搜索问题")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"线性搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性搜索"}},[t._v("#")]),t._v(" 线性搜索")]),t._v(" "),s("p",[t._v("\b"),s("img",{attrs:{src:"https://i.imgur.com/KmevXri.png",alt:"Screen Shot 2020-01-09 at 10.31.18 PM"}})]),t._v(" "),s("h4",{attrs:{id:"二分搜索算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二分搜索算法"}},[t._v("#")]),t._v(" 二分搜索算法")]),t._v(" "),s("p",[t._v("当表中的各项是顺序排列的 \b，可以使用"),s("strong",[t._v("二分搜索算法")]),t._v("。它是通过比较要搜索的元素与表的中间项进行的。然后此表就分成两个较小的长度相等的子表，或其中较短的列表比另一个少一项。根据与中间项的比较结果，可以将搜索局限于一个合适的子表继续进行。")]),t._v(" "),s("p",[t._v("\b"),s("img",{attrs:{src:"https://i.imgur.com/3M02p53.png",alt:"Screen Shot 2020-01-09 at 10.32.55 PM"}})]),t._v(" "),s("h3",{attrs:{id:"排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/ChP94sL.png",alt:"Screen Shot 2020-01-09 at 10.35.51 PM"}})]),t._v(" "),s("h4",{attrs:{id:"冒泡排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/YUwuP5L.png",alt:"Screen Shot 2020-01-09 at 10.36.35 PM"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/J9UH9hC.png",alt:"Screen Shot 2020-01-09 at 10.36.43 PM"}})]),t._v(" "),s("h4",{attrs:{id:"插入排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[t._v("#")]),t._v(" 插入排序")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/zilSNZC.png",alt:"Screen Shot 2020-01-09 at 10.36.57 PM"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/YsbRgrN.png",alt:"Screen Shot 2020-01-09 at 10.37.20 PM"}})]),t._v(" "),s("h3",{attrs:{id:"贪婪算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪算法"}},[t._v("#")]),t._v(" 贪婪算法")]),t._v(" "),s("p",[s("strong",[t._v("最优化问题")]),t._v("（optimization problem）这种问题的目标是寻找给定问题满足某个参数值最小化或最大化的解。")]),t._v(" "),s("p",[t._v("🌰 例如，寻找两个城市之间总里程最短的路线；确定一种用尽可能少的位数进行消息编码的方式；以及寻找一组在网络节点之间使用最少量光纤的光纤连接。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/HmMQynv.png",alt:"Screen Shot 2020-01-09 at 10.39.19 PM"}})]),t._v(" "),s("details",{staticClass:"custom-block details",attrs:{open:"open"}},[s("summary",[t._v("例子：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/xHKqsX7.png",alt:"Screen Shot 2020-01-09 at 10.39.33 PM"}})])]),t._v(" "),s("p",[t._v("贪婪算法根据某一条件在每一步都做出最佳选择。下面的例子表明在多个条件中选择哪一个也可能是难以确定的。")]),t._v(" "),s("details",{staticClass:"custom-block details",attrs:{open:"open"}},[s("summary",[t._v("例子：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-10-14-25-44.png",alt:"2020-1-10-14-25-44.png"}}),t._v(" "),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-10-14-25-57.png",alt:"2020-1-10-14-25-57.png"}})])]),t._v(" "),s("h3",{attrs:{id:"停机问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#停机问题"}},[t._v("#")]),t._v(" 停机问题")]),t._v(" "),s("h2",{attrs:{id:"函数的增长"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数的增长"}},[t._v("#")]),t._v(" 函数的增长")]),t._v(" "),s("h2",{attrs:{id:"算法的复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法的复杂度"}},[t._v("#")]),t._v(" 算法的复杂度")])])}),[],!1,null,null,null);a.default=e.exports}}]);