(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{315:function(a,t,s){"use strict";s.r(t);var v=s(0),_=Object(v.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"jdbc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdbc"}},[a._v("#")]),a._v(" JDBC")]),a._v(" "),s("h2",{attrs:{id:"jdbc-入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdbc-入门"}},[a._v("#")]),a._v(" JDBC 入门")]),a._v(" "),s("h3",{attrs:{id:"什么是-jdbc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-jdbc"}},[a._v("#")]),a._v(" 什么是 JDBC")]),a._v(" "),s("p",[s("strong",[a._v("JDBC 介绍")]),a._v("：")]),a._v(" "),s("ul",[s("li",[a._v("全称 Java 数据库连接 (Java Database Connectivity);")]),a._v(" "),s("li",[a._v("用于在 Java 语言编程中与数据库连接的 API；")]),a._v(" "),s("li",[a._v("由一组用 Java 语言编写的“类”和“接口”组成；")]),a._v(" "),s("li",[a._v("JDBC 包含了数据库操作的规范。定义了相关的类，接口，方法， 但是并没有提供具体实现；")]),a._v(" "),s("li",[a._v("各大数据库厂商会提供对 JDBC 的实现；")]),a._v(" "),s("li",[a._v("简单说, JDBC 提供了操纵数据库的接口，但是没有具体实现。 通过引入不同的驱动包（"),s("code",[a._v(".jar")]),a._v(" 文件），就可以连接到不同的数据库；")])]),a._v(" "),s("p",[s("strong",[a._v("JDBC 的 API 通常用于")]),a._v("：")]),a._v(" "),s("ul",[s("li",[a._v("连接到数据库")]),a._v(" "),s("li",[a._v("创建 SQL 或 MySQL 语句")]),a._v(" "),s("li",[a._v("在数据库中执行 SQL 或 MySQL 查询")]),a._v(" "),s("li",[a._v("查看和修改数据库中的数据记录")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-48-39.png",alt:"2020-1-26-22-48-39.png"}})]),a._v(" "),s("h3",{attrs:{id:"使用-jdbc-建立数据库连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-jdbc-建立数据库连接"}},[a._v("#")]),a._v(" 使用 JDBC 建立数据库连接")]),a._v(" "),s("p",[s("strong",[a._v("建立 JDBC 连接所涉及以下四个步骤")]),a._v("：")]),a._v(" "),s("ul",[s("li",[a._v("导入 JDBC 包：使用 "),s("code",[a._v("import")]),a._v(" 语句在 Java 代码开头位置导入所需的类；")]),a._v(" "),s("li",[a._v("注册 JDBC 驱动程序：使 JVM 将所需的驱动程序实现加载到内存中，从而可以满足 JDBC 请求。使用 "),s("code",[a._v("Class.forName()")]),a._v(" 方法，将驱动程序的类文件动态加载到内存中，并将其自动注册；")]),a._v(" "),s("li",[a._v("数据库 URL 配置：创建一个正确格式化的地址，指向要连接到的数据库；MySQL URL 格式为："),s("code",[a._v("jdbc:mysql://hostname/")]),a._v("databaseName；")]),a._v(" "),s("li",[a._v("创建连接对象：调用 DriverManager 对象的 "),s("code",[a._v("getConnection()")]),a._v(" 方法来建立实际的数据库连接。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-49-47.png",alt:"2020-1-26-22-49-47.png"}})]),a._v(" "),s("h3",{attrs:{id:"使用-jdbc-操作数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-jdbc-操作数据库"}},[a._v("#")]),a._v(" 使用 JDBC 操作数据库")]),a._v(" "),s("h4",{attrs:{id:"创建数据表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建数据表"}},[a._v("#")]),a._v(" 创建数据表")]),a._v(" "),s("ul",[s("li",[a._v("连接上数据库；")]),a._v(" "),s("li",[a._v("创建你要执行的 SQL 语句；")]),a._v(" "),s("li",[a._v("执行 SQL；\n"),s("ul",[s("li",[a._v("通过 "),s("code",[a._v("createStatement()")]),a._v(" 创建要执行的静态 SQL 语句的 Statement 对象；")]),a._v(" "),s("li",[a._v("通过 Statement 对象的 "),s("code",[a._v("executeUpdate(sql)")]),a._v(" 方法来执行语句；")]),a._v(" "),s("li",[a._v("返回结果：\n"),s("ul",[s("li",[a._v("DQL 操作返回查询结果集；")]),a._v(" "),s("li",[a._v("DML 返回受影响的行数；")]),a._v(" "),s("li",[a._v("DDL 返回 0；")])])]),a._v(" "),s("li",[a._v("释放数据资源；\n"),s("ul",[s("li",[a._v("通过 Statement 对象 "),s("code",[a._v("close()")]),a._v(" 释放资源；")]),a._v(" "),s("li",[a._v("通过 Connction 对象 "),s("code",[a._v("close()")]),a._v(" 释放资源；")])])])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-52-29.png",alt:"2020-1-26-22-52-29.png"}})]),a._v(" "),s("h4",{attrs:{id:"执行-dml-操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行-dml-操作"}},[a._v("#")]),a._v(" 执行 DML 操作")]),a._v(" "),s("ul",[s("li",[a._v("执行 DML 操作的步骤和上面创建数据表相同；")]),a._v(" "),s("li",[a._v("我们拿“插入一条新数据”举例：")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-52-58.png",alt:"2020-1-26-22-52-58.png"}}),a._v(" "),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-53-10.png",alt:"2020-1-26-22-53-10.png"}})]),a._v(" "),s("h4",{attrs:{id:"执行-dql-操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行-dql-操作"}},[a._v("#")]),a._v(" 执行 DQL 操作")]),a._v(" "),s("ul",[s("li",[a._v("通过 Statement 对象的 "),s("code",[a._v("executeQuery(sql)")]),a._v(" 方法来执行语句；")]),a._v(" "),s("li",[s("code",[a._v("executeQuery")]),a._v(" 方法返回一个查询结果集 ResultSet；")]),a._v(" "),s("li",[a._v("结果集常用方法：\n"),s("ul",[s("li",[s("code",[a._v("next()")]),a._v("：如果当前指向的行有下一行数据，则指针指向下一行；")]),a._v(" "),s("li",[s("code",[a._v("getXxx(String columnName)")]),a._v(" ：获取当前行中的，指定列的值。\n"),s("ul",[s("li",[a._v('"Xxx" 指的是目标列的数据类型；')]),a._v(" "),s("li",[a._v("如果类型是 Varchar / Char / Text，则方法名为"),s("code",[a._v("getString")]),a._v(";")]),a._v(" "),s("li",[a._v("如果类型是 Int / Integer，则方法名为 "),s("code",[a._v("getInt")]),a._v(";")])])])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-55-0.png",alt:"2020-1-26-22-55-0.png"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-55-19.png",alt:"2020-1-26-22-55-19.png"}})]),a._v(" "),s("h3",{attrs:{id:"dao-思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-思想"}},[a._v("#")]),a._v(" DAO 思想")]),a._v(" "),s("h4",{attrs:{id:"dao-什么是"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-什么是"}},[a._v("#")]),a._v(" DAO 什么是")]),a._v(" "),s("ul",[s("li",[a._v("当用上面的方法去重复地进行“增删改查”操作，重复代码会很多；所以我们需要将这些操作封装起来；")]),a._v(" "),s("li",[a._v("DAO（Data Access Object）数据存取对象；")]),a._v(" "),s("li",[a._v("DAO 位于“业务逻辑层”和“持久层”(数据库) 之间，从而实现对持久层数据访问；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-56-36.png",alt:"2020-1-26-22-56-36.png"}})]),a._v(" "),s("h4",{attrs:{id:"orm-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#orm-介绍"}},[a._v("#")]),a._v(" ORM 介绍")]),a._v(" "),s("ul",[s("li",[a._v("ORM（Object Relational Mapping）对象关系映射；")]),a._v(" "),s("li",[a._v("将关系型数据库的数据映射为对象，以对象的形式展现；")]),a._v(" "),s("li",[a._v("ORM 的目的是为了方便开发人员以面向对象的思想来实现对数据库的操作；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-57-31.png",alt:"2020-1-26-22-57-31.png"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-57-40.png",alt:"2020-1-26-22-57-40.png"}})]),a._v(" "),s("h4",{attrs:{id:"domain-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#domain-介绍"}},[a._v("#")]),a._v(" Domain 介绍")]),a._v(" "),s("ul",[s("li",[a._v("Domain 就是一个类；")]),a._v(" "),s("li",[a._v("符合 JavaBean 规范（一个类中有字段和该字段的 Getter 和 Setter 方法）；")]),a._v(" "),s("li",[a._v("用于作为用户和数据库交互的中转站；")]),a._v(" "),s("li",[a._v("示例：下面就是一个 Domain 类：\n"),s("ul",[s("li",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-22-58-17.png",alt:"2020-1-26-22-58-17.png"}})]),a._v(" "),s("li",[s("strong",[a._v("保存数据")]),a._v("：\n"),s("ul",[s("li",[a._v("通过创建 "),s("code",[a._v("Stu")]),a._v(" Domain 对象来进行数据中转；")]),a._v(" "),s("li",[a._v("将 "),s("code",[a._v("Stu")]),a._v(" 传入 DAO 对象的 "),s("code",[a._v("save")]),a._v(" 方法来保存到数据库；")]),a._v(" "),s("li",[a._v("如果不用 Domain 的话，我们要向 "),s("code",[a._v("save")]),a._v(" 方法传入三个参数，现在一个参数就够了；")]),a._v(" "),s("li",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-0-40.png",alt:"2020-1-26-23-0-40.png"}})])])]),a._v(" "),s("li",[s("strong",[a._v("读取数据")]),a._v("：\n"),s("ul",[s("li",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-1-20.png",alt:"2020-1-26-23-1-20.png"}})])])])])])]),a._v(" "),s("h2",{attrs:{id:"dao-编写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-编写"}},[a._v("#")]),a._v(" DAO 编写")]),a._v(" "),s("h3",{attrs:{id:"dao-设计规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-设计规范"}},[a._v("#")]),a._v(" DAO 设计规范")]),a._v(" "),s("h4",{attrs:{id:"编写-dao-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写-dao-组件"}},[a._v("#")]),a._v(" 编写 DAO 组件")]),a._v(" "),s("ul",[s("li",[a._v("定义 DAO 接口；\n"),s("ul",[s("li",[a._v("开发中使用“面向接口”编程；")]),a._v(" "),s("li",[a._v("接口只给出函数声明，但是没有给出函数的具体实现；")])])]),a._v(" "),s("li",[a._v("编写 DAO 实现类；\n"),s("ul",[s("li",[a._v("根据需求来编写具体的实现类；")])])])]),a._v(" "),s("h4",{attrs:{id:"面向接口的好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向接口的好处"}},[a._v("#")]),a._v(" 面向接口的好处")]),a._v(" "),s("ul",[s("li",[a._v("业务逻辑清晰；")]),a._v(" "),s("li",[a._v("增强代码的扩展性，可维护性；")]),a._v(" "),s("li",[a._v("接口和实现相分离，适合团队开发；")]),a._v(" "),s("li",[a._v("降低耦合度，便于日后迭代；")])]),a._v(" "),s("h4",{attrs:{id:"package-包名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package-包名规范"}},[a._v("#")]),a._v(" Package 包名规范")]),a._v(" "),s("ul",[s("li",[a._v("整体规范：\n"),s("ul",[s("li",[a._v("域名.模块名称.组件名称")])])]),a._v(" "),s("li",[a._v("DAO 包规范：\n"),s("ul",[s("li",[s("code",[a._v("com.xxx.jdbc.domain")]),a._v(" 存储所有的 Domain")]),a._v(" "),s("li",[s("code",[a._v("com.xxx.jdbc.dao")]),a._v(" 存储所有的 DAO 接口")]),a._v(" "),s("li",[s("code",[a._v("com.xxx.jdbc.dao.impl")]),a._v(" 存储所有的 DAO 接口实现类")]),a._v(" "),s("li",[s("code",[a._v("com.xxx.jdbc.dao.test")]),a._v(" 存储 DAO 组件的测试类")])])])]),a._v(" "),s("h4",{attrs:{id:"class-类名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-类名规范"}},[a._v("#")]),a._v(" Class 类名规范")]),a._v(" "),s("ul",[s("li",[a._v("domain 类：\n"),s("ul",[s("li",[a._v("存储在 domain 包中。用于描述一个对象，是一个 JavaBean，用于表示某一个对象的 CRUB 声明；")]),a._v(" "),s("li",[a._v("命名规范：接口 + DomainDao")])])]),a._v(" "),s("li",[a._v("dao 实现类：\n"),s("ul",[s("li",[a._v("储存在 dao.impl 包中，用于表示 DAO 接口的实现类。")]),a._v(" "),s("li",[a._v("命名规范：DomainDao + 实现类")])])])]),a._v(" "),s("h3",{attrs:{id:"dao-开发步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-开发步骤"}},[a._v("#")]),a._v(" DAO 开发步骤")]),a._v(" "),s("ul",[s("li",[a._v("创建表")]),a._v(" "),s("li",[a._v("建立 domain 包 & domain 类")]),a._v(" "),s("li",[a._v("建立 dao 包 & dao 接口")]),a._v(" "),s("li",[a._v("建立 dao.impl 包 & dao 实现类")]),a._v(" "),s("li",[a._v("根据 dao 接口创建 dao 测试类")]),a._v(" "),s("li",[a._v("编写实现类当中 dao 的声明的方法体")]),a._v(" "),s("li",[a._v("每编写一个 dao 方法，进行功能测试")])]),a._v(" "),s("h3",{attrs:{id:"dao-编写-1：-结构搭建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-编写-1：-结构搭建"}},[a._v("#")]),a._v(" DAO 编写 - 1： 结构搭建")]),a._v(" "),s("p",[a._v("先创建好 domain 包，domain 类；dao 包，dao 接口；dao.impl 包，dao 实现类；测试包，测试类；")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-6-16.png",alt:"2020-1-26-23-6-16.png"}})]),a._v(" "),s("h4",{attrs:{id:"domain-类："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#domain-类："}},[a._v("#")]),a._v(" domain 类：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-7-8.png",alt:"2020-1-26-23-7-8.png"}})]),a._v(" "),s("h4",{attrs:{id:"dao-接口："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-接口："}},[a._v("#")]),a._v(" dao 接口：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-7-19.png",alt:"2020-1-26-23-7-19.png"}})]),a._v(" "),s("h4",{attrs:{id:"dao-实现类："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-实现类："}},[a._v("#")]),a._v(" dao 实现类：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-9-45.png",alt:"2020-1-26-23-9-45.png"}})]),a._v(" "),s("h4",{attrs:{id:"测试类："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试类："}},[a._v("#")]),a._v(" 测试类：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-7-37.png",alt:"2020-1-26-23-7-37.png"}})]),a._v(" "),s("h3",{attrs:{id:"dao-编写-2：编写-dao-实现类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-编写-2：编写-dao-实现类"}},[a._v("#")]),a._v(" DAO 编写 - 2：编写 DAO 实现类")]),a._v(" "),s("h4",{attrs:{id:"save-方法编写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#save-方法编写"}},[a._v("#")]),a._v(" save 方法编写")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-10-35.png",alt:"2020-1-26-23-10-35.png"}})]),a._v(" "),s("p",[a._v("编写 save 方法单元测试：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("在 StudentDaoTest 类中编写它的单元测试方法；")])]),a._v(" "),s("li",[s("p",[a._v("使用 "),s("strong",[a._v("@Test")]),a._v(" 修饰符创建单元测试；")])]),a._v(" "),s("li",[s("p",[a._v("之后选中方法，右键 -> Run As -> JUnit Test；\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-11-26.png",alt:"2020-1-26-23-11-26.png"}})])]),a._v(" "),s("li",[s("p",[a._v("测试成功后显式如下：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-11-41.png",alt:"2020-1-26-23-11-41.png"}})])])]),a._v(" "),s("h4",{attrs:{id:"delete-方法编写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delete-方法编写"}},[a._v("#")]),a._v(" delete 方法编写")]),a._v(" "),s("p",[a._v("只要把 SQL 语句改变就好了")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-13-27.png",alt:"2020-1-26-23-13-27.png"}})]),a._v(" "),s("h4",{attrs:{id:"update-方法编写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-方法编写"}},[a._v("#")]),a._v(" update 方法编写")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-13-35.png",alt:"2020-1-26-23-13-35.png"}})]),a._v(" "),s("h4",{attrs:{id:"get-方法编写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-方法编写"}},[a._v("#")]),a._v(" get 方法编写")]),a._v(" "),s("ul",[s("li",[a._v("把 "),s("code",[a._v("executeUpdate")]),a._v(" 改成 "),s("code",[a._v("executeQuery")]),a._v("；")]),a._v(" "),s("li",[a._v("并将返回结果赋给一个 ResultSet 对象；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-13-52.png",alt:"2020-1-26-23-13-52.png"}})]),a._v(" "),s("h4",{attrs:{id:"getall-方法编写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getall-方法编写"}},[a._v("#")]),a._v(" getAll 方法编写")]),a._v(" "),s("p",[a._v("创建一个数组来存放查询到的多个结果；")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-14-43.png",alt:"2020-1-26-23-14-43.png"}})]),a._v(" "),s("h3",{attrs:{id:"dao-编写-3：代码重构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-编写-3：代码重构"}},[a._v("#")]),a._v(" DAO 编写 - 3：代码重构")]),a._v(" "),s("h4",{attrs:{id:"抽出配置变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽出配置变量"}},[a._v("#")]),a._v(" 抽出配置变量")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("将数据库 URL，用户名，密码，驱动地址抽出；")])]),a._v(" "),s("li",[s("p",[a._v("声明为“私有成员变量”；\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-15-22.png",alt:"2020-1-26-23-15-22.png"}})])]),a._v(" "),s("li",[s("p",[a._v("在方法中通过 "),s("code",[a._v("this")]),a._v(" 去获取成员变量：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-15-49.png",alt:"2020-1-26-23-15-49.png"}})])])]),a._v(" "),s("h4",{attrs:{id:"将配置变量抽出到工具类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将配置变量抽出到工具类"}},[a._v("#")]),a._v(" 将配置变量抽出到工具类")]),a._v(" "),s("ul",[s("li",[a._v("由于上面的这些配置变量可能在别的 DAO 实现类中也会被使用；")]),a._v(" "),s("li",[a._v("所以可以再抽出来放到一个“工具类”中：\n"),s("ul",[s("li",[a._v("再创建一个 util 包，并创建 JDBCUtil 类：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-16-35.png",alt:"2020-1-26-23-16-35.png"}})]),a._v(" "),s("li",[a._v("把配置变量设置为 "),s("code",[a._v("public static")]),a._v("；")]),a._v(" "),s("li",[a._v("这样可以直接通过“工具类名”来访问变量；\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-17-20.png",alt:"2020-1-26-23-17-20.png"}})])])]),a._v(" "),s("li",[a._v("在 DAO 实现类中，可以直接通过 JDBCUtil 类来获取配置变量了：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-18-3.png",alt:"2020-1-26-23-18-3.png"}})])]),a._v(" "),s("h4",{attrs:{id:"把-connection-对象创建抽出到“jdbcutil-工具类”"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#把-connection-对象创建抽出到“jdbcutil-工具类”"}},[a._v("#")]),a._v(" 把 Connection 对象创建抽出到“JDBCUtil 工具类”")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("把创建 Connection 对象的过程，封装到 JDBCUtil 里：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-19-20.png",alt:"2020-1-26-23-19-20.png"}})])]),a._v(" "),s("li",[s("p",[a._v("在实现类中的方法里，可以直接通过 JDBCUtil 来获取连接：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-19-58.png",alt:"2020-1-26-23-19-58.png"}})])]),a._v(" "),s("li",[s("p",[a._v("由于驱动加载只需要加载一次；")])]),a._v(" "),s("li",[s("p",[a._v("可以把驱动加载放到静态代码块中；\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-46-49.png",alt:"2020-1-26-23-46-49.png"}})])])]),a._v(" "),s("h4",{attrs:{id:"把释放资源操作抽出到-jdbcutil"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#把释放资源操作抽出到-jdbcutil"}},[a._v("#")]),a._v(" 把释放资源操作抽出到 JDBCUtil")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-26-23-19-3.png",alt:"2020-1-26-23-19-3.png"}})]),a._v(" "),s("h2",{attrs:{id:"预编译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预编译"}},[a._v("#")]),a._v(" 预编译")]),a._v(" "),s("h4",{attrs:{id:"statement-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statement-接口"}},[a._v("#")]),a._v(" Statement 接口")]),a._v(" "),s("ul",[s("li",[a._v("Statement 接口用于 Java 程序与数据库之间的数据传输；")]),a._v(" "),s("li",[a._v("Statement 接口有三个实现类：\n"),s("ul",[s("li",[a._v("Statement：用于对数据库进行通用访问，使用的是静态 SQL；")]),a._v(" "),s("li",[a._v("PreparedStatement：用于预编译模板 SQL 语句，在运行时接受 SQL 输入参数；")]),a._v(" "),s("li",[a._v("CallableStatement：先不讲；")])])])]),a._v(" "),s("h4",{attrs:{id:"预编译语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预编译语句"}},[a._v("#")]),a._v(" 预编译语句")]),a._v(" "),s("ul",[s("li",[a._v("PreparedStatement 对象用于预编译模板 SQL 语句；")]),a._v(" "),s("li",[a._v("使用 ？作为参数标记；")]),a._v(" "),s("li",[a._v("使用 Connection 对象的 "),s("code",[a._v("prepareStatement(sql)")]),a._v(" 方法将模板语句进行预编译；")]),a._v(" "),s("li",[a._v("使用 "),s("code",[a._v("setInt(index, value)")]),a._v(" 或 "),s("code",[a._v("setString(index, value)")]),a._v(" 方法将值绑定到参数中；\n"),s("ul",[s("li",[a._v("每个参数标记的下标是其顺序位置；")]),a._v(" "),s("li",[a._v("index 从 1 开始算起；")])])]),a._v(" "),s("li",[a._v("同样也是用 "),s("code",[a._v("executeQuery()")]),a._v(" 或 "),s("code",[a._v("executeUpdate()")]),a._v(" 方法来执行语句；\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-15-34.png",alt:"2020-1-27-0-15-34.png"}})])]),a._v(" "),s("h4",{attrs:{id:"防止-sql-注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防止-sql-注入"}},[a._v("#")]),a._v(" 防止 SQL 注入")]),a._v(" "),s("ul",[s("li",[a._v("通过把 SQL 命令插入到 Web 表单中提交，或 URL 查询字段等方法，来达到欺骗服务器执行 SQL 命令的目的，就叫做“SQL 注入”\n"),s("ul",[s("li",[a._v("🌰 例如：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-22-43-46.png",alt:"2020-1-27-22-43-46.png"}})]),a._v(" "),s("li",[a._v("上面程序执行完，sql 变量等于 "),s("code",[a._v("select * from user where name = '' OR 1=1 OR '' and pwd='12'")])])])]),a._v(" "),s("li",[a._v("PrepareStatement 能够防止注入；")]),a._v(" "),s("li",[a._v("它会在特殊符号前加 "),s("code",[a._v("\\")]),a._v(" 进行转义；")])]),a._v(" "),s("h2",{attrs:{id:"批处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#批处理"}},[a._v("#")]),a._v(" 批处理")]),a._v(" "),s("ul",[s("li",[a._v("批处理是什么？\n"),s("ul",[s("li",[a._v("一次性执行多条 SQL 语句，允许多条语句一次性提交给数据库批量处理；")])])]),a._v(" "),s("li",[a._v("批处理方法：\n"),s("ul",[s("li",[s("code",[a._v("addBatch(String)")]),a._v("：添加需要批处理的 SQL 语句；")]),a._v(" "),s("li",[s("code",[a._v("executeBatch()")]),a._v("：执行批处理；")])])]),a._v(" "),s("li",[a._v("支持情况：\n"),s("ul",[s("li",[a._v("默认 MySQL 是不支持批处理的；")]),a._v(" "),s("li",[a._v("需要在数据库 URL 后添加一个 "),s("code",[a._v("rewriteBatchedStatements")]),a._v(" 参数；\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-18-41.png",alt:"2020-1-27-0-18-41.png"}})])])]),a._v(" "),s("li",[a._v("示例：批量添加 1000 条数据：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-19-16.png",alt:"2020-1-27-0-19-16.png"}})])]),a._v(" "),s("h2",{attrs:{id:"事务处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务处理"}},[a._v("#")]),a._v(" 事务处理")]),a._v(" "),s("ul",[s("li",[a._v("默认状态下，事务是自动提交的；")]),a._v(" "),s("li",[a._v("需要设置为手动提交；")]),a._v(" "),s("li",[a._v("处理事务过程：\n"),s("ul",[s("li",[a._v("关闭自动提交："),s("code",[a._v("conn.setAutoCommit(false)")]),a._v(";")]),a._v(" "),s("li",[a._v("提交事务："),s("code",[a._v("conn.commit()")]),a._v(";")]),a._v(" "),s("li",[a._v("出现异常，进行回滚："),s("code",[a._v("conn.rollback()")]),a._v("；\n"),s("ul",[s("li",[a._v("把所有的事务操作用 "),s("code",[a._v("try/catch")]),a._v(" 包裹起来；")]),a._v(" "),s("li",[a._v("在 "),s("code",[a._v("catch")]),a._v(" 中监听异常，调用 "),s("code",[a._v("rollback()")]),a._v(" 方法；")]),a._v(" "),s("li",[a._v("在 "),s("code",[a._v("finally")]),a._v(" 中断开连接，释放资源；")])])])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-31-40.png",alt:"2020-1-27-0-31-40.png"}})]),a._v(" "),s("h2",{attrs:{id:"二进制数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制数据"}},[a._v("#")]),a._v(" 二进制数据")]),a._v(" "),s("ul",[s("li",[a._v("图片，音频，视频在 MySQL 中用 BLOB（二进制流）类型储存；")]),a._v(" "),s("li",[a._v("但是真实开发中，一般不会存储二进制文件；")]),a._v(" "),s("li",[a._v("通常把文件存储的路径保存在数据库，通过路径去获取文件；")]),a._v(" "),s("li",[a._v("BLOB 类型：\n"),s("ul",[s("li",[a._v("TINYBLOB：255 字节")]),a._v(" "),s("li",[a._v("BLOB：65535 字节")]),a._v(" "),s("li",[a._v("MEDIUMBLOB：16M")]),a._v(" "),s("li",[a._v("LONGBLOG：4G")])])])]),a._v(" "),s("h4",{attrs:{id:"存储图片到数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储图片到数据库"}},[a._v("#")]),a._v(" 存储图片到数据库")]),a._v(" "),s("ul",[s("li",[a._v("先在表中创建出一个存放图片的字段：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-32-52.png",alt:"2020-1-27-0-32-52.png"}})]),a._v(" "),s("li",[a._v("通过 FileInputStream 类来读取磁盘内文件：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-33-18.png",alt:"2020-1-27-0-33-18.png"}})])]),a._v(" "),s("h4",{attrs:{id:"读取图片从数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取图片从数据库"}},[a._v("#")]),a._v(" 读取图片从数据库")]),a._v(" "),s("ul",[s("li",[a._v("通过 "),s("code",[a._v("ResultSet")]),a._v(" 对象的 "),s("code",[a._v("getBlob")]),a._v(" 方法获取二进制数据，返回值为 "),s("code",[a._v("Blob")]),a._v(" 对象；")]),a._v(" "),s("li",[a._v("通过 "),s("code",[a._v("Blob")]),a._v(" 对象的 "),s("code",[a._v("getBinaryStream()")]),a._v(" 方法来获取图片的二进制流，返回值为 InputStream 对象；")]),a._v(" "),s("li",[a._v("通过 "),s("code",[a._v("Files.copy")]),a._v(" 把二进制流，复制到磁盘中；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-34-9.png",alt:"2020-1-27-0-34-9.png"}})]),a._v(" "),s("h2",{attrs:{id:"获取自动生成的主键"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取自动生成的主键"}},[a._v("#")]),a._v(" 获取自动生成的主键")]),a._v(" "),s("ul",[s("li",[a._v("在设计表时，有时会设置自动生成的主键；")]),a._v(" "),s("li",[a._v("在插入数据时，有时我们想要知道生成的主键是什么；")]),a._v(" "),s("li",[a._v("需求场景示例：\n"),s("ul",[s("li",[a._v("用户注册时，第一步只需要填写用户名，密码；")]),a._v(" "),s("li",[a._v("注册成功后，需要跳转到个人信息完善页面，这时需要用到主键的值；")])])]),a._v(" "),s("li",[a._v("获取方法：\n"),s("ul",[s("li",[a._v("创建语句时，传入参数 "),s("code",[a._v("Statement.RETURN_GENERATED_KEYS")]),a._v(" 表示可以获取主键；")]),a._v(" "),s("li",[a._v("通过语句对象的 "),s("code",[a._v("getGeneratedKeys()")]),a._v(" 方法获得主键；")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-35-46.png",alt:"2020-1-27-0-35-46.png"}})]),a._v(" "),s("h2",{attrs:{id:"连接池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接池"}},[a._v("#")]),a._v(" 连接池")]),a._v(" "),s("h3",{attrs:{id:"连接池介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接池介绍"}},[a._v("#")]),a._v(" 连接池介绍")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("没有连接池")]),a._v("：\n"),s("ul",[s("li",[a._v("每一次执行 CRUD 操作使用数据库的时候，都要创建一个数据库连接对象；")]),a._v(" "),s("li",[a._v("每一次向数据库建立连接的时候，都要讲 Connection 加载到内存中；")]),a._v(" "),s("li",[a._v("当操作执行完，还要断开连接，这会很消耗资源和时间；")]),a._v(" "),s("li",[a._v("数据库资源没有很好地得到重复利用；")]),a._v(" "),s("li",[a._v("当几百几千人同时访问数据库时，资源消耗会让服务器崩溃；")])])]),a._v(" "),s("li",[s("strong",[a._v("连接池是什么")]),a._v("：\n"),s("ul",[s("li",[a._v("池：保存对象的容器；")]),a._v(" "),s("li",[a._v("连接池：保存数据库连接对象的容器；")]),a._v(" "),s("li",[a._v("作用：\n"),s("ul",[s("li",[a._v("初始化时创建一定数量的对象，需要时直接从池中取出一个空闲对象；")]),a._v(" "),s("li",[a._v("用完后并不直接释放掉，而是再放到对象池中，以方便一下次对象请求可以直接复用；")]),a._v(" "),s("li",[a._v("池技术优势是，可以消除对象创建所带来的延迟，从而提高系统的性能；")])])]),a._v(" "),s("li",[a._v("数据库连接池：\n"),s("ul",[s("li",[a._v("基本思想就是为数据库连接建立一个“缓冲池”；")]),a._v(" "),s("li",[a._v("预先在缓冲池中放一定数量的连接；")]),a._v(" "),s("li",[a._v("当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕再放回去；")]),a._v(" "),s("li",[a._v("可以通过设置连接池最大连接数来防止系统无尽地与数据库连接；")]),a._v(" "),s("li",[a._v("可以通过连接池的管理机制监控数据库连接的数量，使用情况；")])])])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-43-29.png",alt:"2020-1-27-0-43-29.png"}})]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("连接池中的属性")]),a._v("：\n"),s("ul",[s("li",[a._v("连接数据库的 4 要素：驱动名称，数据库地址，用户名，密码；")]),a._v(" "),s("li",[a._v("初始化连接数：初始化时，连接池当中创建多少个 Connection 对象；")]),a._v(" "),s("li",[a._v("最大连接数：连接池当中最多存储多少个 Connection 对象；")]),a._v(" "),s("li",[a._v("最小连接数：连接池当中最少存储多少个 Connection 对象；")]),a._v(" "),s("li",[a._v("最大空闲空间：一个被获取的连接对象，在指定时间内没有任何操作，就会被自动释放；")]),a._v(" "),s("li",[a._v("最大等待时间：在指定时间内，尝试获取连接，如果超出时间，则提示获取失败；")])])])]),a._v(" "),s("h3",{attrs:{id:"使用数据池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用数据池"}},[a._v("#")]),a._v(" 使用数据池")]),a._v(" "),s("ul",[s("li",[a._v("连接池使用 "),s("code",[a._v("javax.sql.DataSource")]),a._v(" 接口来表示连接池；")]),a._v(" "),s("li",[a._v("DataSource 和 JDBC 一样，Java 只提供一个接口，具体实现由第三方提供；")]),a._v(" "),s("li",[a._v("常见连接池：\n"),s("ul",[s("li",[a._v("DBCP：Spring 推荐， Tomcat 的数据源使用；")]),a._v(" "),s("li",[a._v("Druid：阿里巴巴实现的连接池，号称是世界上最好的（公司就用这个）；")])])]),a._v(" "),s("li",[a._v("DataSource 数据源和连接池 Connection Pool 是同一个东西，只是叫法不同；")]),a._v(" "),s("li",[a._v("学习连接池主要是学习如何创建 DataSource 对象，再从中获取 Connection 对象；")]),a._v(" "),s("li",[a._v("获得 Connection 对象后，其他操作都和以前一样；")]),a._v(" "),s("li",[a._v("不同的第三方连接池，只是在创建 DataSource 这步上不同；")])]),a._v(" "),s("h4",{attrs:{id:"使用-dbcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-dbcp"}},[a._v("#")]),a._v(" 使用 DBCP")]),a._v(" "),s("ul",[s("li",[a._v("导入 jar 包：\n"),s("ul",[s("li",[a._v("commons-dbcp.ja；")]),a._v(" "),s("li",[a._v("commons-pool.jar；")]),a._v(" "),s("li",[a._v("别忘了 build path；")])])]),a._v(" "),s("li",[a._v("在项目中使用连接池来获取连接：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-45-36.png",alt:"2020-1-27-0-45-36.png"}})]),a._v(" "),s("li",[a._v("配置文件\n"),s("ul",[s("li",[a._v("配置文件是以 .properties 为扩展名的文件；")]),a._v(" "),s("li",[a._v("在上面代码中，我们把连接地址，用户名，密码都写在了代码中；")]),a._v(" "),s("li",[a._v("不便于后期的维护；")]),a._v(" "),s("li",[a._v("配置文件的书写：\n"),s("ul",[s("li",[a._v("创建文件后缀 properties；")]),a._v(" "),s("li",[a._v("不需要加引号和空格：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-46-21.png",alt:"2020-1-27-0-46-21.png"}})])])])])]),a._v(" "),s("li",[a._v("在 Java 中使用配置文件：\n"),s("ul",[s("li",[a._v("将项目目录中创建 Resource Folder；")]),a._v(" "),s("li",[a._v("把配置文件放进去；")]),a._v(" "),s("li",[a._v("然后如下图使用：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-47-13.png",alt:"2020-1-27-0-47-13.png"}})])])]),a._v(" "),s("li",[a._v("改写 DBCP：\n"),s("ul",[s("li",[a._v("直接向 "),s("code",[a._v("BasicDataSourceFactory.createDataSource()")]),a._v(" 方法传入配置对象，自动创建你数据源；")]),a._v(" "),s("li",[a._v("需要注意，配置文件的 Key 如下，不能瞎写，具体可以参考属性配置文档；\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-48-17.png",alt:"2020-1-27-0-48-17.png"}})])])])]),a._v(" "),s("h4",{attrs:{id:"使用-druid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-druid"}},[a._v("#")]),a._v(" 使用 Druid")]),a._v(" "),s("ul",[s("li",[a._v("DruidDataSource 是兼容 DBCP 的，从 DBCP 迁移到 DruidDataSource，只需修改数据源的实现类就可以；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-48-59.png",alt:"2020-1-27-0-48-59.png"}})]),a._v(" "),s("h2",{attrs:{id:"代码重构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码重构"}},[a._v("#")]),a._v(" 代码重构")]),a._v(" "),s("h3",{attrs:{id:"存在的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存在的问题"}},[a._v("#")]),a._v(" 存在的问题")]),a._v(" "),s("ul",[s("li",[a._v("在 DAO 中执行的保存，更新，删除，这些 DML 操作有太多重复代码；")]),a._v(" "),s("li",[a._v("重构代码原则：\n"),s("ul",[s("li",[a._v("同一个类中：\n"),s("ul",[s("li",[a._v("发现多个方法有相同的代码；")]),a._v(" "),s("li",[a._v("则把他们抽象成一个方法；")]),a._v(" "),s("li",[a._v("不同的地方通过参数传递进去；")])])]),a._v(" "),s("li",[a._v("不同类中：\n"),s("ul",[s("li",[a._v("不同类当中共同的代码抽象到一个新类中；")]),a._v(" "),s("li",[a._v("不同的类共享新类的内容；")])])])])])]),a._v(" "),s("h3",{attrs:{id:"抽取-dml-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽取-dml-方法"}},[a._v("#")]),a._v(" 抽取 DML 方法")]),a._v(" "),s("ul",[s("li",[a._v("根据现有情况，可以将保存，更新，删除等 DML 操作抽象成一个方法；")]),a._v(" "),s("li",[a._v("传入两个参数：\n"),s("ul",[s("li",[a._v("SQL 语句 / 语句模板；")]),a._v(" "),s("li",[a._v("可变参数，设置语句的参数值；")])])]),a._v(" "),s("li",[a._v("返回值：int 类型，受影响的行数；\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-54-6.png",alt:"2020-1-27-0-54-6.png"}})]),a._v(" "),s("li",[a._v("修改 save，delete，update 方法：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-54-31.png",alt:"2020-1-27-0-54-31.png"}})])]),a._v(" "),s("h3",{attrs:{id:"抽象出-crub-模板类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象出-crub-模板类"}},[a._v("#")]),a._v(" 抽象出 CRUB 模板类")]),a._v(" "),s("ul",[s("li",[a._v("在上一步我们抽出了通用的 DML 执行方法；")]),a._v(" "),s("li",[a._v("可以想到，这个方法也会在别的 DAO 实现类中使用；")]),a._v(" "),s("li",[a._v("那么我们可以再把这个方法抽象到一个 CRUB 模板类；")]),a._v(" "),s("li",[a._v("注意方法类型是 "),s("code",[a._v("static")]),a._v("；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-55-8.png",alt:"2020-1-27-0-55-8.png"}})]),a._v(" "),s("h3",{attrs:{id:"抽取-dql-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽取-dql-方法"}},[a._v("#")]),a._v(" 抽取 DQL 方法")]),a._v(" "),s("ul",[s("li",[a._v("同理，DQL 查询方法也可以抽取到 CRUB 模板类中：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-56-16.png",alt:"2020-1-27-0-56-16.png"}})]),a._v(" "),s("li",[a._v("之后改写 "),s("code",[a._v("get")]),a._v("，"),s("code",[a._v("getAll")]),a._v(" 方法：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-56-6.png",alt:"2020-1-27-0-56-6.png"}})]),a._v(" "),s("li",[a._v("存在问题：\n"),s("ul",[s("li",[a._v("上面 "),s("code",[a._v("executeQuery")]),a._v(" 方法中， 类型写死了；")]),a._v(" "),s("li",[a._v("原因是不知道会去处理什么类型的对象；")])])])]),a._v(" "),s("h3",{attrs:{id:"结果集处理器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结果集处理器"}},[a._v("#")]),a._v(" 结果集处理器")]),a._v(" "),s("ul",[s("li",[a._v("解决方法：\n"),s("ul",[s("li",[a._v("定义一个处理结果集接口；\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-57-27.png",alt:"2020-1-27-0-57-27.png"}})]),a._v(" "),s("li",[a._v("在具体的 DAO 中实现接口；\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-57-46.png",alt:"2020-1-27-0-57-46.png"}})]),a._v(" "),s("li",[a._v("创建 “接口实现对象”并传给查询处理方法：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-57-57.png",alt:"2020-1-27-0-57-57.png"}})]),a._v(" "),s("li",[a._v("在查询方法中调用处理结果集方法：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-58-12.png",alt:"2020-1-27-0-58-12.png"}})])])])]),a._v(" "),s("h3",{attrs:{id:"使用泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用泛型"}},[a._v("#")]),a._v(" 使用泛型")]),a._v(" "),s("ul",[s("li",[a._v("上面结果集处理器，返回 List 类型对象；")]),a._v(" "),s("li",[a._v("但是我们希望可以自己设定要返回的类型；")]),a._v(" "),s("li",[a._v("我们还可以用“泛型”来改写上面代码；")]),a._v(" "),s("li",[a._v("声明接口时定义返回类型为 T：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-59-32.png",alt:"2020-1-27-0-59-32.png"}})]),a._v(" "),s("li",[a._v("在实现类中去决定具体返回类型：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-59-44.png",alt:"2020-1-27-0-59-44.png"}})]),a._v(" "),s("li",[a._v("查询方法返回类型也定为 T，具体类型根据参数来决定：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-0-59-56.png",alt:"2020-1-27-0-59-56.png"}})]),a._v(" "),s("li",[a._v("在创建结果集处理器时指定类型：\n"),s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-1-0-16.png",alt:"2020-1-27-1-0-16.png"}})])]),a._v(" "),s("h2",{attrs:{id:"内省"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内省"}},[a._v("#")]),a._v(" 内省")]),a._v(" "),s("h3",{attrs:{id:"class-类型介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-类型介绍"}},[a._v("#")]),a._v(" Class 类型介绍")]),a._v(" "),s("ul",[s("li",[a._v("Class 类是一个关于类的类型；")]),a._v(" "),s("li",[a._v("通过 Class 类我们可以获得关于一个类的相关信息；")]),a._v(" "),s("li",[a._v("通过一个类的 "),s("code",[a._v(".class")]),a._v(" 属性可以获得它对应的 Class 对象；")]),a._v(" "),s("li",[a._v("Class 对象执行 "),s("code",[a._v("newInstance()")]),a._v(" 方法，可以通过字节码创建对应的对象；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-23-15-26.png",alt:"2020-1-27-23-15-26.png"}})]),a._v(" "),s("h3",{attrs:{id:"什么是内省"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是内省"}},[a._v("#")]),a._v(" 什么是内省")]),a._v(" "),s("ul",[s("li",[a._v("内省用来查看和操作，符合 JavaBean 规范（属性有 getter 和 setter）的类的属性；")]),a._v(" "),s("li",[a._v("通过 Introspector 类来进行内省操作；")]),a._v(" "),s("li",[s("code",[a._v("Introspector.getBeanInfo(A.class, B.class)")]),a._v(" "),s("ul",[s("li",[a._v("获取指定类的信息；")]),a._v(" "),s("li",[a._v("第一个参数指定要获取信息的类，此方法还会获取其父类的信息；")]),a._v(" "),s("li",[a._v("第二个参数指定到哪个父类为止，不再继续往上获取；")]),a._v(" "),s("li",[a._v("🌰 假如，A 类，继承 B 类。上面 👆 这种调用方法，就只会获取 A 类自己定义的信息，不会管 B 类；")]),a._v(" "),s("li",[a._v("返回值为 BeanInfo 对象；")])])]),a._v(" "),s("li",[a._v("BeanInfo 类型执行 "),s("code",[a._v("getPropertyDescriptors")]),a._v(" 方法，返回指定类的所有属性信息，返回类型是 "),s("code",[a._v("PropertyDescriptor")]),a._v(" 数组；")]),a._v(" "),s("li",[a._v("获取属性名："),s("code",[a._v("pd.getName()")])]),a._v(" "),s("li",[a._v("获取 get 方法："),s("code",[a._v("pd.getReadMethod()")])]),a._v(" "),s("li",[a._v("获取 set 方法："),s("code",[a._v("pd.getWriteMethod()")])]),a._v(" "),s("li",[a._v("动态调用方法："),s("code",[a._v("方法名.invode(对象名称, 值)")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-27-23-23-20.png",alt:"2020-1-27-23-23-20.png"}})]),a._v(" "),s("h3",{attrs:{id:"用内省重构代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用内省重构代码"}},[a._v("#")]),a._v(" 用内省重构代码")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-1-20-1-34.png",alt:"2020-2-1-20-1-34.png"}})]),a._v(" "),s("ul",[s("li",[a._v("之前的结果集处理器仍旧是可以继续重构的；")]),a._v(" "),s("li",[a._v("该类专门将结果集中的数据封装成一个 Student 对象；")]),a._v(" "),s("li",[a._v("如果我们有多个 domain，就需要多个结果集处理器；")]),a._v(" "),s("li",[a._v("但其实，这些结果集处理器做的都是同一件事：\n"),s("ul",[s("li",[a._v("把结果集中的每一个数据封装成对象；")]),a._v(" "),s("li",[a._v("设置对象的属性；")])])]),a._v(" "),s("li",[a._v("通过"),s("strong",[a._v("内省")]),a._v("就可以抽象出一个通用的结果集处理器；")])]),a._v(" "),s("p",[a._v("规定：")]),a._v(" "),s("ul",[s("li",[a._v("数据表中的列名必须和类的属性名一致；")]),a._v(" "),s("li",[a._v("规定数据表中的数据类型必须和类的属性的数据类型匹配；")])]),a._v(" "),s("p",[a._v("编写：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-1-20-14-50.png",alt:"2020-2-1-20-14-50.png"}})]),a._v(" "),s("h2",{attrs:{id:"封装成-jar-包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装成-jar-包"}},[a._v("#")]),a._v(" 封装成 jar 包")]),a._v(" "),s("p",[a._v("下面看一下如何把刚刚写的通用结果集处理器，打包成一个 jar 包。")]),a._v(" "),s("p",[a._v("exports -> JAR file")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-1-20-18-35.png",alt:"2020-2-1-20-18-35.png"}})]),a._v(" "),s("p",[a._v("选择要导出的文件 -> 然后选择要导出的位置 -> Finish")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-1-20-19-14.png",alt:"2020-2-1-20-19-14.png"}})]),a._v(" "),s("h2",{attrs:{id:"dbutils"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dbutils"}},[a._v("#")]),a._v(" DBUtils")]),a._v(" "),s("h4",{attrs:{id:"什么是-dbutils"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-dbutils"}},[a._v("#")]),a._v(" 什么是 DBUtils")]),a._v(" "),s("ul",[s("li",[a._v("DBUtils 是 Apache 编写的数据库操作工具；")]),a._v(" "),s("li",[a._v("封装了对 JDBC 的操作，简化了 JDBC 操作；")])]),a._v(" "),s("h4",{attrs:{id:"常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[a._v("#")]),a._v(" 常用方法")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("QueryRunnder(DataSorce ds)")]),a._v("：创建连接；")]),a._v(" "),s("li",[s("code",[a._v("update(String sql, Object...obj)")]),a._v("：执行更新；")]),a._v(" "),s("li",[s("code",[a._v("query(String sql, ResultSetHandler<T> rsh, Object...params)")]),a._v("：执行查询；")]),a._v(" "),s("li",[s("code",[a._v("query(sql, new BeanHandler<Student>(Student.class), params)")]),a._v("：把查询到结果封装成一个指定对象；")]),a._v(" "),s("li",[s("code",[a._v("query(sql, new BeanListHandler<Student>(Student.class))")]),a._v("：把查询结果封装成一个指定对象集合；")]),a._v(" "),s("li",[s("code",[a._v("qr.query(sql, new ScalarHandler())")]),a._v("：查询单个值，返回一个 Long 类型")]),a._v(" "),s("li",[s("code",[a._v("qr.query(sql, new MapListHandler())")]),a._v("：把查询结果封装成一个 Map 集合")]),a._v(" "),s("li",[s("code",[a._v('query(sql, new ColumnListHandler("列名"))')]),a._v("：查询指定的列")])]),a._v(" "),s("h4",{attrs:{id:"使用-dbutils-改写代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-dbutils-改写代码"}},[a._v("#")]),a._v(" 使用 DBUtils 改写代码")]),a._v(" "),s("p",[a._v("引入 jar 包，并且编译一下（Build Path）。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-31-14-46-48.png",alt:"2020-1-31-14-46-48.png"}})]),a._v(" "),s("p",[a._v("我们先改 "),s("code",[a._v("save")]),a._v(" 方法。同理其他的 DML 操作也可以用下面的改法。")]),a._v(" "),s("p",[a._v("在 StudentDaoImpl 中，传入数据源到 "),s("code",[a._v("QueryRunner")]),a._v("，创建连接。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-31-14-54-5.png",alt:"2020-1-31-14-54-5.png"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-31-14-55-31.png",alt:"2020-1-31-14-55-31.png"}})]),a._v(" "),s("p",[a._v("通过 "),s("code",[a._v("updata")]),a._v(" 方法来进行操作：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-1-20-25-59.png",alt:"2020-2-1-20-25-59.png"}})]),a._v(" "),s("p",[a._v("下面来改 DQL 操作。")]),a._v(" "),s("p",[a._v("通过 "),s("code",[a._v("query")]),a._v(" 方法来进行查询：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-1-20-29-38.png",alt:"2020-2-1-20-29-38.png"}})]),a._v(" "),s("p",[a._v("如果查询结果是多个的话，要注意 "),s("code",[a._v("query")]),a._v(" 方法的参数：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-1-20-31-18.png",alt:"2020-2-1-20-31-18.png"}})])])}),[],!1,null,null,null);t.default=_.exports}}]);