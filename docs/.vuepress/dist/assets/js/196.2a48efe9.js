(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{404:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"assembly-language-fundamentals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assembly-language-fundamentals"}},[e._v("#")]),e._v(" Assembly Language Fundamentals")]),e._v(" "),a("h2",{attrs:{id:"a-template-for-assembly-language-programs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-template-for-assembly-language-programs"}},[e._v("#")]),e._v(" A Template for Assembly Language Programs")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Irvine32.inc")]),e._v(": library procedures and setup information for IA-32\n"),a("ul",[a("li",[a("strong",[e._v(".386")]),e._v(": identifies 80386 as required processor. Use .586 for Pentium.")]),e._v(" "),a("li",[a("strong",[e._v(".model")]),e._v(": set the running mode to 32-bit protected mode and use the MS-Windows calling convention")])])]),e._v(" "),a("li",[a("strong",[e._v("main PROC")]),e._v(": label of the entry point of the program\n"),a("ul",[a("li",[e._v("first instruction to execute")])])]),e._v(" "),a("li",[a("strong",[e._v("END")]),e._v(": marks the end of the program and identifies the program’s startup procedure")]),e._v(" "),a("li",[a("strong",[e._v("exit")]),e._v(": macro that halts the program then returns the control to the caller (here the Win32 console)")]),e._v(" "),a("li",[a("strong",[e._v(".data and .code")]),e._v(": beginning of the data segment and code segment")])]),e._v(" "),a("div",{staticClass:"language-assembly extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".386\n.model flat, stdcall\n.stack 4096\nExitProcess PROTO, dwExitCode: DWORD\nDumpRegs PROTO\n\n.data\n   ;data declarations\n.code\nmain PROC\n  … ;instructions here\n  call DumpRegs\n  INVOKE ExitProcess, 0\nmain ENDP\nEND main\n")])])]),a("h2",{attrs:{id:"the-flat-memory-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-flat-memory-model"}},[e._v("#")]),e._v(" The FLAT Memory Model")]),e._v(" "),a("ul",[a("li",[e._v("The "),a("code",[e._v(".model flat")]),e._v(" directive tells the assembler to generate code that will run in "),a("strong",[e._v("protected mode")]),e._v(" and in "),a("strong",[e._v("32-bit mode")])]),e._v(" "),a("li",[e._v("The directives "),a("code",[e._v(".code")]),e._v(" and "),a("code",[e._v(".data")]),e._v(" mark the beginning of the code and data segments. They are used only for "),a("strong",[e._v("protection")]),e._v(":\n"),a("ul",[a("li",[a("code",[e._v(".code")]),e._v(" is read-only")]),e._v(" "),a("li",[a("code",[e._v(".data")]),e._v(" is read and write")])])])]),e._v(" "),a("h2",{attrs:{id:"example-adding-and-subtracting-integers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-adding-and-subtracting-integers"}},[e._v("#")]),e._v(" Example: Adding and Subtracting Integers")]),e._v(" "),a("div",{staticClass:"language-assembly extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("TITLE Add and Subtract           (AddSub.asm)\n\n; This program adds and subtracts 32-bit integers.\n\nINCLUDE Irvine32.inc\n.code\nmain PROC\n\tmov eax,10000h\t; EAX = 10000h\n\tadd eax,40000h\t; EAX = 50000h\n\tsub eax,20000h\t; EAX = 30000h\n\tcall DumpRegs\t; display registers\n\texit\nmain ENDP\nEND main\n")])])]),a("h2",{attrs:{id:"assemble-link-execute-cycle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assemble-link-execute-cycle"}},[e._v("#")]),e._v(" Assemble-Link Execute Cycle")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-28-11-9-38.png",alt:"2020-1-28-11-9-38.png"}})]),e._v(" "),a("h4",{attrs:{id:"listing-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listing-file"}},[e._v("#")]),e._v(" Listing File")]),e._v(" "),a("ul",[a("li",[e._v("Use it to see how your program is compiled")]),e._v(" "),a("li",[e._v("Contains：\n"),a("ul",[a("li",[e._v("source code")]),e._v(" "),a("li",[e._v("addresses")]),e._v(" "),a("li",[e._v("object code (machine language)")]),e._v(" "),a("li",[e._v("segment names")]),e._v(" "),a("li",[e._v("symbols (variables, procedures, and constants)")])])])]),e._v(" "),a("h4",{attrs:{id:"map-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-file"}},[e._v("#")]),e._v(" Map File")]),e._v(" "),a("ul",[a("li",[e._v("Information about each program segment:\n"),a("ul",[a("li",[e._v("starting address")]),e._v(" "),a("li",[e._v("ending address")]),e._v(" "),a("li",[e._v("size")]),e._v(" "),a("li",[e._v("segment type")])])])]),e._v(" "),a("h2",{attrs:{id:"directives-and-instructions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#directives-and-instructions"}},[e._v("#")]),e._v(" Directives and Instructions")]),e._v(" "),a("ul",[a("li",[e._v("Assembly language statements are either "),a("strong",[e._v("directives")]),e._v(" or "),a("strong",[e._v("instructions")])]),e._v(" "),a("li",[a("strong",[e._v("Instructions")]),e._v(" are executable statements. They are translated by the assembler into machine instructions")]),e._v(" "),a("li",[e._v("An instruction contains:\n"),a("ul",[a("li",[e._v("Label (optional)")]),e._v(" "),a("li",[e._v("Mnemonic (required) ; also called “op-code”")]),e._v(" "),a("li",[e._v("Operand (depends on the instruction)")]),e._v(" "),a("li",[e._v("Comment (optional)")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("call MySub  ;transfer of control\nmov  ax,5   ;data transfer\n")])])]),a("ul",[a("li",[a("strong",[e._v("Directives")]),e._v(" tells the assembler how to generate machine code, allocate storage, or define segments. They do not execute at run time;")]),e._v(" "),a("li",[e._v("Used to declare code, data areas, select memory model, declare procedures, etc.")]),e._v(" "),a("li",[e._v("not case sensitive")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("count BYTE 50 ;creates 1 byte of storage initialized to 50\n")])])]),a("h2",{attrs:{id:"mnemonics-and-operands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mnemonics-and-operands"}},[e._v("#")]),e._v(" Mnemonics and Operands")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Instruction Mnemonics")]),e._v(" "),a("ul",[a("li",[e._v("memory aid")]),e._v(" "),a("li",[e._v("examples: MOV, ADD, SUB, MUL, INC, DEC")])])]),e._v(" "),a("li",[a("p",[e._v("Operands")]),e._v(" "),a("ul",[a("li",[e._v("constant")]),e._v(" "),a("li",[e._v("constant expression")]),e._v(" "),a("li",[e._v("register")]),e._v(" "),a("li",[e._v("memory (data label)")])])])]),e._v(" "),a("h2",{attrs:{id:"data-definition-statement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-definition-statement"}},[e._v("#")]),e._v(" Data Definition Statement")]),e._v(" "),a("ul",[a("li",[e._v("A data definition statement declares a variable and allocates memory for the variable.")]),e._v(" "),a("li",[e._v("All variable declarations are in the "),a("strong",[e._v(".data")]),e._v(" segment of programs")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-28-11-23-58.png",alt:"2020-1-28-11-23-58.png"}})]),e._v(" "),a("h4",{attrs:{id:"defining-byte-and-sbyte-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defining-byte-and-sbyte-data"}},[e._v("#")]),e._v(" Defining BYTE and SBYTE Data")]),e._v(" "),a("ul",[a("li",[e._v("8-bit unsigned integer and 8-bit signed integer type")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-28-11-24-55.png",alt:"2020-1-28-11-24-55.png"}})]),e._v(" "),a("h4",{attrs:{id:"defining-s-byte-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defining-s-byte-arrays"}},[e._v("#")]),e._v(" Defining [S]Byte Arrays")]),e._v(" "),a("ul",[a("li",[e._v("A question mark (?) in the initializer leaves the initial value of the variable "),a("strong",[e._v("undefined")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-28-11-25-31.png",alt:"2020-1-28-11-25-31.png"}})]),e._v(" "),a("h4",{attrs:{id:"defining-strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defining-strings"}},[e._v("#")]),e._v(" Defining Strings")]),e._v(" "),a("ul",[a("li",[e._v("A string is implemented as an array of characters")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-28-11-27-6.png",alt:"2020-1-28-11-27-6.png"}})]),e._v(" "),a("ul",[a("li",[e._v("To continue a single string across multiple lines, end each line with a "),a("strong",[e._v("comma")]),e._v(":")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-28-11-28-7.png",alt:"2020-1-28-11-28-7.png"}})]),e._v(" "),a("ul",[a("li",[a("p",[e._v("End-of-line character sequence:")]),e._v(" "),a("ul",[a("li",[e._v("0Dh = carriage return ; the ‘enter’ or ‘return’ character")]),e._v(" "),a("li",[e._v("0Ah = line feed ; the ‘beginning-of-the-line’ character")])])]),e._v(" "),a("li",[a("p",[e._v("Line continuation character "),a("code",[e._v("\\")])]),e._v(" "),a("ul",[a("li",[e._v("Concatenates two source code lines into a single statement")])])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-28-11-30-14.png",alt:"2020-1-28-11-30-14.png"}})]),e._v(" "),a("h4",{attrs:{id:"dup-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dup-operator"}},[e._v("#")]),e._v(" DUP Operator")]),e._v(" "),a("ul",[a("li",[e._v("Use DUP to allocate (create space for) an array of any type or for a string.")]),e._v(" "),a("li",[e._v("DUP must be used only with data allocation directives.")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-28-11-31-35.png",alt:"2020-1-28-11-31-35.png"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);