(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{256:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),a("p",[t._v('在 Node.js 系列的第一节里, 我会先介绍 Node.js 的一些基本概念. 让你在看完这篇文章时, 能对 "什么是 Node.js?", "Node.js 能干什么?", "为什么用 Node.js?" 这三个问题有个基本的回答.')]),t._m(1),a("p",[t._v("先来看看 "),a("a",{attrs:{href:"http://nodejs.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node 官网"),a("OutboundLink")],1),t._v(" 给的答案:")]),t._m(2),a("p",[t._v("基本上, \b很多人第一次看到上面这段定义的时候, 完全搞不懂\b它在说什么...")]),a("p",[t._v("下面我就来逐步解释 Node.js \b的这段定义.")]),t._m(3),a("p",[t._v('看到这句话后, 你可能第一个疑问是 🤔 "什么是 Chrome V8 引擎?"')]),a("p",[t._v('在解答这个问题之前, 回到我们熟悉的前端领域, 我先问另一个问题 🤔 "JavaScript 代码是如何在浏览器中运行的?"')]),a("p",[t._v('简单来说, 我们所写的 JavaScript 源代码, 是为了给人看的, 浏览器加载 JavaScript 代码后, 它是看不懂的, 需要翻译成机器码, 也就是 "机器的语言", 才可以让机器执行.  在浏览器中, JavaScript 引擎负责进行代码的解释.  V8 引擎是 Chrome 浏览器所在用的 JavaScript 引擎.  V8 引擎以 C++ 实现, 支持跨平台, 就是说可以在各种操作系统上使用, Node.js 基于 V8 引擎, 意味着它可以让 JavaScript 代码脱离浏览器的束缚, 在各种各样不同的操作系统上运行.')]),t._m(4),t._m(5),t._m(6),a("p",[t._v('在说 "非阻塞" \b之前, 先了解什么是 "阻塞".  从字面上理解, "阻塞" 就是堵住了, 通不过的意思.  在计算机中, 程序在线程内按顺序被执行, 后面的操作必须等前面的操作结束才能被执行.  如果前一个操作耗时很长, 后面的操作就要一直等着, 直到前面的操作完成.  \b这个等待的状态, 叫做 "阻塞".')]),t._m(7),a("p",[t._v('现在再来说说什么是 "Input/Output 操作".  从字面上翻译就是 "输入/输出", 那输的是什么呢?  简单说就是 "信息".  在程序执行过程中如果需要操作系统进行 磁盘读写 或 网络通信, 我们就都统称为 "I/O 操作".  例如, 从服务器获取页面, 写入\b文件, 提交表单, 读取数据库都是属于这个范畴的.  凡是这一类操作, 直观感受是 "花的\b时间较长".  那么在代码执行时, I/O 操作时, 往往要让后面的操作等很长时间.  整条线程一直处于等待的状态, 这种 I/O 操作方式称为 "阻塞式 I/O".  拿生活举例, 游戏没下载完, 我就只能干等着玩不了.')]),a("p",[t._v("在程序设计中, 对于高并发的任务, 在线程阻塞的情况下, 整条线程不能执行程序, 这会导致任务处理速度极慢.  常见的方案是通过多线程来解决. 但每条线程的利用率并没有增加, 同时也会导致硬件成本高昂.")]),t._m(8),t._m(9),t._m(10),a("p",[t._v("继续上一段的内容.  在 Node.js 中, 当线程遇到 I/O 操作时，会先把 I/O 操作封装成一个请求对象, 然后放到一个\b请求队列中去.  此时主线程并不会执行它，代码也不会被阻塞，而是继续往下走，直到主线程代码全部执行完毕。")]),a("p",[t._v('主线程执行完毕后, \b之前放在请求队列中的请求对象, 会被 Node.js 的执行模型 - "事件循环" 处理.  事件循环从请求队列中然后从\b "线程池" 分配空闲的线程去执行 I/O 操作, 没被分配上的就先等着.  期间如果遇到了新的 I/O 操作, 就像之前一样, 封装成\b请求对象然后从后插入到请求队列中.')]),a("p",[t._v('前面提到, 操作系统通过 "事件" 来通知\b Node "I/O 操作" 完成.  Node 中有 "事件监听器", 当接收到事件, 监听器把事件相应的 "处理器" 添加到事件队列.  当所有除事件队列\b之外的程序代码都被处理完了, 事件队列中的事件处理器会被逐个\b执行.  当队列中已经没有未处理的事件了, 程序结束.  可以看出程序的结束与否, 取决于事件是否被全部处理完毕, \b因此称 Node 是事件驱动的.  可能此时你还是\b半懵半懂, 下面我会就一些问题详细解释.')]),a("hr"),a("p",[t._v('当 I/O 操作完成, 操作系统以 "事件" 的形式去通知 Node.  Node 收到事件, 并把它加入到事件队列.  事件队列中的事件会被依次处理, 如果过程中遇到新的事件, 则依然是添加到队列中.  等队列中已经没有未处理的事件时, 程序结束.')]),t._m(11),a("p",[t._v("如果不好理解的话, 可以想象老王一个人去钓鱼, 他把鱼竿架好之后, 就在旁边等着, 等鱼漂抖动的时候就拉杆.  在等待的这段时间里, 他是什么也不干的. 因为怕鱼上钩自己看不到, 老王还一直守在鱼竿旁, 也不做其他的事情.  过了几天, 老王觉得这样效率低, 就买了十把鱼竿同时架起来.  在同一段时间内, 这种方法钓的鱼的确多了, 但老王在一个时间点只能去操纵一个鱼竿, 单个鱼竿的效率很低, 老王仍旧\b一直守在鱼竿旁, 在等的时候不能做其他的事.  \b\b又过了几天, 老王一个发明家朋友给了他一个自动通知鱼竿, 鱼上钩后, 鱼竿会给老王发微信通知他过来收鱼.  这样老王就可以在等鱼上钩的时间里去一旁\b玩游戏了.")]),t._m(12),a("p",[t._v("下面这两张图的对比, 可以帮助理解上面文字.")]),a("p",[t._v("多线程阻塞 I/O:")]),t._m(13),a("p",[t._v("在一条线程中, 如果遇到 I/O 操作, 计算2 必须等 I/O 操作结束才可以得到执行.  期间线程一直处于等待状态, 利用率低.  通过增加\b线程\b数量, 可以在一条线程等待 I/O 操作结果的时候, 把其他任务分配给另一条线程.  以此来处理高并发任务. \b")]),a("p",[t._v("单线程非阻塞 I/O:")]),t._m(14),a("p",[t._v("\b所有任务只在一条线程中得到处理, 遇到 I/O 操作, 线程并不等待其结果, 而是\b继续处理其他任务.  等 I/O 操作结束后, 线程再处理其后续任务.")]),t._m(15),a("p",[t._v('前面提到, 操作系统通过 "事件" 来通知\b Node "I/O 操作" 完成.  Node 中有 "事件监听器", 当接收到事件, 监听器把事件相应的 "处理器" 添加到事件队列.  当所有除事件队列\b之外的程序代码都被处理完了, 事件队列中的事件处理器会被逐个\b执行.  当队列中已经没有未处理的事件了, 程序结束.  可以看出程序的结束与否, 取决于事件是否被全部处理完毕, \b因此称 Node 是事件驱动的.  可能此时你还是\b半懵半懂, 下面我会就一些问题详细解释.')]),t._m(16),t._m(17),a("p",[t._v('在编程中, "事件" 是你在编程时系统内发生的动作或者发生的事请. 当事件发生, 系统会通知你, 并在你愿意的情况下可以对其做出相应的操作.  以前端举例, 在网页的\b搜索栏中, 用户点击搜索\b按钮.  发生在这个按钮上的点击动作是一个事件.  前端 JS 代码接收到\b点击事件后, 执行搜索操作.')]),t._m(18),a("p",[t._v('最常见是以调用事件处理函数来被处理的, 这个处理函数称为回调函数.  Node 通过一个 "事件循环" 来检查是否有事件待处理, 有的话就取出事件的回调函数, 执行后进入下一个循环.  等所有的事件都被处理完, 事件循环已经检测不到任何待处理事件了, 程序结束.')]),t._m(19),t._m(20),t._m(21),t._m(22),a("p",[t._v("根据\b计算机平台的不同, 安装方法也略有差异.  本文侧重于概念, \b具体实操, 可能每位读者\b因\b偏好不同, 方法各异.  \b在此就不再赘述了.")]),a("p",[t._v("最方便的方式是直接上官网去下载对应平台的源码或安装包, \b或者通过包管理器直接安装.")]),a("ul",[a("li",[a("a",{attrs:{href:"https://nodejs.org/zh-cn/download/",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载 Node.js 源码或预编译安装包"),a("OutboundLink")],1)]),a("li",[a("a",{attrs:{href:"https://nodejs.org/zh-cn/download/package-manager/",target:"_blank",rel:"noopener noreferrer"}},[t._v("包管理器方式安装 Node.js"),a("OutboundLink")],1)])]),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"基础概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础概念","aria-hidden":"true"}},[this._v("#")]),this._v(" 基础概念")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"什么是-node-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-node-js","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是 Node.js?")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\nNode.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"基于-chrome-v8-引擎的-javascript-运行环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于-chrome-v8-引擎的-javascript-运行环境","aria-hidden":"true"}},[this._v("#")]),this._v(" 基于 Chrome V8 引擎的 JavaScript 运行环境")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么再\b总结一下, "),s("strong",[this._v("Node.js 不是一门语言, 是一个可以\b让 JavaScript 代码在\b各种各样的平台上得到执行的运行环境.  因为其基于 Chrome V8 引擎, 所以可以支持 JavaScript 语法")]),this._v(".")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"非阻塞式-i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞式-i-o","aria-hidden":"true"}},[this._v("#")]),this._v(" 非阻塞式 I/O")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v('"非阻塞式 I/O", 我知道这几个字看起来让人有点懵.  别着急, 那让我换个说法, "'),s("strong",[this._v("不会\b阻塞 JavaScript 程序执行的 Input/Output 操作")]),this._v('", 这样会不会清楚一点? 可能你还是不太懂, 那下面我就逐字地解释.')])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("线程: 程序执行流的最小单元。程序代码在其中被 CPU 依次处理.  在一条线程中, 同一时间, 只有一段代码被被执行, 或等待被执行.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("并发: 在同一个时间段中, 几个\b任务同时进行.  但是在任意时间点, 有且只有一段代码在执行.  简单说, 在一段时间中, 两个任务都可以完成, 但是在每一个时间点, 只能执行其中一个任务, \b两个任务不能在一个时间点上同时进行.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 Node.js 中, JavaScript 代码在一个"),s("strong",[this._v("单一的主线程")]),this._v('中进行处理, 同一时间只能处理一项任务.  为了处理高并发, 采用了 "'),s("strong",[this._v("非阻塞式 I/O")]),this._v('", 也可以称为 "\b异步式 I/O".  当线程遇到 I/O 操作时，不会以阻塞的方式去等待操作完成.  而是将 I/O 操作先放到另一个地方, 然后 Node.js 继续执行下一条代码.  等主线程代码全部执行完毕后, 再去处理 I/O 操作.  具体的\b过程, 在\b下一段介绍.')])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"事件驱动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件驱动")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"做个比喻"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#做个比喻","aria-hidden":"true"}},[this._v("#")]),this._v(" \b做个比喻")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"多线程阻塞-i-o-vs-单线程非阻塞-i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程阻塞-i-o-vs-单线程非阻塞-i-o","aria-hidden":"true"}},[this._v("#")]),this._v(" 多线程阻塞 I/O vs 单线程非阻塞 I/O")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://i.imgur.com/xRtr4On.png",alt:"Screen Shot 2018-09-01 at 11.42.35 PM"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://i.imgur.com/mnWUOay.png",alt:"Screen Shot 2018-09-01 at 11.42.42 PM"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"事件驱动-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件驱动")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://i.imgur.com/x4zFCKk.png",alt:"Screen Shot 2018-09-02 at 4.03.56 PM"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"什么是事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是事件?")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"事件如何被处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件如何被处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件如何被处理?")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://i.imgur.com/FxGupL3.png",alt:"Screen Shot 2018-09-02 at 4.11.17 PM"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"node-js-能干什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js-能干什么","aria-hidden":"true"}},[this._v("#")]),this._v(" Node.js 能干什么?")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"为什么用-node-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么用-node-js","aria-hidden":"true"}},[this._v("#")]),this._v(" 为什么用 Node.js?")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"安装-node-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-node-js","aria-hidden":"true"}},[this._v("#")]),this._v(" 安装 Node.js")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"node-js-代码实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js-代码实例","aria-hidden":"true"}},[this._v("#")]),this._v(" Node.js 代码实例")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" http "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("require")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'http'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("myNodeServer")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("writeHead")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("200")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token string"}},[t._v("'Content-type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token string"}},[t._v("'text/plain'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("write")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'Hello World'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("end")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nhttp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("createServer")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myNodeServer"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("listen")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("3000")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("//监听 3000 端口")]),t._v("\n\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'Server is running!'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("创建一个空文件, 把上面代码复制到其中, 文件后缀改成 "),s("code",[this._v(".js")]),this._v(".  然后在命令行中, 用 "),s("code",[this._v("node")]),this._v(" 命令执行刚刚的文件 ( 注意文件所在目录位置和文件名 ) .")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://i.imgur.com/ra39I8F.png",alt:"Screen Shot 2018-09-02 at 10.48.34 PM"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v('如果运行成功你的命令行上会显示 "Server is running!" 这段话.  然后用浏览器访问 '),s("code",[this._v("http://localhost:3000/")]),this._v(' 这个地址.  你会看到网页上显示 "Hello World".  至此你就实现了一个简易 HTTP 服务器.')])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://i.imgur.com/I8L6OYq.png",alt:"Screen Shot 2018-09-02 at 10.45.24 PM"}})])}],!1,null,null,null);s.default=n.exports}}]);