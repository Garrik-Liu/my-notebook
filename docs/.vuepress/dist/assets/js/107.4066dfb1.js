(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{333:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"核心模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心模块"}},[t._v("#")]),t._v(" 核心模块")]),t._v(" "),a("p",[t._v("核心模块是 Node.js 的心脏，它由一些精简而高效的库组成，为 Node.js 提供了基本的 API。")]),t._v(" "),a("h2",{attrs:{id:"event-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-模块"}},[t._v("#")]),t._v(" Event 模块")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://nodejs.cn/api/events.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Events 文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Node 是\b事件驱动的, events 是 Node 最重要的模块.")]),t._v(" "),a("h3",{attrs:{id:"事件发射器-eventemitter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件发射器-eventemitter"}},[t._v("#")]),t._v(" 事件发射器 EventEmitter")]),t._v(" "),a("p",[t._v("events 模块只提供了一个对象: "),a("code",[t._v("events.EventEmitter")]),t._v("。")]),t._v(" "),a("p",[t._v("EventEmitter 的核心就 是 事件发射 与 事件监听器 功能的封装。")]),t._v(" "),a("p",[t._v("EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。")]),t._v(" "),a("p",[t._v("对于每个事件，EventEmitter 支持若干个事件监听器。当事件发射时，注册到这个事件的 事件监听器 被依次调用，事件参数 作为 回调函数参数 传递。")]),t._v(" "),a("p",[t._v("例子:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入 events 模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" events "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'events'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 eventEmitter 对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" emitter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EventEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nemitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'someEvent'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'listener1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nemitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'someEvent'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'listener2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nemitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'someEvent'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Garrik'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1997")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("结果是:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("listner1 Garrik 1997\nlistner2 Garrik 1997\n")])])]),a("p",[a("code",[t._v("emitter")]),t._v(" 为事件 "),a("code",[t._v("someEvent")]),t._v(" 注册了两个事件监听器，然后发射了 "),a("code",[t._v("someEvent")]),t._v(" 事件。运行结果中可以看到两个事件监听器回调函数被先后调用。")]),t._v(" "),a("h3",{attrs:{id:"监听器的-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监听器的-this"}},[t._v("#")]),t._v(" 监听器的 this")]),t._v(" "),a("p",[t._v("当一个普通的监听器函数被 EventEmitter 调用时，标准的 "),a("code",[t._v("this")]),t._v(" 关键词会被设置指向监听器所附加的 EventEmitter。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" event "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'events'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EventEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nevent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'someEvent'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this 指向 event")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nevent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'someEvent'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("可以使用 ES6 的箭头函数作为监听器。但是这样 "),a("code",[t._v("this")]),t._v(" 关键词就不再指向 EventEmitter 实例")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'someEvent'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this 指向 event 所处作用域")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"eventemitter-常用的-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-常用的-api"}},[t._v("#")]),t._v(" EventEmitter 常用的 API")]),t._v(" "),a("h4",{attrs:{id:"eventemitter-on-event-listener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-on-event-listener"}},[t._v("#")]),t._v(" EventEmitter.on(event, listener)")]),t._v(" "),a("p",[t._v("为指定事件注册一个监听器，接受一个字符串 "),a("code",[t._v("event")]),t._v(" 和一个回调函数 "),a("code",[t._v("listener。")])]),t._v(" "),a("p",[a("code",[t._v("emitter.addListener(eventName, listener)")]),t._v(" 是它的别名")]),t._v(" "),a("h4",{attrs:{id:"eventemitter-emit-event-arg1-arg2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-emit-event-arg1-arg2"}},[t._v("#")]),t._v(" EventEmitter.emit(event, [arg1], [arg2], [...])")]),t._v(" "),a("p",[t._v("发射 "),a("code",[t._v("event")]),t._v(" 事件，传递若干可选参数到事件监听器的参数表。")]),t._v(" "),a("h4",{attrs:{id:"eventemitter-once-event-listener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-once-event-listener"}},[t._v("#")]),t._v(" EventEmitter.once(event, listener)")]),t._v(" "),a("p",[t._v("为指定事件注册一个单次监听器，即监听器最多只会触发一次，触发后立刻解除该监听器。")]),t._v(" "),a("h4",{attrs:{id:"eventemitter-removelistener-event-listener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-removelistener-event-listener"}},[t._v("#")]),t._v(" EventEmitter.removeListener(event, listener)")]),t._v(" "),a("p",[t._v("移除指定事件的某个监听器, "),a("code",[t._v("listener")]),t._v(" 必须是该事件已经注册过的监听器。")]),t._v(" "),a("h4",{attrs:{id:"eventemitter-removealllisteners-event"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-removealllisteners-event"}},[t._v("#")]),t._v(" EventEmitter.removeAllListeners([event])")]),t._v(" "),a("p",[t._v("移除所有事件的所有监听器， 如果指定 "),a("code",[t._v("event")]),t._v("，则移除指定事件的所有监听器。")]),t._v(" "),a("p",[a("code",[t._v("EventEmitter.off(eventName, listener)")]),t._v(" 的别名")]),t._v(" "),a("h4",{attrs:{id:"eventemitter-eventnames"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-eventnames"}},[t._v("#")]),t._v(" EventEmitter.eventNames()")]),t._v(" "),a("p",[t._v("返回一个列出触发器已注册监听器的事件的数组")]),t._v(" "),a("h4",{attrs:{id:"eventemitter-listenercount-eventname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-listenercount-eventname"}},[t._v("#")]),t._v(" EventEmitter.listenerCount(eventName)")]),t._v(" "),a("p",[t._v("返回正在监听指定事件的监听器的数量。")]),t._v(" "),a("h3",{attrs:{id:"error-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#error-事件"}},[t._v("#")]),t._v(" Error 事件")]),t._v(" "),a("p",[t._v("EventEmitter 定义了一个特殊的事件 error. 在遇到异常的时候通常会发射 error 事件。当 error 被发射时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，抛出错误、打印堆栈跟踪、且退出 Node.js 进程。")]),t._v(" "),a("p",[t._v("我们一般要为会发射 error 事件注册至少一个监听器，避免遇到错误后整个程序崩溃。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myEmitter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmyEmitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'有错误'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmyEmitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'whoops!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印: 有错误")]),t._v("\n")])])]),a("h2",{attrs:{id:"fs-文件模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-文件模块"}},[t._v("#")]),t._v(" Fs 文件模块")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://nodejs.cn/api/fs.html#fs_file_system",target:"_blank",rel:"noopener noreferrer"}},[t._v("fs 文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("fs 模块是文件操作的封装，它提供了文件的读取、写入、更名、删除、遍历目录、链接等类似标准 POSIX 函数的方式与文件系统进行交互")]),t._v(" "),a("p",[t._v("fs 模块中所有的操作都提供了异步的和 同步的两个版本")]),t._v(" "),a("p",[t._v("异步形式的最后一个参数都是完成时回调函数。 传给回调函数的参数取决于具体方法，但回调函数的第一个参数都会保留给异常。\n如果操作成功完成，则第一个参数会是 "),a("code",[t._v("null")]),t._v(" 或 "),a("code",[t._v("undefined")])]),t._v(" "),a("p",[t._v("当使用同步操作时，任何异常都会被立即抛出，可以使用 "),a("code",[t._v("try/catch")]),t._v(" 来处理异常，或让异常向上冒泡。")]),t._v(" "),a("p",[t._v("注意，异步的方法不能保证执行顺序。")]),t._v(" "),a("p",[t._v("大部分 fs 操作接受字符串、Buffer、或 使用 file: 协议的 URL 对象 作为文件路径。")]),t._v(" "),a("h3",{attrs:{id:"常用操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用操作"}},[t._v("#")]),t._v(" \b常用操作")]),t._v(" "),a("h4",{attrs:{id:"fs-readfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-readfile"}},[t._v("#")]),t._v(" fs.readFile")]),t._v(" "),a("p",[a("code",[t._v("fs.readFile(filename,[encoding],[callback(err,data)])")]),t._v("\n是最简单的读取 文件的函数。")]),t._v(" "),a("p",[t._v("它接受一个必选参数 filename，表示要读取的文件名。第二个参数 encoding 是可选的，表示文件的字符编码。callback 是回调函数")]),t._v(" "),a("p",[t._v("如果指定了 encoding，data 是一个解析后的字符 串，否则 data 将会是以 Buffer 形式表示的二进制数据。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'content.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"fs-open"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-open"}},[t._v("#")]),t._v(" fs.open")]),t._v(" "),a("p",[a("code",[t._v("fs.open(path, flags, [mode], [callback(err, fd)])")]),t._v("\n是 POSIX open 函数的封装")]),t._v(" "),a("p",[t._v("它接受两个必选参数，path 为文件的路径， flags 可以是以下值:")]),t._v(" "),a("ul",[a("li",[t._v("r :以读取模式打开文件。")]),t._v(" "),a("li",[t._v("r+ :以读写模式打开文件。")]),t._v(" "),a("li",[t._v("w :以写入模式打开文件，如果文件不存在则创建。")]),t._v(" "),a("li",[t._v("w+ :以读写模式打开文件，如果文件不存在则创建。")]),t._v(" "),a("li",[t._v("a :以追加模式打开文件，如果文件不存在则创建。")]),t._v(" "),a("li",[t._v("a+ :以读取追加模式打开文件，如果文件不存在则创建。")])]),t._v(" "),a("p",[t._v("mode 参数用于创建文件时给文件指定权限，默认是 0666 (读 + 写)")]),t._v(" "),a("h2",{attrs:{id:"path-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-模块"}},[t._v("#")]),t._v(" PATH 模块")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://nodejs.cn/api/path.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Path 文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("code",[t._v("path")]),t._v(" 模块提供了一些工具函数，用于处理文件与目录的路径。")]),t._v(" "),a("p",[a("code",[t._v("path")]),t._v(" 模块的默认操作会根据 Node.js 应用程序运行的操作系统的不同而变化。 比如，当运行在 Windows 操作系统上时，"),a("code",[t._v("path")]),t._v(" 模块会认为使用的是 Windows 风格的路径。在 Linux 系统就是 POSIX 标准\b风格路径。")]),t._v(" "),a("p",[t._v("要想在任何操作系统上处理 POSIX 文件路径时获得一致的结果，可以使用 "),a("code",[t._v("path.posix")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 Windows 和 Mac 下 返回一样")]),t._v("\npath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("posix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("basename")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/myfile.html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 'myfile.html'")]),t._v("\n")])])]),a("h3",{attrs:{id:"常用操作-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用操作-2"}},[t._v("#")]),t._v(" 常用操作")]),t._v(" "),a("h4",{attrs:{id:"path-basename-path-ext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-basename-path-ext"}},[t._v("#")]),t._v(" path.basename(path[, ext])")]),t._v(" "),a("p",[t._v("返回一个 "),a("code",[t._v("path")]),t._v(" 的最后一部分")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("basename")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/foo/bar/baz/asdf/quux.html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 'quux.html'")]),t._v("\n\npath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("basename")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/foo/bar/baz/asdf/quux.html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: 'quux'")]),t._v("\n")])])]),a("h4",{attrs:{id:"path-dirname-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-dirname-path"}},[t._v("#")]),t._v(" path.dirname(path)")]),t._v(" "),a("p",[t._v("返回一个 "),a("code",[t._v("path")]),t._v(" 的目录名")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dirname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/foo/bar/baz/asdf/quux'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: '/foo/bar/baz/asdf'")]),t._v("\n")])])]),a("h4",{attrs:{id:"path-join-paths"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-join-paths"}},[t._v("#")]),t._v(" path.join([...paths])")]),t._v(" "),a("p",[t._v("使用平台特定的分隔符把全部给定的 "),a("code",[t._v("path")]),t._v(" 片段连接到一起，并规范化生成的路径。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baz/asdf'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'quux'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'..'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回: '/foo/bar/baz/asdf'")]),t._v("\n\npath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抛出 'TypeError: Path must be a string. Received {}'")]),t._v("\n")])])]),a("h4",{attrs:{id:"path-parse-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-parse-path"}},[t._v("#")]),t._v(" path.parse(path)")]),t._v(" "),a("p",[t._v("返回一个对象，对象的属性表示 "),a("code",[t._v("path")]),t._v(" 的元素。")]),t._v(" "),a("p",[t._v("返回的对象有以下属性：")]),t._v(" "),a("ul",[a("li",[t._v("dir "),a("string")],1),t._v(" "),a("li",[t._v("root "),a("string")],1),t._v(" "),a("li",[t._v("base "),a("string")],1),t._v(" "),a("li",[t._v("name "),a("string")],1),t._v(" "),a("li",[t._v("ext "),a("string")],1)]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/home/user/dir/file.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { root: '/',")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   dir: '/home/user/dir',")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   base: 'file.txt',")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   ext: '.txt',")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   name: 'file' }")]),t._v("\n")])])]),a("h2",{attrs:{id:"url-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-模块"}},[t._v("#")]),t._v(" URL 模块")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://nodejs.cn/api/url.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("URL 文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("url 模块提供了一些实用函数，用于 URL 处理与解析。")]),t._v(" "),a("p",[t._v("URL 字符串是具有结构的字符串，包含多个意义不同的组成部分。URL 字符串可以被解析为一个 URL 对象，其属性对应于字符串的各组成部分。")]),t._v(" "),a("p",[t._v("url 模块提供了两套 API 来处理 URL 字符串：")]),t._v(" "),a("ul",[a("li",[t._v("一个是 Node.js 特有的 API，是旧版本的遗留；")]),t._v(" "),a("li",[t._v("另一个则是实现了 WHATWG URL Standard 的 API ，该标准也在各种浏览器中被使用。")])]),t._v(" "),a("blockquote",[a("p",[t._v("新的应用程序应当使用 WHATWG API。")])]),t._v(" "),a("p",[t._v("下图中，网址 "),a("code",[t._v("'http://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'")]),t._v(" 上方是由遗留的 "),a("code",[t._v("url.parse()")]),t._v(" 返回的对象的属性。下方的则是"),a("code",[t._v("WHATWG URL")]),t._v("对象的属性。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/0uUzBxZ.png",alt:"Screen Shot 2018-07-15 at 5.11.20 PM"}})]),t._v(" "),a("p",[t._v("利用WHATWG API解析一个URL字符串:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'url'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myURL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("通过Node.js提供的API解析一个URL:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'url'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myURL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"whatwg-url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#whatwg-url"}},[t._v("#")]),t._v(" WHATWG URL")]),t._v(" "),a("p",[t._v("根据 WHATWG URL 标准, 实现的 URL 类. 解析出来的 URL 对象的所有属性都是在类的原型上实现为 getter 和 setter，而不是作为对象本身的数据属性。因此，在 URL 对象的任何属性上使用 delete 关键字没有任何效果，但仍返回 true。")]),t._v(" "),a("h4",{attrs:{id:"new-url-input-base"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-url-input-base"}},[t._v("#")]),t._v(" new URL(input[, base])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("input <string>")]),t._v(" : 要解析的输入 URL")]),t._v(" "),a("li",[a("code",[t._v("base <string> | <URL>")]),t._v(" : 如果 "),a("code",[t._v("input")]),t._v(" 是相对 URL，则为要解析的基本 URL。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'url'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myURL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://example.org/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://example.org/foo")]),t._v("\n")])])]),a("p",[t._v("Unicode 字符将被使用 Punycode 算法自动转换为 ASCII:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'url'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myURL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://你好你好'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://xn--6qqa088eba/")]),t._v("\n")])])]),a("h4",{attrs:{id:"url-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-tostring"}},[t._v("#")]),t._v(" url.toString()")]),t._v(" "),a("p",[t._v("在 URL 对象上调用 "),a("code",[t._v("toString()")]),t._v(" 方法将返回序列化的 URL。返回值与 "),a("code",[t._v("url.href")]),t._v(" 和 "),a("code",[t._v("url.toJSON()")]),t._v(" 的相同。")]),t._v(" "),a("h3",{attrs:{id:"legacy-url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#legacy-url"}},[t._v("#")]),t._v(" Legacy URL")]),t._v(" "),a("p",[t._v("旧版本的 URL 对象属性可以用 delete.")]),t._v(" "),a("h4",{attrs:{id:"url-format-urlobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-format-urlobject"}},[t._v("#")]),t._v(" url.format(urlObject)")]),t._v(" "),a("p",[a("code",[t._v("url.format()")]),t._v(" 方法返回一个从 "),a("code",[t._v("urlObject")]),t._v(" 格式化后的 URL 字符串。")]),t._v(" "),a("h4",{attrs:{id:"url-parse-urlstring-parsequerystring-slashesdenotehost"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-parse-urlstring-parsequerystring-slashesdenotehost"}},[t._v("#")]),t._v(" url.parse(urlString[, parseQueryString[, slashesDenoteHost]])")]),t._v(" "),a("p",[a("code",[t._v("url.parse()")]),t._v(" 方法会解析一个 URL 字符串并返回一个 URL 对象。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("urlString <string>")]),t._v(" : 要解析的 URL 字符串。")]),t._v(" "),a("li",[a("code",[t._v("parseQueryString <boolean>")]),t._v(" 如果为 "),a("code",[t._v("true")]),t._v("，则 "),a("code",[t._v("query")]),t._v(" 属性总会通过 querystring 模块的 "),a("code",[t._v("parse()")]),t._v(" : 方法生成一个对象。 如果为 "),a("code",[t._v("false")]),t._v("，则返回的 URL 对象上的 "),a("code",[t._v("query")]),t._v(" 属性会是一个未解析、未解码的字符串。 默认为 "),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("slashesDenoteHost <boolean>")]),t._v(" : 如果为 "),a("code",[t._v("true")]),t._v("，则 "),a("code",[t._v("//")]),t._v(" 之后至下一个 "),a("code",[t._v("/")]),t._v(" 之前的字符串会被解析作为 "),a("code",[t._v("host")]),t._v("。 例如，"),a("code",[t._v("//foo/bar")]),t._v(" 会被解析为 "),a("code",[t._v("{host: 'foo', pathname: '/bar'}")]),t._v(" 而不是 "),a("code",[t._v("{pathname: '//foo/bar'}")]),t._v("。 默认为 "),a("code",[t._v("false")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"net-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#net-模块"}},[t._v("#")]),t._v(" Net 模块")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://nodejs.cn/api/net.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("net 文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("提供了创建基于 stream流 的 TCP 或 IPC 服务器 和 客户端 的异步网络 API。")]),t._v(" "),a("h3",{attrs:{id:"开启-tcp-或-ipc-服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开启-tcp-或-ipc-服务"}},[t._v("#")]),t._v(" 开启 TCP 或 IPC 服务")]),t._v(" "),a("p",[t._v("先看一个使用实例:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// server.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" net "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'net'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" server "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'server connected'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'server disconnected'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello\\r\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'监听 3000 端口'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"net-server-实例事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#net-server-实例事件"}},[t._v("#")]),t._v(" net.Server 实例事件")]),t._v(" "),a("p",[t._v("NET 模块是继承 EventEmitter 的, 绑定了很多事件.")]),t._v(" "),a("h4",{attrs:{id:"close-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#close-事件"}},[t._v("#")]),t._v(" 'close' 事件")]),t._v(" "),a("p",[t._v("当 server 关闭的时候触发, 所有的连接结束才会触发这个事件")]),t._v(" "),a("h4",{attrs:{id:"connection-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connection-事件"}},[t._v("#")]),t._v(" 'connection' 事件")]),t._v(" "),a("p",[t._v("当一个新的 connection 建立的时候触发, 返回 "),a("code",[t._v("<net.Socket>")]),t._v(" 实例对象")]),t._v(" "),a("h4",{attrs:{id:"error-事件-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#error-事件-2"}},[t._v("#")]),t._v(" 'error' 事件")]),t._v(" "),a("p",[t._v("当错误出现的时候触发, 'close' 事件不会在这个事件触发后继续触发 除非是手动调用")]),t._v(" "),a("h4",{attrs:{id:"listening-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listening-事件"}},[t._v("#")]),t._v(" 'listening' 事件")]),t._v(" "),a("p",[t._v("当服务被绑定后调用 "),a("code",[t._v("server.listen()")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"常用操作-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用操作-3"}},[t._v("#")]),t._v(" 常用操作")]),t._v(" "),a("h4",{attrs:{id:"net-createserver-options-connectionlistener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#net-createserver-options-connectionlistener"}},[t._v("#")]),t._v(" net.createServer([options][, connectionListener])")]),t._v(" "),a("p",[t._v("用于创建一个 TCP 或 IPC 服务, 返回 "),a("code",[t._v("<net.Server>")]),t._v(" 对象.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("options <Object>")]),t._v(" ==(以后再说)==\n"),a("ul",[a("li",[a("code",[t._v("allowHalfOpen <boolean>")]),t._v(" : 表示是否允许一个半开的TCP连接。 默认值: "),a("code",[t._v("false")])]),t._v(" "),a("li",[a("code",[t._v("pauseOnConnect <boolean>")]),t._v(" : 一旦来了连接，是否暂停套接字。 默认值: "),a("code",[t._v("false")])])])]),t._v(" "),a("li",[a("code",[t._v("connectionListener <Function>")]),t._v(" : 为'connection' 事件自动设置一个监听器。")])]),t._v(" "),a("h4",{attrs:{id:"server-listen-port-host-backlog-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server-listen-port-host-backlog-callback"}},[t._v("#")]),t._v(" server.listen([port[, host[, backlog]]][, callback])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("port <number>")]),t._v(" 端口")]),t._v(" "),a("li",[a("code",[t._v("host <string>")]),t._v(" 主机")]),t._v(" "),a("li",[a("code",[t._v("backlog <number> server.listen()")]),t._v(" 最大连接数")]),t._v(" "),a("li",[a("code",[t._v("callback <Function> server.listen()")]),t._v(" 监听函数")]),t._v(" "),a("li",[a("code",[t._v("Returns: <net.Server>")])])]),t._v(" "),a("p",[t._v("为 'connections' 事件 启动一个 server 监听. 一个 "),a("code",[t._v("net.Server")]),t._v(" 可以是一个 TCP 或者 一个 IPC server，这取决于它监听什么。")]),t._v(" "),a("h3",{attrs:{id:"创建-socket-与-server-通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-socket-与-server-通信"}},[t._v("#")]),t._v(" 创建 Socket 与 \bServer 通信")]),t._v(" "),a("p",[a("code",[t._v("net.Socket")]),t._v(" 可以被用户创建并直接与 server 通信。")]),t._v(" "),a("p",[t._v("当一个连接被接收时，它也能被 Node.js 创建并传递给用户。通过监听在一个 "),a("code",[t._v("net.Server")]),t._v(" 上的'connection' 事件触发而获得的，用户可以使用它来与客户端通信。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// client.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" net "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"net"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'client connected'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world!\\r\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nclient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nclient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'client disconnected'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"net-socket-实例事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#net-socket-实例事件"}},[t._v("#")]),t._v(" net.Socket 实例事件")]),t._v(" "),a("h4",{attrs:{id:"close-事件-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#close-事件-2"}},[t._v("#")]),t._v(" 'close' 事件")]),t._v(" "),a("p",[t._v("一旦 socket 完全关闭就发出该事件。")]),t._v(" "),a("h4",{attrs:{id:"connect-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connect-事件"}},[t._v("#")]),t._v(" 'connect' 事件")]),t._v(" "),a("p",[t._v("当一个 socket 连接成功建立的时候触发该事件。")]),t._v(" "),a("h4",{attrs:{id:"data-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-事件"}},[t._v("#")]),t._v(" 'data' 事件")]),t._v(" "),a("p",[t._v("当接收到数据的时触发该事件。data 参数是一个 Buffer 或 String。数据编码由 "),a("code",[t._v("socket.setEncoding()")]),t._v(" 设置。")]),t._v(" "),a("h4",{attrs:{id:"drain-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drain-事件"}},[t._v("#")]),t._v(" 'drain' 事件")]),t._v(" "),a("p",[t._v("当写入缓冲区变为空时触发。可以用来做上传节流。")]),t._v(" "),a("h4",{attrs:{id:"end-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#end-事件"}},[t._v("#")]),t._v(" 'end' 事件")]),t._v(" "),a("p",[t._v("当 socket 的另一端发送一个 FIN 包的时候触发，从而结束 socket 的可读端。")]),t._v(" "),a("h4",{attrs:{id:"error-事件-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#error-事件-3"}},[t._v("#")]),t._v(" 'error' 事件")]),t._v(" "),a("p",[t._v("当错误发生时触发。'close' 事件也会紧接着该事件被触发。")]),t._v(" "),a("h4",{attrs:{id:"lookup-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lookup-事件"}},[t._v("#")]),t._v(" 'lookup' 事件")]),t._v(" "),a("p",[t._v("在找到主机之后创建连接之前触发。")]),t._v(" "),a("h3",{attrs:{id:"常用操作-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用操作-4"}},[t._v("#")]),t._v(" 常用操作")]),t._v(" "),a("h4",{attrs:{id:"socket-connect-options-connectlistener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-connect-options-connectlistener"}},[t._v("#")]),t._v(" socket.connect(options[, connectListener])")]),t._v(" "),a("p",[t._v("在给定的套接字上启动一个连接。")]),t._v(" "),a("blockquote",[a("p",[t._v("IP 地址加上主机上的端口号作为 TCP 连接的端点，这种端点就叫做套接字（socket）或插口。")])]),t._v(" "),a("p",[t._v("该方法是异步的。当连接建立了的时候，'connect' 事件将会被触发。如果连接过程中有问题，'error' 事件将会代替 'connect' 事件被触发，并将错误信息传递给 'error' 监听器。")]),t._v(" "),a("p",[t._v("返回  "),a("code",[t._v("<net.Socket>")]),t._v(" socket 自身。")]),t._v(" "),a("p",[t._v("常用 options 有：(其余的看文档吧)")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("port <number>")]),t._v(" 必须。Socket 连接的端口。")]),t._v(" "),a("li",[a("code",[t._v("host <string>")]),t._v(" Socket 连接的主机。默认是 'localhost'")])]),t._v(" "),a("h4",{attrs:{id:"net-createconnection-options-connectlistener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#net-createconnection-options-connectlistener"}},[t._v("#")]),t._v(" net.createConnection(options[, connectListener])")]),t._v(" "),a("p",[t._v("一个用于创建 net.Socket 的工厂函数，立即使用 "),a("code",[t._v("socket.connect()")]),t._v(" 初始化链接，然后返回启动连接的 net.Socket。")]),t._v(" "),a("p",[t._v("当连接建立之后，在返回的 socket 上将触发一个 'connect' 事件。")]),t._v(" "),a("p",[a("code",[t._v("net.connect()")]),t._v(" 是 "),a("code",[t._v("net.createConnection()")]),t._v(" 的别名")]),t._v(" "),a("h4",{attrs:{id:"socket-write-data-encoding-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-write-data-encoding-callback"}},[t._v("#")]),t._v(" socket.write(data[, encoding][, callback])")]),t._v(" "),a("p",[t._v("在 socket 上发送数据。第二个参数制定了字符串的编码 - 默认是 UTF8 编码。")]),t._v(" "),a("p",[t._v("如果全部数据都成功刷新到内核的缓冲则返回 true。如果全部或部分数据在排队，则返回 false。")]),t._v(" "),a("p",[t._v("当缓冲再次空闲的时候将触发 'drain' 事件。")]),t._v(" "),a("h4",{attrs:{id:"socket-end-data-encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-end-data-encoding"}},[t._v("#")]),t._v(" socket.end([data][, encoding])")]),t._v(" "),a("p",[t._v("半关闭 socket。例如发送一个 FIN 包。服务端仍可以发送数据。")]),t._v(" "),a("p",[t._v("Returns: "),a("code",[t._v("<net.Socket>")]),t._v(" Socket 本身。")]),t._v(" "),a("p",[t._v("如果指定了 data，则相当于调用 "),a("code",[t._v("socket.write(data, encoding)")]),t._v(" 之后再调用 "),a("code",[t._v("socket.end()")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"http-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-模块"}},[t._v("#")]),t._v(" HTTP 模块")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://nodejs.org/dist/latest-v8.x/docs/api/http.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("\bHTTP 文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("在 Node 标准库提供了 http 模块, 可以让 HTTP 协议 应用起来更简易.")]),t._v(" "),a("p",[t._v("模块中封装了一个高效的 HTTP 服务器对象 和 一个简易的 HTTP 客户端.\n"),a("code",[t._v("http.Server")]),t._v(" 是一个基于事件的 HTTP 服务器.\n"),a("code",[t._v("http.request")]),t._v(" 则是一个 HTTP 客户端工具，用于向 HTTP 服务器发起请求.")]),t._v(" "),a("h3",{attrs:{id:"http-incomingmessage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-incomingmessage"}},[t._v("#")]),t._v(" http.IncomingMessage")]),t._v(" "),a("p",[t._v("是 HTTP 请求的信息. 由\nhttp.Server 或 http.ClientRequest 创建，作为 request 或 response 事件的第一个参数传递. 通常简称 request 或 req.")]),t._v(" "),a("h4",{attrs:{id:"常用属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用属性"}},[t._v("#")]),t._v(" 常用属性")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("message.headers")]),t._v(" :\n请求头或响应头的对象。")]),t._v(" "),a("li",[a("code",[t._v("message.method")]),t._v(" :\n(仅在 http.Server 返回的请求中有效。) 返回一个字符串，表示请求的方法。 该属性只读。 例如：'GET'、'DELETE'。")]),t._v(" "),a("li",[a("code",[t._v("message.url")]),t._v(" :\n(仅在 http.Server 返回的请求中有效。) 返回请求的 URL 字符串")])]),t._v(" "),a("h3",{attrs:{id:"http-serverresponse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-serverresponse"}},[t._v("#")]),t._v(" http.ServerResponse")]),t._v(" "),a("p",[t._v("http.ServerResponse 是返回给客户端的信息，在 HTTP 服务器内部 (http.Server) 被创建, 决定了用户最终能看到的结果。作为 request 或 response 事件的第二个参数传递. 通常简称  response 或 res.")]),t._v(" "),a("h4",{attrs:{id:"response-writehead-statuscode-statusmessage-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#response-writehead-statuscode-statusmessage-headers"}},[t._v("#")]),t._v(" response.writeHead(statusCode[, statusMessage][, headers])")]),t._v(" "),a("p",[t._v("发送一个响应头给请求。 状态码是一个三位数的 HTTP 状态码，如 404。 最后一个参数 headers 是响应头。 第二个参数 statusMessage 是可选的状态描述。")]),t._v(" "),a("p",[t._v("该方法在消息中只能被调用一次")]),t._v(" "),a("h4",{attrs:{id:"response-write-chunk-encoding-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#response-write-chunk-encoding-callback"}},[t._v("#")]),t._v(" response.write(chunk[, encoding][, callback])")]),t._v(" "),a("p",[t._v("方法会发送一块响应主体。 它可被多次调用，以便提供连续的响应主体片段。")]),t._v(" "),a("p",[t._v("chunk 可以是一个字符串或一个 buffer。 如果 chunk 是一个字符串，则第二个参数指定如何将它编码成一个字节流。")]),t._v(" "),a("p",[t._v("encoding 默认为 'utf8'。 当数据块被刷新时，callback 会被调用。")]),t._v(" "),a("h4",{attrs:{id:"response-end-data-encoding-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#response-end-data-encoding-callback"}},[t._v("#")]),t._v(" response.end([data][, encoding][, callback])")]),t._v(" "),a("p",[t._v("该方法会通知服务器，所有响应头和响应主体都已被发送，即服务器将其视为已完成。 每次响应都必须调用 "),a("code",[t._v("response.end()")]),t._v(" 方法。")]),t._v(" "),a("p",[t._v("如果指定了 data，则相当于调用 "),a("code",[t._v("response.write(data, encoding)")]),t._v(" 之后再调用 "),a("code",[t._v("response.end(callback)")]),t._v("。")]),t._v(" "),a("p",[t._v("如果指定了 callback，则当响应流结束时被调用。")]),t._v(" "),a("h3",{attrs:{id:"http-服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-服务器"}},[t._v("#")]),t._v(" HTTP 服务器")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_class_http_server",target:"_blank",rel:"noopener noreferrer"}},[t._v("http.Server 文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("http.Server 是 http 模块中的 HTTP 服务器对象. 用 Node.js 做的所有基于 HTTP 协议的系统都是基于 http.Server 实现的.")]),t._v(" "),a("p",[t._v("它提供了 一套封装级别很低的 API，仅仅是流控制和简单的消息解析，所有的高层功能都要通过它们接口来实现。")]),t._v(" "),a("h4",{attrs:{id:"http-createserver-options-requestlistener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-createserver-options-requestlistener"}},[t._v("#")]),t._v(" http.createServer([options][, requestListener])")]),t._v(" "),a("p",[a("code",[t._v("http.createServer")]),t._v(" 方法创建一个 http.Server 实例. 这个函数接受一个 HTTP 请求处理函数 (requestListner) 作为参数, 返回一个 http.Server 实例. requestListener \b作为 'request' 事件监听函数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入 http 模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" http "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建实例")]),t._v("\nhttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/plain'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am Garrik'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 3000 端口监听")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在上面的代码中, 按照 HTTP 协议编写了 响应头部. 然后编写了 响应\b体. 然后通过 "),a("code",[t._v("res.end")]),t._v(" 结束并发送. 调用 "),a("code",[t._v("listen")]),t._v(" 函数去监听服务器的 3000 端口. 当有客户端访问 3000 端口, 触发 request 事件, 监听函数被调用, res 作为响应, \b传递回客户端.")]),t._v(" "),a("h3",{attrs:{id:"server-常用事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server-常用事件"}},[t._v("#")]),t._v(" Server 常用事件")]),t._v(" "),a("p",[t._v("首先 http.Server 是一个"),a("strong",[t._v("基于事件")]),t._v("的 HTTP 服务器. 所有的请求都被封装为独立的事件， 开发者只需要对它的事件编写响应函数即可实现 HTTP 服务器的所有功能。")]),t._v(" "),a("p",[t._v("事件都继承自 EventEmitter，常用的几个有:")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[a("code",[t._v("request")])]),t._v(":\n当收到客户端发来的请求时, 该事件触发.\n发送两个参数 req 和 res, ，分别是 "),a("code",[t._v("http.IncomingMessage")]),t._v(" 和 "),a("code",[t._v("http.ServerResponse")]),t._v(" 的实例，表示请求和响应信息。")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("connection")])]),t._v(":\n当 TCP 连接建立时，该事件被触发，提供一个参数 socket，为 "),a("code",[t._v("net.Socket")]),t._v(" 的实例。\nconnection 事件的粒度要大于 request，因为客户端在 Keep-Alive 模式下可能会在同一个连接内发送多次请求。(粒度大意思就是事件被触发频率高, 个人理解.)")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("close")])]),t._v(":\n当服务器关闭时，该事件被触发。注意不是在用户连接断开时。")])])]),t._v(" "),a("h3",{attrs:{id:"http-客户端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-客户端"}},[t._v("#")]),t._v(" HTTP 客户端")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://nodejs.cn/api/http.html#http_class_http_clientrequest",target:"_blank",rel:"noopener noreferrer"}},[t._v("http.ClientRequest 文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("==下回再说==")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://nodejs.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.runoob.com/nodejs/nodejs-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("菜鸟教程"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);