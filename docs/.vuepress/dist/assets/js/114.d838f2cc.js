(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{322:function(t,l,i){"use strict";i.r(l);var v=i(0),e=Object(v.a)({},(function(){var t=this,l=t.$createElement,i=t._self._c||l;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"监听器-过滤器"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#监听器-过滤器"}},[t._v("#")]),t._v(" 监听器 & 过滤器")]),t._v(" "),i("h2",{attrs:{id:"监听器"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#监听器"}},[t._v("#")]),t._v(" 监听器")]),t._v(" "),i("h4",{attrs:{id:"代理设计模式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#代理设计模式"}},[t._v("#")]),t._v(" 代理设计模式")]),t._v(" "),i("ul",[i("li",[t._v("什么是代理模式：当某一个对象发生某一个事件时，通知另一个对象，让另一个对象做某事")]),t._v(" "),i("li",[t._v("代理设计模式步骤：\n"),i("ul",[i("li",[t._v("定义协议；")]),t._v(" "),i("li",[t._v("遵守协议；")]),t._v(" "),i("li",[t._v("成为代理；")]),t._v(" "),i("li",[t._v("调用代理方法；")])])]),t._v(" "),i("li",[t._v("监听器的内部使用的就是代理模式；")])]),t._v(" "),i("h4",{attrs:{id:"监听器-2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#监听器-2"}},[t._v("#")]),t._v(" 监听器")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("什么是监听器：")]),t._v(" "),i("ul",[i("li",[t._v("能监听某个对象的状态变化的组件；")]),t._v(" "),i("li",[t._v("在 Java Web，中用来监听 “域对象“ 的变化；\n"),i("ul",[i("li",[t._v("request 域;")]),t._v(" "),i("li",[t._v("session 域;")]),t._v(" "),i("li",[t._v("servletContext 域;")])])])])]),t._v(" "),i("li",[i("p",[t._v("监听器相关的概念：")]),t._v(" "),i("ul",[i("li",[t._v("事件源：被监听的对象；")]),t._v(" "),i("li",[t._v("监听器：监听事件源的对象；")]),t._v(" "),i("li",[t._v("注册监听器：监听器与事件源相绑定；")]),t._v(" "),i("li",[t._v("响应行为：监听到事件源变化时，去做什么事情；")])])]),t._v(" "),i("li",[i("p",[t._v("监听器划分：")]),t._v(" "),i("ul",[i("li",[t._v("三个监听域对象的创建与销毁：\n"),i("ul",[i("li",[t._v("ServletContextListener")]),t._v(" "),i("li",[t._v("HttpSessionListener")]),t._v(" "),i("li",[t._v("ServletRequestListener")])])]),t._v(" "),i("li",[t._v("三个监听域对象当中属性变化：\n"),i("ul",[i("li",[t._v("ServletContextAttributeListener")]),t._v(" "),i("li",[t._v("HttpSessionAttributeListener")]),t._v(" "),i("li",[t._v("ServletRequestAttributeListener")])])])])])]),t._v(" "),i("h4",{attrs:{id:"监听器编写步骤"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#监听器编写步骤"}},[t._v("#")]),t._v(" 监听器编写步骤")]),t._v(" "),i("ul",[i("li",[t._v("编写一个监听器类去实现监听器接口：\n"),i("ul",[i("li",[i("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-7-23-17-4.png",alt:"2020-2-7-23-17-4.png"}})])])]),t._v(" "),i("li",[t._v("web.xml 中进行配置：\n"),i("ul",[i("li",[i("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-7-23-17-18.png",alt:"2020-2-7-23-17-18.png"}})])])])]),t._v(" "),i("h2",{attrs:{id:"过滤器"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[t._v("#")]),t._v(" 过滤器")]),t._v(" "),i("h4",{attrs:{id:"过滤器介绍"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#过滤器介绍"}},[t._v("#")]),t._v(" 过滤器介绍")]),t._v(" "),i("ul",[i("li",[t._v("filter 是对客户端访问资源的过滤，符合条件放行，不符合条件不放行；")]),t._v(" "),i("li",[t._v("并且可以对目标资源，访问前后进行逻辑处理；")]),t._v(" "),i("li",[t._v("过滤器的访问流程：\n"),i("ul",[i("li",[t._v("在发送一个请求时， web 容器会先到 filter 当中，创建三个参数，res，req，chain；")]),t._v(" "),i("li",[t._v("请求在过滤器当中，被放行之后，才能够访问到对应的资源；")]),t._v(" "),i("li",[t._v("中间的过滤器可能有多个，在一个过滤器当中，可以调用另外一个过滤器；")])])])]),t._v(" "),i("p",[i("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-7-23-20-35.png",alt:"2020-2-7-23-20-35.png"}})]),t._v(" "),i("h4",{attrs:{id:"过滤器编写步骤"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#过滤器编写步骤"}},[t._v("#")]),t._v(" 过滤器编写步骤")]),t._v(" "),i("ul",[i("li",[t._v("编写一个过滤器类去实现 Filter 接口；\n"),i("ul",[i("li",[i("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-7-23-23-13.png",alt:"2020-2-7-23-23-13.png"}})])])]),t._v(" "),i("li",[t._v("在 web.xml 中进行配置：\n"),i("ul",[i("li",[t._v("配置 filter-class，给声明过滤器；")]),t._v(" "),i("li",[t._v("配置 filter-mapping，指明对哪些资源进行过滤；")]),t._v(" "),i("li",[i("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-7-23-24-51.png",alt:"2020-2-7-23-24-51.png"}})])])])]),t._v(" "),i("h4",{attrs:{id:"过滤器方法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#过滤器方法"}},[t._v("#")]),t._v(" 过滤器方法")]),t._v(" "),i("ul",[i("li",[t._v("init 方法：\n"),i("ul",[i("li",[t._v("当 filter 对象创建时调用；\n"),i("ul",[i("li",[t._v("服务器启动时创建 filter 对象；")])])]),t._v(" "),i("li",[t._v("参数：filterconfig\n"),i("ul",[i("li",[t._v("当前 filter 对象的配置信息；")])])])])]),t._v(" "),i("li",[t._v("dofitter 方法：\n"),i("ul",[i("li",[t._v("当匹配到 mapping 时调用 dofilter；")]),t._v(" "),i("li",[t._v("参数：res，req，FilterChain：\n"),i("ul",[i("li",[t._v("FilterChain：\n"),i("ul",[i("li",[t._v("过滤器链对象；")]),t._v(" "),i("li",[t._v("内部维护着各个 filter 的索引，并且知道所有 filter 的顺序；")]),t._v(" "),i("li",[t._v("是根据 mapping 的顺序来执行的；")])])])])])])]),t._v(" "),i("li",[t._v("destroy 方法：\n"),i("ul",[i("li",[t._v("当 filter 对象销毁时调用；")]),t._v(" "),i("li",[t._v("关闭服务器时销毁对象；")])])])])])}),[],!1,null,null,null);l.default=e.exports}}]);