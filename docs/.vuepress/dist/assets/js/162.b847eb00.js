(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{376:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"system-programing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-programing"}},[e._v("#")]),e._v(" System Programing")]),e._v(" "),a("h2",{attrs:{id:"introduction-to-the-unixoperating-system"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction-to-the-unixoperating-system"}},[e._v("#")]),e._v(" INTRODUCTION TO THE UNIXOPERATING SYSTEM")]),e._v(" "),a("ul",[a("li",[e._v("A computer hardware cannot function without software;")]),e._v(" "),a("li",[e._v("a computer system must possess an operating system;")]),e._v(" "),a("li",[e._v("UNIX is available for all platforms;")]),e._v(" "),a("li",[e._v("UNIX allows more than one user to share a computer system;")]),e._v(" "),a("li",[e._v("UNIX is best choice for big businesses;")]),e._v(" "),a("li",[e._v("Unix is case sensitive;")])]),e._v(" "),a("h4",{attrs:{id:"unix-philosophy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unix-philosophy"}},[e._v("#")]),e._v(" Unix Philosophy:")]),e._v(" "),a("ul",[a("li",[e._v("a program (utility) should do one thing and do it well;")]),e._v(" "),a("li",[e._v("a complex problem should be solved by combining multiple existing utilities;")]),e._v(" "),a("li",[e._v("UNIX achieves this gaol using "),a("strong",[e._v("pipes")]),e._v(";")])]),e._v(" "),a("h4",{attrs:{id:"pipe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pipe"}},[e._v("#")]),e._v(" Pipe:")]),e._v(" "),a("ul",[a("li",[e._v("a mechanism that allows the user to specify that the "),a("strong",[e._v("output")]),e._v(" of one program is to be used as the "),a("strong",[e._v("input")]),e._v(" of another program;")]),e._v(" "),a("li",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-9-44-56.png",alt:"2020-2-8-9-44-56.png"}})]),e._v(" "),a("li",[e._v("🌰 "),a("code",[e._v("ps -e|grep netscape|more")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ps -e")]),e._v(": report status on every process now running")]),e._v(" "),a("li",[a("code",[e._v("grep")]),e._v(" : search a file for a pattern")]),e._v(" "),a("li",[a("code",[e._v("more")]),e._v(" : page through a text file")])])])]),e._v(" "),a("h4",{attrs:{id:"login-name-and-passwd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#login-name-and-passwd"}},[e._v("#")]),e._v(" Login name and passwd:")]),e._v(" "),a("ul",[a("li",[e._v("Unix check our login name in "),a("code",[e._v("/etc/passwd")])]),e._v(" "),a("li",[e._v("match our password with the one in the encripted file "),a("code",[e._v("/etc/shadow")])]),e._v(" "),a("li",[a("code",[e._v("/etc/shadow")]),e._v(" can only be read by super users")])]),e._v(" "),a("h4",{attrs:{id:"shells"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shells"}},[e._v("#")]),e._v(" Shells:")]),e._v(" "),a("ul",[a("li",[e._v("A shell is a command line interpreter that reads and executes user commands")]),e._v(" "),a("li",[e._v("A shell reads user inputs either from a terminal or,from a file called script file")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-9-50-48.png",alt:"2020-2-8-9-50-48.png"}})]),e._v(" "),a("h4",{attrs:{id:"files-and-directory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#files-and-directory"}},[e._v("#")]),e._v(" Files and Directory:")]),e._v(" "),a("ul",[a("li",[e._v("The Unix file system is a hierarchical arrangement of files and directories")]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("root")]),e._v(" directory is represented by the slash character ("),a("code",[e._v("/")]),e._v(")")]),e._v(" "),a("li",[e._v("When a new directory is created, two filenames are automatically created\n"),a("ul",[a("li",[e._v(".(called dot) that refers to the "),a("strong",[e._v("current")]),e._v(" directory")]),e._v(" "),a("li",[e._v("..(called dot-dot) that refers to the "),a("strong",[e._v("parent")]),e._v(" directory.")])])])]),e._v(" "),a("h4",{attrs:{id:"standard-input-standard-output-andstandard-error"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#standard-input-standard-output-andstandard-error"}},[e._v("#")]),e._v(" Standard Input, Standard Output, andStandard Error:")]),e._v(" "),a("p",[e._v("Whenever a new program is run, three "),a("strong",[e._v("file descriptors")]),e._v(" are opened:")]),e._v(" "),a("ul",[a("li",[e._v("the standard input "),a("strong",[e._v("stdin")]),e._v(", by default the keyboard")]),e._v(" "),a("li",[e._v("the standard output "),a("strong",[e._v("stdout")]),e._v(", by default the monitor")]),e._v(" "),a("li",[e._v("the standard error "),a("strong",[e._v("stderr")]),e._v(", by default the monitor.")])]),e._v(" "),a("p",[e._v("Shells provide ways to redirect standard input and standard output:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ls > ls.output")]),e._v(", the outputs are stored in the newly created file "),a("code",[e._v("ls.output")]),e._v(" instead of the monitor")]),e._v(" "),a("li",[a("code",[e._v("mailx admin256@uwindsor.ca < assignment1.c")]),e._v(", the inputs for mailx come from the file assignment1.c instead of the keyboard")])]),e._v(" "),a("h4",{attrs:{id:"programs-and-processes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#programs-and-processes"}},[e._v("#")]),e._v(" Programs and Processes:")]),e._v(" "),a("ul",[a("li",[e._v("A "),a("strong",[e._v("program")]),e._v(" is an executable file residing on a disk;")]),e._v(" "),a("li",[e._v("A "),a("strong",[e._v("process")]),e._v(" is an executing (running) program,usually with a limited life-time;")]),e._v(" "),a("li",[e._v("A "),a("strong",[e._v("process ID")]),e._v(" (PID)is a unique nonnegative integer assigned by Unix, used to identify a process.")]),e._v(" "),a("li",[a("code",[e._v("ps")]),e._v(" reports process status.")]),e._v(" "),a("li",[e._v("A process can obtain its PID by the "),a("code",[e._v("getpid()")]),e._v(" system call, in C;")]),e._v(" "),a("li",[e._v("A process can obtain its parent ID PPID by the "),a("code",[e._v("getppid()")]),e._v(" system call, in C;")])]),e._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[e._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("include")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("<stdio.h>")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("char")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello, my PID is %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello, my PPID is %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getppid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Shell-Prompt > a.out")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Hello, my PID is 11723")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Hello, my PPID is 5598")]),e._v("\n")])])]),a("h4",{attrs:{id:"process-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-control"}},[e._v("#")]),e._v(" Process Control")]),e._v(" "),a("p",[e._v("There are three primary functions (system calls)for process control:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("fork")]),e._v(": allows an existing process to create a new process which is a copy of the caller")]),e._v(" "),a("li",[a("strong",[e._v("exec")]),e._v(": allows an existing process to be replaced with a new one.")]),e._v(" "),a("li",[a("strong",[e._v("wait")]),e._v(": allows a process to wait for one of its child processes to finish and also to get the termination status value.")])]),e._v(" "),a("h4",{attrs:{id:"user-identification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user-identification"}},[e._v("#")]),e._v(" User Identification")]),e._v(" "),a("ul",[a("li",[e._v("User Id: Each user is assigned a user ID, aunique nonnegative integer called "),a("strong",[e._v("uid")]),e._v(";")]),e._v(" "),a("li",[e._v("The user ID is used by the kernel to check if the user has the appropriate permissions to perform certain tasks like accessing files;")]),e._v(" "),a("li",[e._v("The user root(superuser) has "),a("strong",[e._v("uid=0")])]),e._v(" "),a("li",[e._v("A process can obtain its uid using the system call "),a("code",[e._v("getuid()")])]),e._v(" "),a("li",[e._v("Group ID: a positive integer allowing to group different users into different categories with different privileges;")]),e._v(" "),a("li",[e._v("both the user ID and the group ID are assigned by the system administrator at the time of the creation of the user account")]),e._v(" "),a("li",[e._v("There is a group file, "),a("code",[e._v("/etc/group")]),e._v(", that maps group names into numeric IDs")])]),e._v(" "),a("h4",{attrs:{id:"signals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#signals"}},[e._v("#")]),e._v(" Signals")]),e._v(" "),a("p",[e._v("Signals are used to "),a("strong",[e._v("notify")]),e._v(" a process of the occurrence of some condition:")]),e._v(" "),a("ul",[a("li",[e._v("A division by zero : the signal "),a("strong",[e._v("SIGFPE")]),e._v(" is sent to the responsible process that has three choices:\n"),a("ul",[a("li",[e._v("Ignore the signal,")]),e._v(" "),a("li",[e._v("terminate the process")]),e._v(" "),a("li",[e._v("call a function tohandle the situation")])])]),e._v(" "),a("li",[e._v("The Control-C key : when pressed, it generates a signal that causes the process receiving it to interrupt;")]),e._v(" "),a("li",[e._v("Calling the functionkill: a process can send a signal to another process causing its death;")])]),e._v(" "),a("h4",{attrs:{id:"system-calls-and-library-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-calls-and-library-functions"}},[e._v("#")]),e._v(" System calls and library functions")]),e._v(" "),a("ul",[a("li",[e._v("Operating systems provide entry points forprograms to request services from the kernel.")]),e._v(" "),a("li",[e._v("Entry points are called "),a("strong",[e._v("system calls")]),e._v(" in Unix.")]),e._v(" "),a("li",[e._v("a system call cannot be replaced, however, a library function can be rewritten by the user.")]),e._v(" "),a("li",[e._v("that a user process can invoke either asystem call or a library function.")]),e._v(" "),a("li",[e._v("A library function might invoke a system call.")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-10-17-47.png",alt:"2020-2-8-10-17-47.png"}})]),e._v(" "),a("h2",{attrs:{id:"unix-shells"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unix-shells"}},[e._v("#")]),e._v(" UNIX SHELLS")]),e._v(" "),a("ul",[a("li",[e._v("A shell is a program that acts as an interface between a user and the operating system.")]),e._v(" "),a("li",[e._v("A Unix shell is basically acommand interpreter")]),e._v(" "),a("li",[e._v("A shell command can be：\n"),a("ul",[a("li",[e._v("internal(built-in) : the code to be executed is part ofthe shell；")]),e._v(" "),a("li",[e._v("external : the code to be executed resides in a sperate binary file；")])])]),e._v(" "),a("li",[e._v("Shell terminates when the special character "),a("strong",[e._v("CTR-D")]),e._v(" is entered")])]),e._v(" "),a("h4",{attrs:{id:"path-and-external-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-and-external-commands"}},[e._v("#")]),e._v(" Path and external commands")]),e._v(" "),a("ul",[a("li",[e._v("For an external command, the shell searches for its file in the directories whose names are stored inthe shell variable "),a("strong",[e._v("PATH")]),e._v(";")]),e._v(" "),a("li",[e._v("Define the shell varibale PATH：\n"),a("ul",[a("li",[e._v("🌰 "),a("code",[e._v("PATH=./:/usr/bin:∼/bin")])]),e._v(" "),a("li",[e._v("the shell looks for the command in order in：\n"),a("ul",[a("li",[e._v("the current directory, called "),a("code",[e._v("./")]),e._v(",")]),e._v(" "),a("li",[a("code",[e._v("/usr/bin/")])]),e._v(" "),a("li",[e._v("your-login-directory "),a("code",[e._v("/bin/")])])])])])]),e._v(" "),a("li",[e._v("You can view your path : "),a("code",[e._v("echo $PATH")])]),e._v(" "),a("li",[e._v("The command "),a("code",[e._v("which command-name")]),e._v(" allows you to find the file location of the command.")]),e._v(" "),a("li",[e._v("PATH is set in a shell start-up file "),a("code",[e._v("∼/.profile")])]),e._v(" "),a("li",[a("code",[e._v("∼/")]),e._v(" represents the current user loggin directory")])]),e._v(" "),a("h4",{attrs:{id:"shells-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shells-2"}},[e._v("#")]),e._v(" Shells")]),e._v(" "),a("p",[e._v("Popular Unix Shell:\n"),a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-10-29-10.png",alt:"2020-2-8-10-29-10.png"}})]),e._v(" "),a("ul",[a("li",[e._v("The name of your shell is in "),a("code",[e._v("/etc/passwd")])]),e._v(" "),a("li",[e._v("You can get your running shell by typing "),a("code",[e._v("echo $SHELL")])]),e._v(" "),a("li",[e._v("A shell is invoked either automatically, at the login, or manually;")]),e._v(" "),a("li",[e._v("When a shell starts,\n"),a("ol",[a("li",[e._v("reads special startup files (e.g., "),a("code",[e._v("/etc/profile")]),e._v(" then "),a("code",[e._v("∼/.profile")]),e._v(" for bash) that contain some initialization information,")]),e._v(" "),a("li",[e._v('displays a "prompt" and waits for user commands then,')]),e._v(" "),a("li",[e._v("the shell executes the user’s command and returns to step 2 unless the user has typed the characters "),a("code",[e._v("CTR-D")]),e._v(" which will cause the shell to terminate.")])])])]),e._v(" "),a("h4",{attrs:{id:"metacharacters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metacharacters"}},[e._v("#")]),e._v(" Metacharacters")]),e._v(" "),a("p",[e._v("These are special characters with special meanings :")]),e._v(" "),a("ul",[a("li",[a("code",[e._v(">")]),e._v(": Output redirection;")]),e._v(" "),a("li",[a("code",[e._v("<")]),e._v(": Input redirection;")]),e._v(" "),a("li",[a("code",[e._v(">>")]),e._v(": Output redirection, appends to a file;")]),e._v(" "),a("li",[a("code",[e._v("*")]),e._v(": filename Wild card, matches 0 or more characters;")]),e._v(" "),a("li",[a("code",[e._v("?")]),e._v(": filename Wild card, matches 1 character;")]),e._v(" "),a("li",[a("code",[e._v("`command`")]),e._v(": command substitution, replaced by thecommand output;\n"),a("ul",[a("li",[e._v("echo The date of today is date:\n"),a("ul",[a("li",[e._v("The date of today is date;")])])]),e._v(" "),a("li",[e._v("echo The date of today is "),a("code",[e._v("`date`")]),e._v(":\n"),a("ul",[a("li",[e._v("The date of today is Sat Feb 8 10:46:41 EST 2020;")])])])])]),e._v(" "),a("li",[a("code",[e._v("|")]),e._v(": Pipe between two commands;\n"),a("ul",[a("li",[a("code",[e._v("ls|wc -w")])]),e._v(" "),a("li",[e._v("output of ls is piped to wc to getthe number of files/directories.")]),e._v(" "),a("li",[a("code",[e._v("wc")]),e._v(" displays a count of lines, wordsand characters in a file")])])]),e._v(" "),a("li",[a("code",[e._v(";")]),e._v(": Used to sequence commands;\n"),a("ul",[a("li",[a("code",[e._v("date; ls; date")])])])]),e._v(" "),a("li",[a("code",[e._v("||")]),e._v(": Executes a command if the previous one fails;\n"),a("ul",[a("li",[a("code",[e._v("cc prog1.c||CC prog1.c||gcc prog1.c")])])])]),e._v(" "),a("li",[a("code",[e._v("&&")]),e._v(": Executes a command if the previous one succeeds;\n"),a("ul",[a("li",[a("code",[e._v("CC prog1.c -o prog1 && ./prog1")])])])]),e._v(" "),a("li",[a("code",[e._v("&")]),e._v(": Executes a command in the background;\n"),a("ul",[a("li",[a("code",[e._v("netscape &")])])])]),e._v(" "),a("li",[a("code",[e._v("#")]),e._v(": characters after this are ignored (comment);")]),e._v(" "),a("li",[a("code",[e._v("$")]),e._v(": Expands the value of a shell variable;\n"),a("ul",[a("li",[a("code",[e._v("echo $PATH")])])])]),e._v(" "),a("li",[a("code",[e._v("\\")]),e._v(": Prevents special interpretation of next character;\n"),a("ul",[a("li",[a("code",[e._v("echo this is\\&→this is &")])])])])]),e._v(" "),a("h4",{attrs:{id:"scripts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scripts"}},[e._v("#")]),e._v(" Scripts")]),e._v(" "),a("ul",[a("li",[e._v("Shell have their own programming languages.")]),e._v(" "),a("li",[e._v("A shell script, like a shell program, is a file that contains shell commands;")]),e._v(" "),a("li",[e._v("Make the file executable: "),a("code",[e._v("chmod +x script_file")])]),e._v(" "),a("li",[e._v("By running the "),a("code",[e._v("/bin/sh")]),e._v(": "),a("code",[e._v("sh script_file")])]),e._v(" "),a("li",[e._v("Different shells have different syntax")])]),e._v(" "),a("h4",{attrs:{id:"shell-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-variables"}},[e._v("#")]),e._v(" Shell variables")]),e._v(" "),a("ul",[a("li",[e._v("Two kinds of variables are supported by a shell:\n"),a("ul",[a("li",[e._v("user-defined variables")]),e._v(" "),a("li",[e._v("shell environment variables.")])])]),e._v(" "),a("li",[e._v("When a subshell is created, it gets of copy of its parent shell environment variables")]),e._v(" "),a("li",[a("strong",[e._v("Shell environment variables")]),e._v(":\n"),a("ul",[a("li",[e._v("Used to customize the environment in which your shell runs")]),e._v(" "),a("li",[e._v("Most of these variables are initialized by the start-up file /etc/profile.")]),e._v(" "),a("li",[e._v("You can customize your environment by assigning different values to these variales in your "),a("code",[e._v("∼/.profile")]),e._v(" file")])])]),e._v(" "),a("li",[a("strong",[e._v("User-defined variables")]),e._v(":\n"),a("ul",[a("li",[e._v("Used within shell scripts as temporary storage")]),e._v(" "),a("li",[e._v("You can use the "),a("strong",[e._v("set")]),e._v(" command without any parameters to display all the shell variables andtheir values.")])])])]),e._v(" "),a("p",[a("strong",[e._v("Some important read/write shell environment variables")]),e._v(":")]),e._v(" "),a("ul",[a("li",[e._v("HOME: Full path name of your home directory")]),e._v(" "),a("li",[e._v("PATH: List of directories to search for commands")]),e._v(" "),a("li",[e._v("MAIL: Full path name of your mailbox")]),e._v(" "),a("li",[e._v("USER: Your user-name")]),e._v(" "),a("li",[e._v("SHELL: Your login shell")]),e._v(" "),a("li",[e._v("PWD: Current working directory")]),e._v(" "),a("li",[e._v("TERM: Type of your terminal")])]),e._v(" "),a("p",[a("strong",[e._v("Some important read-only shell variables")]),e._v(":")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("$0")]),e._v(": name of the program that is runing")]),e._v(" "),a("li",[a("code",[e._v("$1. . .\\$9")]),e._v(": values of command line arguments 1 through 9")]),e._v(" "),a("li",[a("code",[e._v("$*")]),e._v(": values of all command line arguments")]),e._v(" "),a("li",[a("code",[e._v("$#")]),e._v(": total number of command line arguments")]),e._v(" "),a("li",[a("code",[e._v("$$")]),e._v(": Process ID of current process")]),e._v(" "),a("li",[a("code",[e._v("$?")]),e._v(": Exit status of most recent command")]),e._v(" "),a("li",[a("code",[e._v("$!")]),e._v(": PID of most recent background process")])]),e._v(" "),a("p",[a("strong",[e._v("Defining an environment(global) variable")]),e._v(":")]),e._v(" "),a("ul",[a("li",[e._v("A user can also define a local shell variable thatcan be made a shell environment variable.")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("INCLUDES")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/includes "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#local variable")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$INCLUDES")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#/users/boufama/includesBecause")]),e._v("\n")])])]),a("ul",[a("li",[e._v("INCLUDES is local variable, it will not be accessible by subshells")]),e._v(" "),a("li",[e._v("INCLUDES can be made an environment variable")]),e._v(" "),a("li",[e._v("By "),a("code",[e._v("export INCLUDES")])])]),e._v(" "),a("p",[a("strong",[e._v("Quoting")]),e._v(":")]),e._v(" "),a("ul",[a("li",[e._v("The shell’s wildcard/variable/commandsubstitution mechanism can be inhibited using quotes;\n"),a("ul",[a("li",[e._v("Single quotes (’) inhibit wildcard/variable/command substitution.")]),e._v(" "),a("li",[e._v("Double quotes (“) inhibit wildcard (通配符) replacement only.")])])]),e._v(" "),a("li",[e._v("🌰：")]),e._v(" "),a("li",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-11-7-25.png",alt:"2020-2-8-11-7-25.png"}})])]),e._v(" "),a("h4",{attrs:{id:"list-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-variables"}},[e._v("#")]),e._v(" List variables")]),e._v(" "),a("p",[e._v("Syntax: "),a("code",[e._v("name=(arg1 arg2 ...)")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-11-11-5.png",alt:"2020-2-8-11-11-5.png"}})]),e._v(" "),a("ul",[a("li",[e._v("上面 👆"),a("code",[e._v("${names[@]}")]),e._v(" "),a("code",[e._v("@{names[*]}")]),e._v(" 是一样的，都是输出数组的数量；")])]),e._v(" "),a("h4",{attrs:{id:"if-statement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-statement"}},[e._v("#")]),e._v(" If Statement")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-11-9-53.png",alt:"2020-2-8-11-9-53.png"}})]),e._v(" "),a("h4",{attrs:{id:"file-expressions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-expressions"}},[e._v("#")]),e._v(" File expressions")]),e._v(" "),a("ul",[a("li",[e._v("Syntax: "),a("code",[e._v("-option filename")])]),e._v(" "),a("li",[e._v("The value is 1 if the selcted option is true and 0 otherwise.")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-11-16-54.png",alt:"2020-2-8-11-16-54.png"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-11-17-43.png",alt:"2020-2-8-11-17-43.png"}})]),e._v(" "),a("h4",{attrs:{id:"while-statement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-statement"}},[e._v("#")]),e._v(" while statement")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-11-18-5.png",alt:"2020-2-8-11-18-5.png"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-11-18-42.png",alt:"2020-2-8-11-18-42.png"}})]),e._v(" "),a("h4",{attrs:{id:"switch-statement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch-statement"}},[e._v("#")]),e._v(" switch statement")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-11-19-27.png",alt:"2020-2-8-11-19-27.png"}})]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'输入 1 到 4 之间的数字:'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'你输入的数字为:'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("read")]),e._v(" aNum\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("case")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$aNum")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'你选择了 1'")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'你选择了 2'")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'你选择了 3'")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'你选择了 4'")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'你没有输入 1 到 4 之间的数字'")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("esac")]),e._v("\n")])])]),a("h4",{attrs:{id:"for-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-statements"}},[e._v("#")]),e._v(" for statements")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-11-20-32.png",alt:"2020-2-8-11-20-32.png"}})]),e._v(" "),a("h2",{attrs:{id:"standard-input-output-library"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#standard-input-output-library"}},[e._v("#")]),e._v(" STANDARD INPUT/OUTPUT LIBRARY")]),e._v(" "),a("ul",[a("li",[e._v("This library is specified by the ANSI C standard；")]),e._v(" "),a("li",[e._v("this library handles details such as:\n"),a("ul",[a("li",[e._v("buffer allocation")]),e._v(" "),a("li",[e._v("performing I/O in optimal-sized chunks")])])]),e._v(" "),a("li",[e._v("The header file ofthis library is "),a("code",[e._v("/usr/include/stdio.h")])])]),e._v(" "),a("h4",{attrs:{id:"streams-and-file-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#streams-and-file-objects"}},[e._v("#")]),e._v(" Streams and FILE objects")]),e._v(" "),a("ul",[a("li",[e._v("Opening or creating a file, associating a "),a("strong",[e._v("stream")]),e._v(" with the file;")]),e._v(" "),a("li",[e._v("The function "),a("code",[e._v("fopen()")]),e._v(" returns a pointer to the a FILE object;")]),e._v(" "),a("li",[e._v("A FILE object is a structure that contains all needed information to manage a stream:\n"),a("ul",[a("li",[e._v("the file descriptor : a nonnegative integer used for the actual I/O")]),e._v(" "),a("li",[e._v("a pointer to a buffer for the stream")]),e._v(" "),a("li",[e._v("the size of the buffer")]),e._v(" "),a("li",[e._v("a count of the characters currently in the buffer")]),e._v(" "),a("li",[e._v("an error flag")]),e._v(" "),a("li",[e._v("an end-of-file flag")])])])]),e._v(" "),a("h4",{attrs:{id:"buffering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffering"}},[e._v("#")]),e._v(" Buffering")]),e._v(" "),a("ul",[a("li",[e._v("used to minimize the number of I/O system calls")]),e._v(" "),a("li",[e._v("There are three types of buffering provided :\n"),a("ul",[a("li",[e._v("fully buffered")]),e._v(" "),a("li",[e._v("line buffered")]),e._v(" "),a("li",[e._v("unbuffered")])])]),e._v(" "),a("li",[e._v("Fully buffered I/O:\n"),a("ul",[a("li",[e._v("In this case, actual I/O takes place only when the I/O buffer is full.")]),e._v(" "),a("li",[e._v("In particular, disk files are fully buffered by the standard I/O library")]),e._v(" "),a("li",[e._v("The buffer is usually created using "),a("strong",[e._v("malloc")]),e._v(" the first time I/O is performed on a stream")]),e._v(" "),a("li",[e._v("we can call the function "),a("strong",[e._v("fflush()")]),e._v(" to flush a stream forcing its associated buffer to be written even when it is partially filled")])])]),e._v(" "),a("li",[e._v("Line buffered I/O:\n"),a("ul",[a("li",[e._v("In this case, actual I/O takesplace only when a new line character is encouteredon input or output.")]),e._v(" "),a("li",[e._v("Line buffering is typically used for the standard input and standard output streams.")]),e._v(" "),a("li",[e._v("actual I/O will also take place when theline buffer is full before a new line is encoutered.")])])]),e._v(" "),a("li",[e._v("Unbuffered I/O:\n"),a("ul",[a("li",[e._v("The standard I/O library does notbuffer the characters;")]),e._v(" "),a("li",[e._v("each time we print or read a single character, the actual I/O operation takes place.")]),e._v(" "),a("li",[e._v("the standard error stream is normally unbuffered")])])])]),e._v(" "),a("h4",{attrs:{id:"opening-a-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opening-a-stream"}},[e._v("#")]),e._v(" Opening a Stream")]),e._v(" "),a("ul",[a("li",[e._v("Three functions can be used to open a standard I/O stream：\n"),a("ul",[a("li",[a("code",[e._v("FILE *fopen(const char *f, const char *t)")]),e._v(" "),a("ul",[a("li",[e._v("this is the most used one.")])])]),e._v(" "),a("li",[a("code",[e._v("FILE *freopen(const char *f,const char *t, FILE *fp)")]),e._v(" "),a("ul",[a("li",[e._v("Opens a specified file on a specified stream, closingthe stream first if it was already open")])])]),e._v(" "),a("li",[a("code",[e._v("FILE *fdopen(int filedesc, const char *t)")]),e._v(" "),a("ul",[a("li",[e._v("associates a standard I/O streamwith an existing file descriptor")])])])])]),e._v(" "),a("li",[e._v("A file descriptor is a nonnegative integer used by thekernel to specify any open file\n"),a("ul",[a("li",[e._v("A file descriptor is typically returned by the system call "),a("code",[e._v("open()")]),e._v(" that opens/creates a file, a pipe or, anetwork communication channel.")]),e._v(" "),a("li",[e._v("The function "),a("code",[e._v("fopen()")]),e._v(" cannot be used to open a pipeor a network communication channel")]),e._v(" "),a("li",[e._v("we use the system call "),a("code",[e._v("open()")]),e._v(" to get a file descriptor for a pipe or a channel")]),e._v(" "),a("li",[e._v("then we use "),a("code",[e._v("fdopen()")]),e._v(" to associate it with a standard stream")])])]),e._v(" "),a("li",[e._v("The argument type, "),a("code",[e._v("const char *t")]),e._v(", specifies how a stream is to be opened:\n"),a("ul",[a("li",[e._v("r for read")]),e._v(" "),a("li",[e._v("w for write")]),e._v(" "),a("li",[e._v("a for append at the end of the file")]),e._v(" "),a("li",[e._v("r+ for read and write")]),e._v(" "),a("li",[e._v("w+ for read and write")]),e._v(" "),a("li",[e._v("a+ for read and write at the end of the file.")]),e._v(" "),a("li",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-12-48-1.png",alt:"2020-2-8-12-48-1.png"}})])])])]),e._v(" "),a("h4",{attrs:{id:"closing-a-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closing-a-file"}},[e._v("#")]),e._v(" Closing a file")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("nt fclose(FILE *fp)")])]),e._v(" "),a("li",[e._v("This function will close any opened stream")]),e._v(" "),a("li",[e._v("Any buffered output data is flushed,")]),e._v(" "),a("li",[e._v("Any buffered input data is discarded,")]),e._v(" "),a("li",[e._v("Any allocated buffer is released.")])]),e._v(" "),a("h4",{attrs:{id:"reading-from-and-writing-to-a-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-and-writing-to-a-stream"}},[e._v("#")]),e._v(" Reading from and writing to a stream")]),e._v(" "),a("p",[a("strong",[e._v("There are 3 types of unformatted I/O")]),e._v(" :")]),e._v(" "),a("ul",[a("li",[e._v("Single-character I/O")]),e._v(" "),a("li",[e._v("Line I/O: to read or write a line at a time")]),e._v(" "),a("li",[e._v("Direct I/O: also called binary I/O. Useful whendealing with structures and binary information")])]),e._v(" "),a("h4",{attrs:{id:"single-character-input-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#single-character-input-functions"}},[e._v("#")]),e._v(" Single-character Input functions")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("int getc(FILE *)")])]),e._v(" "),a("li",[a("code",[e._v("int fgetc(FILE *)")])]),e._v(" "),a("li",[a("code",[e._v("int getchar(void)")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-12-57-4.png",alt:"2020-2-8-12-57-4.png"}})]),e._v(" "),a("ul",[a("li",[e._v("these 3 functions returns -1 whether anerror or the end-of-file occurs")]),e._v(" "),a("li",[e._v("For each stream, two flags are maintained in the FILE object : an error flag and an end-of-file flag.\n"),a("ul",[a("li",[a("code",[e._v("int ferror(FILE*)")]),e._v(" returns nonzero for true, 0 otherwise")]),e._v(" "),a("li",[a("code",[e._v("int feof(FILE*)")]),e._v(" returns nonzero for true, 0 otherwise")]),e._v(" "),a("li",[a("code",[e._v("void clearerr(FILE*)")]),e._v(" clears both the error and the end-of-file flags.")])])])]),e._v(" "),a("h4",{attrs:{id:"single-character-output-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#single-character-output-functions"}},[e._v("#")]),e._v(" Single-character Output functions")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("int putc(int c, FILE *fp)")]),e._v(": print a single character")]),e._v(" "),a("li",[a("code",[e._v("int fputc(int c, FILE *fp)")]),e._v(": same asputc()exceptthat, "),a("code",[e._v("putc()")]),e._v(" can be implemented as a macro whereas "),a("code",[e._v("fputc()")]),e._v(" cannot.")]),e._v(" "),a("li",[a("code",[e._v("int putchar(int c)")]),e._v(": equivalent toputc(c, stdin).")]),e._v(" "),a("li",[e._v("All these functions returns the printed character "),a("strong",[e._v("c")]),e._v(" as an "),a("strong",[e._v("int")]),e._v(" when succesful and -1 otherwise.")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-2-8-13-1-59.png",alt:"2020-2-8-13-1-59.png"}})]),e._v(" "),a("h4",{attrs:{id:"random-file-access"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#random-file-access"}},[e._v("#")]),e._v(" Random file access")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("long ftell(FILE *stream)")]),e._v(";\n"),a("ul",[a("li",[e._v("get the current value of the file-position indicator ofa stream")])])]),e._v(" "),a("li",[a("code",[e._v("void rewind(FILE *stream)")]),e._v(";\n"),a("ul",[a("li",[e._v("reset file position indicator in a stream")])])]),e._v(" "),a("li",[a("code",[e._v("int fseek(FILE *fp, long offset, int whence)")]),e._v(" "),a("ul",[a("li",[e._v("redefine a file-position indicator in a stream :")]),e._v(" "),a("li",[e._v("SEEKSET: set position equal to offset bytes")]),e._v(" "),a("li",[e._v("SEEKCUR: set position to current locationplus offset")]),e._v(" "),a("li",[e._v("SEEKEND: set position to EOF plus offset.")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);