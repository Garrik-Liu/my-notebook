(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{189:function(t,e,r){"use strict";r.r(e);var s=r(0),a=Object(s.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),r("p",[t._v('在 Node.js 系列的第一节里, 我会先介绍 Node.js 的一些基本概念. 让你在看完这篇文章时, 能对 "什么是 Node.js?", "Node.js 能干什么?", "为什么用 Node.js?" 这三个问题有个基本的回答.')]),t._m(1),r("p",[t._v("先来看看 "),r("a",{attrs:{href:"http://nodejs.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node 官网"),r("OutboundLink")],1),t._v(" 给的答案:")]),t._m(2),r("p",[t._v("基本上, \b很多人看到上面这段话, 完全不知道它在说\b什么...")]),r("p",[t._v("下面我逐步解释一下上面这段话到底说的是什么意思:")]),t._m(3),t._m(4),r("p",[t._v('简单来说, 我们所写的 JavaScript 源代码, 是为了给人看的, 机器是看不懂的, 需要翻译成机器码, 也就是 "机器的语言", 才可以让机器执行.  在浏览器中, JavaScript 引擎负责进行代码的解释.  V8 引擎就是 Chrome 浏览器所在用的 JavaScript 引擎.  因为其支持跨平台, 就是说可以在各种操作系统上使用, 所以基于 V8 的 Node.js 就可以让我们脱离浏览器的束缚, 让 JavaScript 代码在各种各样不同的平台上运行了.')]),t._m(5),t._m(6),r("p",[t._v('我们先来说说, 什么是 "Input/Output 操作".   从字面上翻译就是 "输入/输出", 那输的是什么呢?  简单说就是 "信息".  在程序执行过程中如果需要操作系统进行 磁盘读写 或 网络通信, 我们就都统称为 "I/O 操作".  例如, 从服务器获取页面, 下载文件, 提交表单, 读取数据库都是属于这个范畴的.  一个很直观的感受, 凡是这一类操作, 我们都需要花时间 "等".  拿生活举例, 游戏没下载完, 我就玩不了; 注册表单没提交完, 账户就还不能登录.')]),r("p",[t._v('在说 "非阻塞" \b之前, 先了解什么是 "阻塞".  从字面上理解, "阻塞" 就是堵住了, 通不过的意思.  在计算机中, 程序在线程内按顺序被执行, 后面的操作必须等前面的操作结束才能被执行.  当遇到 "I/O 操作", 程序向操作系统发出 "I/O 请求", 操作系统进行 "I/O 执行", 完成后把操作结果返回给程序, 程序收到结果后继续执行后面的操作.  在等待 "I/O 操作" 结果的时间段里, 整条线程一直处于等待的状态, 这种 I/O 操作方式称为 "阻塞式 I/O".  在程序设计中, 对于高并发的任务, 在线程阻塞的情况下, 整条线程不能执行程序, 这会导致任务处理速度极慢.  常见的方案是通过多线程来解决. 但每条线程的利用率并没有增加, 同时也会导致硬件成本高昂.')]),t._m(7),t._m(8),r("p",[t._v('但在 Node.js 中, 程序所有的操作都在一个单一的主线程中进行处理, 同一时间只能处理一项任务.  为了处理高并发, 采用了 "非阻塞式 I/O", 也可以称为 "\b异步式 I/O".')]),r("p",[t._v("如果不好理解的话, 可以想象老王一个人去钓鱼, 他把鱼竿架好之后, 就在旁边等着, 等鱼漂抖动的时候就拉杆.  在等待的这段时间里, 他是什么也不干的. 因为怕鱼上钩自己看不到, 老王还一直守在鱼竿旁, 也不做其他的事情.  过了几天, 老王觉得这样效率低, 就买了十把鱼竿同时架起来.  在同一段时间内, 这种方法钓的鱼的确多了, 但老王在一个时间点只能去收一个鱼竿, 单个鱼竿的")]),t._m(9),r("p",[t._v('"事件驱动? " \b我想, 如果你 JavaScript 基础不太好的话, 对这四个字你是完全没概念的.')]),t._m(10),t._m(11),t._m(12)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"基础概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础概念","aria-hidden":"true"}},[this._v("#")]),this._v(" 基础概念")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"什么是-node-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-node-js","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是 Node.js?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\nNode.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"基于-chrome-v8-引擎的-javascript-运行环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于-chrome-v8-引擎的-javascript-运行环境","aria-hidden":"true"}},[this._v("#")]),this._v(" 基于 Chrome V8 引擎的 JavaScript 运行环境")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这句话的意思很明确, "),e("strong",[this._v("Node.js 就是一个让 JavaScript 代码能够运行的环境, 它是基于 V8 引擎的, 可以让 Javascript 代码脱离浏览器运行.")]),this._v(' 但是看完这个解释, 你可能还是会问: "\b那么, 为什么能脱离浏览器?" 先抛开 Node.js 不谈, 回到我们熟悉的前端领域, JavaScript 代码是如何在浏览器中运行的?')])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"非阻塞式-i-o"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞式-i-o","aria-hidden":"true"}},[this._v("#")]),this._v(" 非阻塞式 I/O")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v('"非阻塞式 I/O", 我知道这几个字看起来让人有点懵.  别着急, 那让我换个说法, "'),e("strong",[this._v("不会\b阻塞 JavaScript 程序执行的 Input/Output 操作")]),this._v('", 这样会不会清楚一点? 可能你还是不太懂, 那下面我就逐字地解释.')])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("线程: 程序执行流的最小单元。简单可以想象成, \b")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("并发: 在同一个时间段中, 几个\b任务同时进行.  但是在任意时间点, 有且只有一段代码在执行.  简单说, 在一段时间中, 两个任务都可以完成, 但是在每一个时间点, 只能执行其中一个任务, \b两个任务不能在一个时间点上同时进行.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"事件驱动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件驱动")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"node-js-能干什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js-能干什么","aria-hidden":"true"}},[this._v("#")]),this._v(" Node.js 能干什么?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"为什么用-node-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么用-node-js","aria-hidden":"true"}},[this._v("#")]),this._v(" 为什么用 Node.js?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"安装-node-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-node-js","aria-hidden":"true"}},[this._v("#")]),this._v(" 安装 Node.js")])}],!1,null,null,null);e.default=a.exports}}]);