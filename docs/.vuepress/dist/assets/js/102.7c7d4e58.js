(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{312:function(v,s,l){"use strict";l.r(s);var _=l(0),a=Object(_.a)({},(function(){var v=this,s=v.$createElement,l=v._self._c||s;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"servlet"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#servlet"}},[v._v("#")]),v._v(" Servlet")]),v._v(" "),l("h2",{attrs:{id:"什么是-servlet"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#什么是-servlet"}},[v._v("#")]),v._v(" 什么是 Servlet")]),v._v(" "),l("ul",[l("li",[v._v("Servlet 是运行在服务器的 Java 小程序，是 sun 公司提供的一套规范（接口）")]),v._v(" "),l("li",[v._v("用来处理客户端请求，和发出响应；")]),v._v(" "),l("li",[v._v("当服务器收到请求，就会按照一定的规则调用代码，然后返回给客户端响应；")])]),v._v(" "),l("h2",{attrs:{id:"servlet-快速入门"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#servlet-快速入门"}},[v._v("#")]),v._v(" Servlet 快速入门")]),v._v(" "),l("ul",[l("li",[v._v("在项目目录中 "),l("code",[v._v("JavaResource/src")]),v._v(" 下，创建一个包名称为 "),l("code",[v._v("com.xxxx.servlet")]),v._v("；")]),v._v(" "),l("li",[v._v("在包中创建一个 class 文件，名为 "),l("code",[v._v("FirstServlet.java")]),v._v("；")]),v._v(" "),l("li",[v._v("在该 class 中实现 Servlet 接口，也就是实现它没有完成的方法：\n"),l("ul",[l("li",[v._v("主要是 "),l("code",[v._v("service")]),v._v(" 方法，该方法用于处理请求和返回；")])])])]),v._v(" "),l("p",[l("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-22-16-28-57.png",alt:"2020-1-22-16-28-57.png"}})]),v._v(" "),l("ul",[l("li",[v._v("在 "),l("code",[v._v("web.xml")]),v._v(" 中进行 Servlet 配置：\n"),l("ul",[l("li",[l("code",[v._v("<servlet>")]),v._v(" 里面定义 servlet 的名字，和类实现的位置；")]),v._v(" "),l("li",[l("code",[v._v("<servlet-mapping>")]),v._v(" 里面做一个映射，对应的 api 访问对应的服务；")])])])]),v._v(" "),l("p",[l("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-22-16-30-55.png",alt:"2020-1-22-16-30-55.png"}})]),v._v(" "),l("ul",[l("li",[v._v("在 "),l("code",[v._v("service")]),v._v(" 方法中，通过 "),l("code",[v._v("HttpServiceResponse")]),v._v(" 对象来进行响应：")])]),v._v(" "),l("p",[l("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-22-16-31-20.png",alt:"2020-1-22-16-31-20.png"}})]),v._v(" "),l("p",[v._v("之后访问对应的 URL 就可以对 Servlet 发起请求，并获得响应了。")]),v._v(" "),l("p",[l("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-22-22-36-7.png",alt:"2020-1-22-22-36-7.png"}})]),v._v(" "),l("h2",{attrs:{id:"反射"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[v._v("#")]),v._v(" 反射")]),v._v(" "),l("h3",{attrs:{id:"类的加载"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#类的加载"}},[v._v("#")]),v._v(" 类的加载")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("当程序要使用某个类时，如果类还没有加载到内存中。系统会通过"),l("strong",[v._v("加载，连接，初始化")]),v._v("三步来实现呢对类的初始化：")]),v._v(" "),l("ul",[l("li",[v._v("加载：将 class 文件读入内存，并为之创建一个 Class 对象（字节码对象）；")]),v._v(" "),l("li",[v._v("连接：\n"),l("ul",[l("li",[v._v("验证：是否有正确的内部结构，并与其他类协调一致；")]),v._v(" "),l("li",[v._v("准备：负责为类的静态成员分配内存，并设置默认初始化值；")])])]),v._v(" "),l("li",[v._v("初始化：初始化成员变量；")])])]),v._v(" "),l("li",[l("p",[l("strong",[v._v("加载时机")]),v._v("：（执行以下操作时，会进行类的加载）")]),v._v(" "),l("ul",[l("li",[v._v("创建类的实例；")]),v._v(" "),l("li",[v._v("访问类的静态变量，为静态变量赋值；")]),v._v(" "),l("li",[v._v("调用类的静态方法；")]),v._v(" "),l("li",[v._v("初始化某个类的子类；")]),v._v(" "),l("li",[v._v("使用反射方式来强制创建某个类或者接口对应的 java.lang.Class 对象；")])])])]),v._v(" "),l("h3",{attrs:{id:"类加载器-class-loader"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#类加载器-class-loader"}},[v._v("#")]),v._v(" 类加载器 Class Loader")]),v._v(" "),l("ul",[l("li",[v._v("负责将 .class 文件加载到内存中，并为之生成对应的 Class 对象（字节码对象）；")]),v._v(" "),l("li",[v._v("我们并不需要掌握加载机制，但通过了解类加载机制，可以更好的了解程序运行；")]),v._v(" "),l("li",[v._v("类加载器分类：\n"),l("ul",[l("li",[v._v("根类加载器：负责 Java 核心类加载；")]),v._v(" "),l("li",[v._v("扩展类加载器：负责 jar 包的加载；")]),v._v(" "),l("li",[v._v("系统类加载器：负责 JVM 启动时，加载来自 java 命令的 class 文件；")])])])]),v._v(" "),l("h3",{attrs:{id:"什么是反射"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#什么是反射"}},[v._v("#")]),v._v(" 什么是反射")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("创建对象的三个阶段：")]),v._v(" "),l("ul",[l("li",[v._v("源文件阶段 “.java 文件”；")]),v._v(" "),l("li",[v._v("编译成字节码阶段 “.class 文件”；")]),v._v(" "),l("li",[v._v("创建对象阶段 “new 对象名称”；")])])]),v._v(" "),l("li",[l("p",[v._v("内省：在运行时能够获取 JavaBean 当中的属性名称和 get 和 set 方法；")])]),v._v(" "),l("li",[l("p",[l("strong",[v._v("反射")]),v._v("：")]),v._v(" "),l("ul",[l("li",[v._v("Java 反射机制是在运行状态中，对于任意的一个类，都能知道这个类的所有属性和方法；")]),v._v(" "),l("li",[v._v("对于任意一个对象，都能够调用它的任意一个方法和属性；")]),v._v(" "),l("li",[l("strong",[v._v("这种动态获取的信息以及动态调用对象的方法的功能被称为“反射机制”")]),v._v("；")]),v._v(" "),l("li",[v._v("要想使用反射，必须获取字节码文件；")])])]),v._v(" "),l("li",[l("p",[v._v("获取字节码文件：")]),v._v(" "),l("ul",[l("li",[v._v("Object 类的 "),l("code",[v._v("getClass()")]),v._v(" 方法；")]),v._v(" "),l("li",[v._v("静态属性 class；")]),v._v(" "),l("li",[v._v("Class 类中静态方法 "),l("code",[v._v("forName()")]),v._v("；")]),v._v(" "),l("li",[l("img",{attrs:{src:"https://garrik-default-imgs.oss-accelerate.aliyuncs.com/imgs/2020-1-22-23-19-31.png",alt:"2020-1-22-23-19-31.png"}})])])])])])}),[],!1,null,null,null);s.default=a.exports}}]);