{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{164:function(s,t,a){\"use strict\";a.r(t);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a(\"div\",{staticClass:\"content\"},[a(\"h1\",{attrs:{id:\"基本指南\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本指南\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 基本指南\")]),a(\"h2\",{attrs:{id:\"什么是-express\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是-express\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 什么是 Express ?\")]),a(\"p\",[s._v(\"Node.js 基于 Chrome 的 V8引擎，使 JavaScript 可以脱离于浏览器，在服务器上运行。因为有了 Node.js, 让前端\\b开发人员也\\b可以\\b去写后端代码.\")]),a(\"p\",[s._v(\"因为 Node.js 只提供一些底层功能，开发者需要在此基础上编写很多冗长的代码。\")]),a(\"p\",[s._v(\"Express 作为一个\\b架构与 Node.js 之上，以中间件, 路由, 模板引擎为核心, 提供了很多简单易用的 API 和 一系列强大的特性的轻量 Web 应用框架.\")]),a(\"p\",[s._v(\"Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。\")]),a(\"p\",[s._v(\"Express 之于 Node.js，就像 jQuery 之于 JavaScript;\")]),a(\"h3\",{attrs:{id:\"一个-node-js-程序\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一个-node-js-程序\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 一个 Node.js 程序\")]),a(\"p\",[s._v(\"假如创建一个 Node.js 服务器, 这整个程序就是一个 JavaScript 函数。这整个程序所做的事情就是接收请求，然后根据请求的内容去返回相应响应。比如说浏览器请求主页，它就会返回一个 HTML 文件。\")]),a(\"p\",[s._v(\"在不用 Express 的情况下，过程就像\\b下图：\")]),a(\"p\",[a(\"img\",{attrs:{src:\"https://i.imgur.com/pSx1DBJ.png\",alt:\"Screen Shot 2018-07-09 at 11.43.22 AM\"}})]),a(\"p\",[s._v(\"JavaScript 函数接收请求，在这里\\b被称作 request handler。\")]),a(\"p\",[s._v(\"Node.js's HTTP server 处理 客户端 与 函数 之间的连接，所以我不用去管什么网络协议问题。\")]),a(\"p\",[s._v(\"在函数之中，它接收两个参数，请求对象 和 响应对象。\")]),a(\"p\",[s._v(\"\\bNode.js 程序简单来说就是处理 请求 和 响应。\\b没有很复杂，但是因为原生提供的功能比较底层，所以代码量很大。使用框架可以让编写更简洁。\")]),a(\"p\",[a(\"img\",{attrs:{src:\"https://i.imgur.com/g9ccPiM.png\",alt:\"Screen Shot 2018-07-09 at 11.52.16 AM\"}})]),a(\"p\",[s._v(\"不用x像\\b原生代码里写一个\\b巨大的 request handler。Express 把它根据请求内容拆分成很多小函数，有的处理所有的请求，有的只处理 GET 请求，有的只处理针对一个\\b特定 URL 的请求，等等。\")]),a(\"h3\",{attrs:{id:\"一个-express-程序\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一个-express-程序\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 一个 Express 程序\")]),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token comment\"}},[s._v(\"// 引入模块\")]),s._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[s._v(\"var\")]),s._v(\" express \"),a(\"span\",{attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[s._v(\"require\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[s._v(\"'express'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token comment\"}},[s._v(\"// 建立 express app\")]),s._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[s._v(\"var\")]),s._v(\" app \"),a(\"span\",{attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[s._v(\"express\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\napp\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[s._v(\"get\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[s._v(\"'/'\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"req\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" res\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[s._v(\"=>\")]),s._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    res\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[s._v(\"send\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[s._v('\"Hello World!\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\\napp\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[s._v(\"listen\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{attrs:{class:\"token number\"}},[s._v(\"3000\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[s._v(\"function\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    console\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[s._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[s._v('\"监听3000端口\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"express-的-小-理念\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#express-的-小-理念\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(' Express 的 \"小\" 理念')]),a(\"p\",[s._v(\"Express 框架并不会给你的代码限制在一个固定刻板的结构内.\")]),a(\"p\",[s._v(\"因为模块化机制, 程序一般都是以 Express 框架为主体, 结合各种外部模块, 去实现具体功能.\")]),a(\"p\",[s._v(\"但提供了灵活性的\\b同时, 这也使 Express 只提供了最基本的功能, 很多时候, 我们需要去找适合项目的第三方模块.\")]),a(\"h2\",{attrs:{id:\"express-核心\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#express-核心\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" Express 核心\")]),a(\"p\",[s._v(\"一直都在说, Express 让 Node.js 编写变的简单, 但是具体是怎么做到的呢?\")]),a(\"p\",[s._v(\"这主要是依靠于 Express 的两个核心特性:\")]),a(\"ul\",[a(\"li\",[s._v(\"Middleware\")]),a(\"li\",[s._v(\"Routing\")])]),a(\"h3\",{attrs:{id:\"中间件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#中间件\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 中间件\")]),a(\"p\",[s._v(\"\\b在原生的 Node Web 程序里, 服务器接收客户端发来的请求, 然后经过请求处理函数( request handler )处理后, 返回\\b给客户端一个响应.\")]),a(\"p\",[s._v(\"这个请求处理函数往往随着需求的增加而增大, 最后难以管理. 在 Express 里, 大函数被\\b拆分成了多个小函数, 每个函数只处理一小部分任务, 这些小函数就被称作 \"),a(\"strong\",[s._v(\"中间件\")])]),a(\"p\",[s._v(\"\\b中间件再根据\\b执行的\\b先后顺序构成 中间件链条.\")]),a(\"h3\",{attrs:{id:\"路由\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#路由\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 路由\\b\")]),a(\"p\",[s._v(\"不同于中间件什么请求都处理，路由根据 客户端发送过来的 URL 或者 HTTP\\b 方法 来做出相应的处理.\")])])}],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}