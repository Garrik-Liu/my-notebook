{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{160:function(t,s,a){\"use strict\";a.r(s);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"content\"},[a(\"h1\",{attrs:{id:\"函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 函数\")]),a(\"p\",[t._v(\"函数可以封装任意多条语句，而且可以在任何地方、任何时候调用执行。函数实际上是对象。每个函数都是 \"),a(\"code\",[t._v(\"Function\")]),t._v(\" 类型的实例. 都与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。\")]),a(\"p\",[t._v(\"定义函数的方式有三种：一种是函数声明，另一种就是函数表达式。还有一种是使用 \"),a(\"code\",[t._v(\"Function\")]),t._v(\" 构造函数\")]),a(\"p\",[a(\"strong\",[t._v(\"函数声明\")]),t._v(\"的语法是这样的:\")]),a(\"p\",[t._v(\"使用 \"),a(\"code\",[t._v(\"function\")]),t._v(\" 关键字来声明，函数名后跟一组参数以及函数体\")]),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"functionName\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"arg0\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" arg1\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" arg2\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//函数体\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"函数声明, 它的一个重要特征就是函数声明提升（function declaration hoisting），意思是在执行代码之前会先读取函数声明。这就意味着可以把函数声明放在调用它的语句后面。\")]),a(\"p\",[a(\"strong\",[t._v(\"函数表达式\")]),t._v(\"的语法是这样的:\")]),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function-variable function\"}},[t._v(\"functionName\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"arg0\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" arg1\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" arg2\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//函数体 \")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"这种形式看起来好像是常规的变量赋值语句，即创建一个函数并将它赋值给变量。这种情况下创建的函数叫做匿名函数（anonymous function），因为 \"),a(\"code\",[t._v(\"function\")]),t._v(\" 关键字后面没有标识符。\")]),a(\"p\",[a(\"strong\",[t._v(\"Function 构造函数\")]),t._v(\" 可以接收任意数量的参数，但最后一个参数始终都被看成是函数体, 前面的参数则枚举出了新函数的参数\")]),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" sum \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token class-name\"}},[t._v(\"Function\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"num1\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"num2\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"return num1 + num2\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 不推荐\")]),t._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"内部对象\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内部对象\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 内部对象\")]),a(\"h3\",{attrs:{id:\"arguments-对象\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arguments-对象\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" arguments 对象\")]),a(\"p\",[t._v(\"函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。ECMAScript 中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数, 函数体内可以通过 \"),a(\"code\",[t._v(\"arguments\")]),t._v(\" 对象来访问这个参数数组.\")]),a(\"p\",[a(\"code\",[t._v(\"arguments\")]),t._v(\" 是对象, 不是 \"),a(\"code\",[t._v(\"Array\")]),t._v(\" 的实例, 但是可以像数组一样用方括号语法访问它的每一个属性, 使用 \"),a(\"code\",[t._v(\"length\")]),t._v(\" 属性来确定传递进来多少个参数\")]),a(\"p\",[t._v(\"有点像下面这样:\")]),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" arguments \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"0\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" arg0\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"1\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" arg1\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"2\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" arg2\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"...\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"N-1\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" argN\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\nconsole\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"arguments\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// arg2\")]),t._v(\"\\n\")])])]),a(\"p\",[a(\"code\",[t._v(\"arguments\")]),t._v(\" 的值永远与对应命名参数的值保持同步, \"),a(\"code\",[t._v(\"arguments\")]),t._v(\" 对象中的值会自动反映到对应的命名参数, 修改 \"),a(\"code\",[t._v(\"arguments\\b\")]),t._v(\" 对象属性的值, 也会修改对应的命名参数\")]),a(\"p\",[a(\"code\",[t._v(\"arguments\")]),t._v(\" 对象还有一个名叫 \"),a(\"code\",[t._v(\"callee\")]),t._v(\" 的属性，该属性是一个指针，指向拥有这个 \"),a(\"code\",[t._v(\"arguments\")]),t._v(\" 对象的函数\")]),a(\"p\",[t._v(\"一个经典用法是:\")]),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"factorial\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<=\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"factorial\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"-\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"定义阶乘函数一般都要用到递归算法；如上面的代码所示，在函数有名字，而且名字以后也不会变的情况下，这样定义没有问题。但问题是这个函数的执行与函数名 \"),a(\"code\",[t._v(\"factorial\")]),t._v(\" 紧紧耦合在了一起。为了消除这种紧密耦合的现象，可以像下面这样使用 \"),a(\"code\",[t._v(\"arguments.callee\")]),t._v(\"。\")]),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"factorial\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<=\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" arguments\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"callee\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"-\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[a(\"code\",[t._v(\"callee\")]),t._v(\" 有一个属性是 \"),a(\"code\",[t._v(\"caller\")]),t._v(\", 这个属性中保存着调用当前函数的函数的引用, 如果是在全局作用域中调用当前函数，它的值为 \"),a(\"code\",[t._v(\"null\")]),t._v(\"。\")]),a(\"h3\",{attrs:{id:\"this\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#this\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" this\")]),a(\"p\",[a(\"code\",[t._v(\"this\")]),t._v(\" 引用的是函数执行的环境对象. 比如, 当在网页的全局作用域中调用函数时，\"),a(\"code\",[t._v(\"this\")]),t._v(\" 对象引用的就是 \"),a(\"code\",[t._v(\"window\")])]),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[t._v(\"window\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"color \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"red\"')]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" o \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" color\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token string\"}},[t._v('\"blue\"')]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"sayColor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"alert\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"color\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"sayColor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"     \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v('//\"red\"')]),t._v(\"\\n\\no\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"sayColor \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" sayColor\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\no\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"sayColor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"   \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v('//\"blue\"')]),t._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"没有重载\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#没有重载\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 没有重载\")]),a(\"p\",[t._v(\"ECMAScript 函数不能像传统意义上那样实现重载, 即为一个函数编写两个定义.\")]),a(\"p\",[t._v(\"两个同名函数出现, 后面的覆盖前面的.\")]),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"addSomeNumber\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"100\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"addSomeNumber\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"200\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" result \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"addSomeNumber\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"100\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//300\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"因为函数名保存的是指向函数对象的\\b指针, 以上代码实际上等价于下面的代码:\")]),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function-variable function\"}},[t._v(\"addSomeNumber\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"100\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token function-variable function\"}},[t._v(\"addSomeNumber\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"200\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" result \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"addSomeNumber\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"100\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"//300\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"因为用了相同的函数名, 则指针指向了后者.\")]),a(\"h2\",{attrs:{id:\"递归\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#递归\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 递归\")]),a(\"h2\",{attrs:{id:\"闭包\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#闭包\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 闭包\")]),a(\"h2\",{attrs:{id:\"模仿块级作用域\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#模仿块级作用域\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 模仿块级作用域\")]),a(\"h2\",{attrs:{id:\"私有变量\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#私有变量\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 私有变量\")])])}],!1,null,null,null);s.default=o.exports}}]);","extractedComments":[]}