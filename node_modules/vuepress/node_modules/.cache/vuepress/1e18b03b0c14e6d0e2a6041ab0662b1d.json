{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/基础篇/基础概念.md?vue&type=template&id=73ebd13b","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/基础篇/基础概念.md","mtime":1535502696786},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._m(0),_c('p',[_vm._v(\"在 Node.js 系列的第一节里, 我会先介绍 Node.js 的一些基本概念. 让你在看完这篇文章时, 能对 \\\"什么是 Node.js?\\\", \\\"Node.js 能干什么?\\\", \\\"为什么用 Node.js?\\\" 这三个问题有个基本的回答.\")]),_vm._m(1),_c('p',[_vm._v(\"先来看看 \"),_c('a',{attrs:{\"href\":\"http://nodejs.cn/\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"Node 官网\"),_c('OutboundLink')],1),_vm._v(\" 给的答案:\")]),_vm._m(2),_c('p',[_vm._v(\"基本上, \\b很多人看到上面这段话, 完全不知道它在说\\b什么...\")]),_c('p',[_vm._v(\"下面我逐步解释一下上面这段话到底说的是什么意思:\")]),_vm._m(3),_vm._m(4),_c('p',[_vm._v(\"简单来说, 我们所写的 JavaScript 源代码, 是为了给人看的, 机器是看不懂的, 需要翻译成机器码, 也就是 \\\"机器的语言\\\", 才可以让机器执行.  在浏览器中, JavaScript 引擎负责进行代码的解释.  V8 引擎就是 Chrome 浏览器所在用的 JavaScript 引擎.  因为其支持跨平台, 就是说可以在各种操作系统上使用, 所以基于 V8 的 Node.js 就可以让我们脱离浏览器的束缚, 让 JavaScript 代码在各种各样不同的平台上运行了.\")]),_vm._m(5),_vm._m(6),_c('p',[_vm._v(\"我们先来说说, 什么是 \\\"Input/Output 操作\\\".   从字面上翻译就是 \\\"输入/输出\\\", 那输的是什么呢?  简单说就是 \\\"信息\\\".  在程序执行过程中如果需要操作系统进行 磁盘读写 或 网络通信, 我们就都统称为 \\\"I/O 操作\\\".  例如, 从服务器获取页面, 下载文件, 提交表单, 读取数据库都是属于这个范畴的.  一个很直观的感受, 凡是这一类操作, 我们都需要花时间 \\\"等\\\".  游戏没下完, 我玩不了; 注册表单没提交完, 账户就不能登录. 等待总是让人厌烦的.\")]),_c('p',[_vm._v(\"在说 \\\"非阻塞\\\" \\b之前, 先了解什么是 \\\"阻塞\\\".  从字面上理解, \\\"阻塞\\\" 就是堵住了, 通不过的意思.  在一个\\b运行的程序的一条线程内, 程序按顺序执行, 后面的操作必须等前面的操作结束才能执行.  通常 \\\"I/O 操作\\\" 所花费时间会比较长. 在等待的时间里, 后面的操作得不到执行, 整个线程的利用效率低下.  如果有两个 \\\"I/O 操作\\\", 每个所需的时间都为 5 秒, 在阻塞的情况下, \\b完成\\b这两个操作所需时间就为 2 x 5s = 10 秒.  类比举例, 假如一个餐厅规定, 厨师一次只能做一道菜, \\b后面的菜必须等前面的做完.  如果客人点了一个烤蛋糕, 厨师在用烤箱的时候, 两个手是空出来的, 但是\\b餐厅规定必须等蛋糕烤好, 厨师才能做下一道菜.  很明显这家餐厅上菜一定很慢.  直观的提高\\b上菜速度的办法是, 餐厅多雇几个厨师, 但是这样做单个厨师效率没有提升, 同时经营成本也\\b增高了.  在程序设计中, 对于高并发的任务, 要想提高吞吐量, 在线程阻塞的情况下, 可以通过多线程来解决. 但这无疑会造成资源的浪费, 单个线程的利用效率低下.\")]),_vm._m(7),_vm._m(8),_c('p',[_vm._v(\"但在 Node.js 中, 程序所有的操作都在一个单一的主线程中进行处理, 同一时间只能处理一项任务.  为了处理高并发, 采用了 \\\"非阻塞式 I/O\\\", 也可以称为 \\\"\\b异步式 I/O\\\".\")]),_vm._m(9),_c('p',[_vm._v(\"\\\"事件驱动? \\\" \\b我想, 如果你 JavaScript 基础不太好的话, 对这四个字你是完全没概念的.\")]),_vm._m(10),_vm._m(11),_vm._m(12),_vm._m(13)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h1',{attrs:{\"id\":\"基础概念\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#基础概念\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 基础概念\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"什么是-node-js\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#什么是-node-js\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 什么是 Node.js?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('blockquote',[_c('p',[_vm._v(\"Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\\nNode.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"基于-chrome-v8-引擎的-javascript-运行环境\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#基于-chrome-v8-引擎的-javascript-运行环境\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 基于 Chrome V8 引擎的 JavaScript 运行环境\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"这句话的意思很明确, \"),_c('strong',[_vm._v(\"Node.js 就是一个让 JavaScript 代码能够运行的环境, 它是基于 V8 引擎的, 可以让 Javascript 代码脱离浏览器运行.\")]),_vm._v(\" 但是看完这个解释, 你可能还是会问: \\\"\\b那么, 为什么能脱离浏览器?\\\" 先抛开 Node.js 不谈, 回到我们熟悉的前端领域, JavaScript 代码是如何在浏览器中运行的?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"非阻塞式-i-o\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#非阻塞式-i-o\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 非阻塞式 I/O\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"\\\"非阻塞式 I/O\\\", 我知道这几个字看起来让人有点懵.  别着急, 那让我换个说法, \\\"\"),_c('strong',[_vm._v(\"不会\\b阻塞 JavaScript 程序执行的 Input/Output 操作\")]),_vm._v(\"\\\", 这样会不会清楚一点? 可能你还是不太懂, 那下面我就逐字地解释.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('blockquote',[_c('p',[_vm._v(\"线程:\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('blockquote',[_c('p',[_vm._v(\"并发: 在同一个时间段中, 几个\\b任务同时进行.  但是在任意时间点, 有且只有一段代码在执行.  简单说, 在一段时间中, 两个任务都可以完成, 但是在每一个时间点, 只能执行其中一个任务, \\b两个任务不能在一个时间点上同时进行.\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"事件驱动\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#事件驱动\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 事件驱动\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"node-js-是单线程吗\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#node-js-是单线程吗\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Node.js 是单线程吗?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"node-js-能干什么\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#node-js-能干什么\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Node.js 能干什么?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"为什么用-node-js\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#为什么用-node-js\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 为什么用 Node.js?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"安装-node-js\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#安装-node-js\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 安装 Node.js\")])}]\n\nexport { render, staticRenderFns }"]}