{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/others/ols/files/PL_SQL.md?vue&type=template&id=439a103e","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/others/ols/files/PL_SQL.md","mtime":1532914446314},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"pl-sql\\\"><a href=\\\"#pl-sql\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> PL/SQL</h1><h2 id=\\\"pl-sql-program-blocks\\\"><a href=\\\"#pl-sql-program-blocks\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> PL/SQL Program Blocks</h2><p>PL/SQL stands for Procedural Language extension of SQL</p><p>A PL/SQL program can divided up into three possible sections:</p><ol><li>Declaration Section</li><li>Body Section</li><li>Exception Section</li></ol><p>Note that the Declaration and Exception sections are optional.</p><h3 id=\\\"declaration-section\\\"><a href=\\\"#declaration-section\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Declaration Section</h3><p>Use the Declaration section to declare program variables. Each program variable declaration is of the syntax:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code>variable_name data_type<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>Scalar Data Types include:\\n• VARCHAR2\\n• CHAR\\n• DATE\\n• INTERVAL YEAR TO MONTH\\n• INTERVAL DAY TO SECOND\\n• NUMBER\\n• BINARY_INTEGER, INTEGER, INT, SMALLINT\\n• DEC, DECIMAL, DOUBLE PRECISION, NUMERIC, REAL, BINARY_FLOAT, BINARY_DOUBLE\\n• BOOLEAN</p><p>Reference Types</p><p><strong>%TYPE</strong>\\nThis type specifies a variable that references a single database field.</p><p>Syntax:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code>variable_name tablename<span class=\\\"token punctuation\\\">.</span>fieldname<span class=\\\"token operator\\\">%</span><span class=\\\"token keyword\\\">TYPE</span> \\n</code></pre></div><p><strong>%ROWTYPE</strong>\\nThis type specifies a variable that references an entire data record.</p><p>Syntax:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code>variable_name tablename<span class=\\\"token operator\\\">%</span>ROWTYPE \\n</code></pre></div><h3 id=\\\"body-section\\\"><a href=\\\"#body-section\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Body Section</h3><p>The Body section contains the actual program statements for the PL/SQL program. It includes:</p><ul><li>Comments\\n<ul><li>/* Multi-line */</li><li>-- Single line</li></ul></li><li>Arithmetic Operators: +,-,*,/,**</li><li>String Concatenation Operator: ||</li><li>String Functions\\n<ul><li>LENGTH</li><li>LTRIM</li><li>RTRIM</li><li>UPPER</li><li>LOWER</li><li>INITCAP</li><li>INSTR (one-based index)</li><li>SUBSTR (one-based index)</li></ul></li><li>Assignment Statements (:=)</li><li>Relational Operators: =, &lt;&gt;, !=, &gt;, &gt;=, &lt;, &lt;=</li><li>Logical Operators: NOT, AND, OR</li><li>Decision Statements (IF / THEN / ELSIF / ELSE, CASE)</li><li>Loop Statements (LOOP, WHILE, FOR)</li><li>DML Statements (SELECT, INSERT, UPDATE, DELETE)</li><li>Explicit Cursor Statements (OPEN, FETCH, CLOSE)</li></ul><h4 id=\\\"output\\\"><a href=\\\"#output\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Output</h4><p>To output values to the console, use the functions</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code>DBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">)</span>\\nDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">)</span>\\nDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>NEW_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h4 id=\\\"assignment-statments\\\"><a href=\\\"#assignment-statments\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Assignment Statments</h4><p>Use the <code>:=</code> operator to assign a value to a variable.</p><p>E.g.</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code>var :<span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">value</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"case-statements\\\"><a href=\\\"#case-statements\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CASE Statements</h4><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">CASE</span> var\\n    <span class=\\\"token keyword\\\">WHEN</span> value1 <span class=\\\"token keyword\\\">THEN</span>\\n       statement1\\n    <span class=\\\"token keyword\\\">WHEN</span> value2 <span class=\\\"token keyword\\\">THEN</span>\\n       statement2\\n    <span class=\\\"token keyword\\\">ELSE</span>\\n       statement3\\n<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">CASE</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">CASE</span>\\n    <span class=\\\"token keyword\\\">WHEN</span> boolean_expression1 <span class=\\\"token keyword\\\">THEN</span>\\n       statement1\\n    <span class=\\\"token keyword\\\">WHEN</span> boolean_expression2 <span class=\\\"token keyword\\\">THEN</span>\\n       statement2\\n    <span class=\\\"token keyword\\\">ELSE</span>\\n       statement3\\n<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">CASE</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"loop-types\\\"><a href=\\\"#loop-types\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Loop Types</h4><p>LOOP ... EXIT</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">LOOP</span>\\n    <span class=\\\"token keyword\\\">IF</span> condition <span class=\\\"token keyword\\\">THEN</span>\\n       <span class=\\\"token keyword\\\">EXIT</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">IF</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">LOOP</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>LOOP ... EXIT WHEN</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">LOOP</span>\\n    <span class=\\\"token keyword\\\">EXIT</span> <span class=\\\"token keyword\\\">WHEN</span> condition<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">LOOP</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>WHILE ... LOOP</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">WHILE</span> condition <span class=\\\"token keyword\\\">LOOP</span>\\n<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">LOOP</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"loop-continuation\\\"><a href=\\\"#loop-continuation\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Loop Continuation</h4><p>To continue a loop instead of terminating it, replace <code>EXIT</code> or <code>EXIT WHEN</code> with <code>CONTINUE</code> or <code>CONTINUE WHEN</code>.</p><h4 id=\\\"for-loops\\\"><a href=\\\"#for-loops\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> FOR LOOPs</h4><p>In the case of FOR loops, the loop variable is locally declared within the loop statement. That means, it is not necessary to declare the variable in the DECLARE section of the PL/SQL block. Furthermore, a variable declared within the DECLARE section of the PL/SQL block will not be used by the FOR loop.</p><p>FOR LOOP</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">FOR</span> var <span class=\\\"token operator\\\">IN</span> <span class=\\\"token keyword\\\">start</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">LOOP</span>\\n<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">LOOP</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>REVERSE FOR LOOP</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">FOR</span> var <span class=\\\"token operator\\\">IN</span> REVERSE <span class=\\\"token keyword\\\">end</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token keyword\\\">start</span>\\n<span class=\\\"token keyword\\\">LOOP</span>\\n<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">LOOP</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"exception-section\\\"><a href=\\\"#exception-section\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Exception Section</h3><p>Use the Exception section to handle run-time exceptions.</p><p>This section can be used to catch specific types of pre-defined exceptions or generically catch undefined exceptions.</p><p>Syntax:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">WHEN</span> exception_type <span class=\\\"token keyword\\\">THEN</span>\\n</code></pre></div><p>OR</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">WHEN</span> OTHERS <span class=\\\"token keyword\\\">THEN</span>\\n</code></pre></div><p>User-defined exceptions can also be defined (in the Declaration section) and raised (in the Body section).</p><h2 id=\\\"first-example\\\"><a href=\\\"#first-example\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> First Example</h2><p>For our first program, we will simply display the numbers from 1 to 10 on the output screen.</p><p>A PL/SQL code block executed inside a script is known as an anonymous PL/SQL block.</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SET</span> SERVEROUTPUT <span class=\\\"token keyword\\\">ON</span> SIZE <span class=\\\"token number\\\">4000</span>\\n\\n<span class=\\\"token comment\\\">/* Our First PL/SQL Program */</span>\\n<span class=\\\"token keyword\\\">DECLARE</span>\\n\\tcountnum BINARY_INTEGER<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">limit</span> BINARY_INTEGER :<span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">BEGIN</span>\\n\\t<span class=\\\"token keyword\\\">IF</span> <span class=\\\"token keyword\\\">limit</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token keyword\\\">THEN</span> <span class=\\\"token comment\\\">-- Check the limit value</span>\\n\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Invalid count limit.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">ELSE</span>\\n\\t\\t<span class=\\\"token keyword\\\">FOR</span> countvar <span class=\\\"token operator\\\">IN</span> <span class=\\\"token number\\\">1.</span><span class=\\\"token number\\\">.10</span> <span class=\\\"token comment\\\">-- variable countvar is declared local for the FOR loop</span>\\n\\t\\t<span class=\\\"token keyword\\\">LOOP</span>\\n\\t\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT<span class=\\\"token punctuation\\\">(</span>countvar <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">':'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">CASE</span> countvar\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">WHEN</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token keyword\\\">THEN</span>\\n\\t\\t\\t\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">' At the beginning.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">WHEN</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token keyword\\\">THEN</span>\\n\\t\\t\\t\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">' Half way there.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">WHEN</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token keyword\\\">THEN</span>\\n\\t\\t\\t\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">' Last one.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">ELSE</span>\\n\\t\\t\\t\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>NEW_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">CASE</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">LOOP</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>NEW_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">-- Print a new line character</span>\\n\\n\\t\\t<span class=\\\"token comment\\\">-- Repeat the same loop but using LOOP and EXIT WHEN; replace CASE with IF ... ELSIF ... ELSE</span>\\n\\t\\tcountnum :<span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">LOOP</span>\\n\\t\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT<span class=\\\"token punctuation\\\">(</span>countnum <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">':'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">IF</span> countnum <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token keyword\\\">THEN</span>\\n\\t\\t\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">' At the beginning.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tELSIF countnum <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token keyword\\\">THEN</span>\\n\\t\\t\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">' Half way there.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tELSIF countnum <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token keyword\\\">THEN</span>\\n\\t\\t\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">' Last one.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">ELSE</span>\\n\\t\\t\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>NEW_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">IF</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">EXIT</span> <span class=\\\"token keyword\\\">WHEN</span> countnum <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tcountnum :<span class=\\\"token operator\\\">=</span> countnum <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">LOOP</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">IF</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">END</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">/</span>\\n</code></pre></div><h2 id=\\\"implicit-cursors\\\"><a href=\\\"#implicit-cursors\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Implicit Cursors</h2><p>The output of a SELECT query can be assigned to an implicit cursor providing the query returns <strong>exactly one row</strong></p><p>Example:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SET</span> SERVEROUTPUT <span class=\\\"token keyword\\\">ON</span> SIZE <span class=\\\"token number\\\">4000</span>\\n\\n<span class=\\\"token comment\\\">/* Display the name for manager #7566 and the number of employees the manager manages */</span>\\n\\n<span class=\\\"token keyword\\\">DECLARE</span>\\n\\tmgrsearch <span class=\\\"token keyword\\\">INTEGER</span> :<span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">7566</span><span class=\\\"token punctuation\\\">;</span>\\n\\tf_ename emp<span class=\\\"token punctuation\\\">.</span>ename<span class=\\\"token operator\\\">%</span><span class=\\\"token keyword\\\">TYPE</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">-- define f_ename to have the same type as emp.ename</span>\\n\\ta_count <span class=\\\"token keyword\\\">INTEGER</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">BEGIN</span>\\n\\t<span class=\\\"token keyword\\\">SELECT</span> ename <span class=\\\"token keyword\\\">INTO</span> f_ename <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> empno <span class=\\\"token operator\\\">=</span> mgrsearch<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">INTO</span> a_count <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> mgr <span class=\\\"token operator\\\">=</span> mgrsearch<span class=\\\"token punctuation\\\">;</span>\\n\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span>f_ename <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">' manages '</span> <span class=\\\"token operator\\\">||</span> a_count <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">' employee(s).'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\n\\t<span class=\\\"token comment\\\">-- Could also have used a subquery.  E.g.</span>\\n\\t<span class=\\\"token keyword\\\">SELECT</span> ename<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> mgr <span class=\\\"token operator\\\">=</span> mgrsearch<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">INTO</span> f_ename<span class=\\\"token punctuation\\\">,</span> a_count <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> empno <span class=\\\"token operator\\\">=</span> mgrsearch<span class=\\\"token punctuation\\\">;</span>\\n\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span>f_ename <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">' manages '</span> <span class=\\\"token operator\\\">||</span> a_count <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">' employee(s).'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nEXCEPTION\\n\\t<span class=\\\"token keyword\\\">WHEN</span> NO_DATA_FOUND <span class=\\\"token keyword\\\">THEN</span>\\n\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'There is no manager with employee number '</span> <span class=\\\"token operator\\\">||</span> mgrsearch <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">WHEN</span> OTHERS <span class=\\\"token keyword\\\">THEN</span>\\n\\t\\tDBMS_OUTPUT<span class=\\\"token punctuation\\\">.</span>PUT_LINE<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'An unexpected error has occurred.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">END</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">/</span>\\n</code></pre></div><p>If the SELECT statement used with an implicit cursor returns zero rows or more than one row, an error results.</p><p>This program displays the name of employee number 7566 as well as how many employees he manages.</p><p>Common exception types include:</p><ul><li>DUP_VAL_ON_INDEX — an attempt was made to store a duplicate column value on a column with a UNIQUE or PRIMARY KEY constraint</li><li>NO_DATA_FOUND — a SELECT ... INTO statement did not return any rows.</li><li>TOO_MANY_ROWS — a SELECT ... INTO statement returned more than one row.</li><li>INVALID_NUMBER — the program has failed to convert a string into a number.</li><li>ZERO_DIVIDE — a divide by zero has occurred.</li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}