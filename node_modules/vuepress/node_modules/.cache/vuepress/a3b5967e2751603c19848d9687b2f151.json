{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/数据结构与算法/前言.md?vue&type=template&id=67b25a10","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/数据结构与算法/前言.md","mtime":1538403968938},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"前言\\\"><a href=\\\"#前言\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前言</h1><h2 id=\\\"为什么要学数据结构和算法\\\"><a href=\\\"#为什么要学数据结构和算法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么要学数据结构和算法?</h2><p>虽然很多业务开发工程师, 在日常工作中, 知识简单的在做 &quot;增删改查&quot;.  根本用不到数据结构和算法.  但拥有数据结构和算法的知识, 可以让我们更好的理解和用好这些\\b类库, 框架.</p><p>同时学会\\b数据结构和算法, 可以让我们的代码水平更上一个台阶.  \\b高性能的代码, 可以让我们的行业竞争力扶摇直上.</p><h2 id=\\\"什么是数据结构-什么是算法\\\"><a href=\\\"#什么是数据结构-什么是算法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么是数据结构? 什么是算法?</h2><p>从广义上讲，<strong>数据结构</strong>就是指一组数据的存储结构。<strong>算法</strong>就是操作数据的一组方法</p><p>从狭义上讲, 是指某些著名的数据结构和算法，比如队列、栈、堆、二分查找、动态规划等。</p><p>数据结构和算法是相辅相成的。数据结构是为算法服务的，算法要作用在特定的数据结构之上。我们无法孤立数据结构来讲算法，也无法孤立算法来讲数据结构。</p><p>比如，因为数组具有随机访问的特点，常用的二分查找算法需要用数组来存储数据。但如果我们选择链表这种数据结构，二分查找算法就无法工作了，因为链表并不支持随机访问。</p><h2 id=\\\"都要学什么\\\"><a href=\\\"#都要学什么\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 都要学什么?</h2><p>首先第一点, 要掌握数据结构与算法中最重要的概念——<strong>复杂度分析</strong>。</p><p>数据结构和算法解决的是如何更省、更快地存储和处理数据的问题，因此，我们就需要一个考量效率和资源消耗的方法，这就是复杂度分析方法.</p><p>下面这张图几乎涵盖了所有数据结构和算法书籍中都会讲到的知识点。</p><p><img src=\\\"https://i.imgur.com/YmpcfuX.jpg\\\" alt=\\\"913e0ababe43a2d57267df5c5f0832a7\\\"></p><p>但是日常中很多都不常用.  经验总结有 20 个最常用的、最基础数据结构与算法.</p><p>10 个数据结构：<strong>数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树</strong>；</p><p>10 个算法：<strong>递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。</strong></p><p>学习时不要死记硬背, 而是要学习它的, <strong>“来历”</strong>, <strong>“自身的特点”</strong>, “<strong>适合解决的问题”</strong> 以及 <strong>“实际的应用场景”</strong>。</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}