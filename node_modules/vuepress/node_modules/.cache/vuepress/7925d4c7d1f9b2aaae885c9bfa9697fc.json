{"remainingRequest":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/Express/中间件.md?vue&type=template&id=09e6c0d1","dependencies":[{"path":"/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/Express/中间件.md","mtime":1531077269085},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1530932815982},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1530932815981},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1530932816121}],"contextDependencies":[],"result":["\n<div class=\"content\"><p><a href=\"http://www.expressjs.com.cn/guide/using-middleware.html\" target=\"_blank\" rel=\"noopener noreferrer\">Express文档链接<OutboundLink/></a></p>\n<h2 id=\"概念\"><a class=\"header-anchor\" href=\"#概念\" aria-hidden=\"true\">#</a> 概念</h2>\n<p>从概念上讲，中间件是一种功能的封装方式。具体来说就是封装在程序中处理 HTTP 请求的功能。</p>\n<p>在使用上讲，中间件只是一个有 3 个参数的函数: 一个 请求对象、一个 响应对象 和一个 next 函数。\n(还有一种 4 个参数的形式，用来做错误处理）</p>\n<p>可以把中间件想象成 水管。水从一端入，在到达出水口的过程中，会经历各种 仪表 和 阀门。而这个过程中最重要的就是顺序。在其中一个阀门中注入一种原料，流过这个阀门之后的水都会含有这种原料。</p>\n<p>在 Express 程序中，通过调用 <code>app.use</code> 向管道中插入中间件。</p>\n<p>由传入每个中间件的 next函数 控制在 “管道” 中的请求是否终止向下传。调用 next() 方法将控制权交给下一个中间件，否则请求就会挂起。</p>\n<h2 id=\"中间件-和-路由处理器\"><a class=\"header-anchor\" href=\"#中间件-和-路由处理器\" aria-hidden=\"true\">#</a> 中间件 和 路由处理器</h2>\n<p>路由处理器（app.get，app.post，被统称为 app.VERB）可以被看作只处理特定 HTTP 请求的中间件。\n可以将 app.use 看作可以处理全部 HTTP 请求的路由处理器。(基本上等同于 app.all）</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET request to the homepage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>路由处理器的第一个参数必须是路径。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 没有挂载路径的中间件，应用的每个请求都会执行该中间件</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Time:'</span><span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 挂载至 /user/:id 的中间件，任何指向 /user/:id 的请求都会执行它</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request Type:'</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><p>中间件也可以将路径作为第一个参数，但它是可选的(如果忽略这个参数，它会匹配所 有路径)。\n路由处理器和中间件的参数中都有回调函数，这个函数有 2 个、3 个或 4 个参数。</p>\n<ul>\n<li>\n<p>如果有 2 个或 3 个参数，头两 个参数是 请求 和 响应对象，第三个参数是 next 函数。</p>\n</li>\n<li>\n<p>如果有 4 个参数，它就变成了 错误处理中间件，第一个参数变成了 error 对象，然后依次是 请求、响应 和 next 对象。</p>\n</li>\n</ul>\n<p>如果不调用 next()，请求会被挂起，也不会再有处理器或中间件做后续处理。\n如果你不调用 next()，则应该发送一个响应到客户端(res.send、res.json、res.render 等)\n如果你不这样做，请求会被挂起并最终导致超时。</p>\n<p>如果调用了 next()，一般就不要发送响应到客户端。如果你发送了，管道中后续的 中间件 或 路由处理器 还会执行，但它们发送的任何响应都会被忽略。</p>\n</div>\n",null]}