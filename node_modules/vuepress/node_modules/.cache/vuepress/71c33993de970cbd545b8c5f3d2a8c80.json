{"remainingRequest":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/核心模块.md?vue&type=template&id=c2f25b2e","dependencies":[{"path":"/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/核心模块.md","mtime":1531690418939},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1530932815982},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1530932815981},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1530932816121}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"核心模块\\\"><a href=\\\"#核心模块\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 核心模块</h1><p>核心模块是 Node.js 的心脏，它由一些精简而高效的库组成，为 Node.js 提供了基本的 API。</p><h2 id=\\\"event-模块\\\"><a href=\\\"#event-模块\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Event 模块</h2>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://nodejs.cn/api/events.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Events 文档\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<p>Node 是\\b事件驱动的, events 是 Node 最重要的模块.</p><h3 id=\\\"事件发射器-eventemitter\\\"><a href=\\\"#事件发射器-eventemitter\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件发射器 EventEmitter</h3><p>events 模块只提供了一个对象: <code>events.EventEmitter</code>。</p><p>EventEmitter 的核心就 是 事件发射 与 事件监听器 功能的封装。</p><p>EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。</p><p>对于每个事件，EventEmitter 支持若干个事件监听器。当事件发射时，注册到这个事件的 事件监听器 被依次调用，事件参数 作为 回调函数参数 传递。</p><p>例子:</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 引入 events 模块</span>\\n<span class=\\\"token keyword\\\">var</span> events <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'events'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 创建 eventEmitter 对象</span>\\n<span class=\\\"token keyword\\\">var</span> emitter <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">events<span class=\\\"token punctuation\\\">.</span>EventEmitter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nemitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'someEvent'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>arg1<span class=\\\"token punctuation\\\">,</span> arg2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'listener1'</span><span class=\\\"token punctuation\\\">,</span> arg1<span class=\\\"token punctuation\\\">,</span> arg2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nemitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'someEvent'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>arg1<span class=\\\"token punctuation\\\">,</span> arg2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'listener2'</span><span class=\\\"token punctuation\\\">,</span> arg1<span class=\\\"token punctuation\\\">,</span> arg2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nemitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'someEvent'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Garrik'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1997</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><p>结果是:</p><div class=\\\"language- line-numbers-mode\\\"><pre class=\\\"language-text\\\"><code>listner1 Garrik 1997\\nlistner2 Garrik 1997\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p><code>emitter</code> 为事件 <code>someEvent</code> 注册了两个事件监听器，然后发射了 <code>someEvent</code> 事件。运行结果中可以看到两个事件监听器回调函数被先后调用。</p><h3 id=\\\"监听器的-this\\\"><a href=\\\"#监听器的-this\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 监听器的 this</h3><p>当一个普通的监听器函数被 EventEmitter 调用时，标准的 <code>this</code> 关键词会被设置指向监听器所附加的 EventEmitter。</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> event <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'events'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">EventEmitter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nevent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'someEvent'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// this 指向 event</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nevent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'someEvent'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>可以使用 ES6 的箭头函数作为监听器。但是这样 <code>this</code> 关键词就不再指向 EventEmitter 实例</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>event<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'someEvent'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// this 指向 event 所处作用域</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"eventemitter-常用的-api\\\"><a href=\\\"#eventemitter-常用的-api\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventEmitter 常用的 API</h3><h4 id=\\\"eventemitter-on-event-listener\\\"><a href=\\\"#eventemitter-on-event-listener\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventEmitter.on(event, listener)</h4><p>为指定事件注册一个监听器，接受一个字符串 <code>event</code> 和一个回调函数 <code>listener。</code></p><p><code>emitter.addListener(eventName, listener)</code> 是它的别名</p><h4 id=\\\"eventemitter-emit-event-arg1-arg2\\\"><a href=\\\"#eventemitter-emit-event-arg1-arg2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventEmitter.emit(event, [arg1], [arg2], [...])</h4><p>发射 <code>event</code> 事件，传递若干可选参数到事件监听器的参数表。</p><h4 id=\\\"eventemitter-once-event-listener\\\"><a href=\\\"#eventemitter-once-event-listener\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventEmitter.once(event, listener)</h4><p>为指定事件注册一个单次监听器，即监听器最多只会触发一次，触发后立刻解除该监听器。</p><h4 id=\\\"eventemitter-removelistener-event-listener\\\"><a href=\\\"#eventemitter-removelistener-event-listener\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventEmitter.removeListener(event, listener)</h4><p>移除指定事件的某个监听器, <code>listener</code> 必须是该事件已经注册过的监听器。</p><h4 id=\\\"eventemitter-removealllisteners-event\\\"><a href=\\\"#eventemitter-removealllisteners-event\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventEmitter.removeAllListeners([event])</h4><p>移除所有事件的所有监听器， 如果指定 <code>event</code>，则移除指定事件的所有监听器。</p><p><code>EventEmitter.off(eventName, listener)</code> 的别名</p><h4 id=\\\"eventemitter-eventnames\\\"><a href=\\\"#eventemitter-eventnames\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventEmitter.eventNames()</h4><p>返回一个列出触发器已注册监听器的事件的数组</p><h4 id=\\\"eventemitter-listenercount-eventname\\\"><a href=\\\"#eventemitter-listenercount-eventname\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EventEmitter.listenerCount(eventName)</h4><p>返回正在监听指定事件的监听器的数量。</p><h3 id=\\\"error-事件\\\"><a href=\\\"#error-事件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Error 事件</h3><p>EventEmitter 定义了一个特殊的事件 error. 在遇到异常的时候通常会发射 error 事件。当 error 被发射时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，抛出错误、打印堆栈跟踪、且退出 Node.js 进程。</p><p>我们一般要为会发射 error 事件注册至少一个监听器，避免遇到错误后整个程序崩溃。</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> myEmitter <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyEmitter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmyEmitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'error'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'有错误'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmyEmitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'error'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'whoops!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 打印: 有错误</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h2 id=\\\"fs-文件模块\\\"><a href=\\\"#fs-文件模块\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Fs 文件模块</h2>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://nodejs.cn/api/fs.html#fs_file_system\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"fs 文档\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<p>fs 模块是文件操作的封装，它提供了文件的读取、写入、更名、删除、遍历目录、链接等类似标准 POSIX 函数的方式与文件系统进行交互</p><p>fs 模块中所有的操作都提供了异步的和 同步的两个版本</p><p>异步形式的最后一个参数都是完成时回调函数。 传给回调函数的参数取决于具体方法，但回调函数的第一个参数都会保留给异常。\\n如果操作成功完成，则第一个参数会是 <code>null</code> 或 <code>undefined</code></p><p>当使用同步操作时，任何异常都会被立即抛出，可以使用 <code>try/catch</code> 来处理异常，或让异常向上冒泡。</p><p>注意，异步的方法不能保证执行顺序。</p><p>大部分 fs 操作接受字符串、Buffer、或 使用 file: 协议的 URL 对象 作为文件路径。</p><h3 id=\\\"常用操作\\\"><a href=\\\"#常用操作\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \\b常用操作</h3><h4 id=\\\"fs-readfile\\\"><a href=\\\"#fs-readfile\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> fs.readFile</h4><p><code>fs.readFile(filename,[encoding],[callback(err,data)])</code>\\n是最简单的读取 文件的函数。</p><p>它接受一个必选参数 filename，表示要读取的文件名。第二个参数 encoding 是可选的，表示文件的字符编码。callback 是回调函数</p><p>如果指定了 encoding，data 是一个解析后的字符 串，否则 data 将会是以 Buffer 形式表示的二进制数据。</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'content.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h4 id=\\\"fs-open\\\"><a href=\\\"#fs-open\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> fs.open</h4><p><code>fs.open(path, flags, [mode], [callback(err, fd)])</code>\\n是 POSIX open 函数的封装</p><p>它接受两个必选参数，path 为文件的路径， flags 可以是以下值:</p><ul><li>r :以读取模式打开文件。</li><li>r+ :以读写模式打开文件。</li><li>w :以写入模式打开文件，如果文件不存在则创建。</li><li>w+ :以读写模式打开文件，如果文件不存在则创建。</li><li>a :以追加模式打开文件，如果文件不存在则创建。</li><li>a+ :以读取追加模式打开文件，如果文件不存在则创建。</li></ul><p>mode 参数用于创建文件时给文件指定权限，默认是 0666 (读 + 写)</p><h2 id=\\\"path-模块\\\"><a href=\\\"#path-模块\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> PATH 模块</h2>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://nodejs.cn/api/path.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Path 文档\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<p><code>path</code> 模块提供了一些工具函数，用于处理文件与目录的路径。</p><p><code>path</code> 模块的默认操作会根据 Node.js 应用程序运行的操作系统的不同而变化。 比如，当运行在 Windows 操作系统上时，<code>path</code> 模块会认为使用的是 Windows 风格的路径。在 Linux 系统就是 POSIX 标准\\b风格路径。</p><p>要想在任何操作系统上处理 POSIX 文件路径时获得一致的结果，可以使用 <code>path.posix</code>：</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 在 Windows 和 Mac 下 返回一样</span>\\npath<span class=\\\"token punctuation\\\">.</span>posix<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">basename</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/myfile.html'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 返回: 'myfile.html'</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"常用操作-2\\\"><a href=\\\"#常用操作-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 常用操作</h3><h4 id=\\\"path-basename-path-ext\\\"><a href=\\\"#path-basename-path-ext\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> path.basename(path[, ext])</h4><p>返回一个 <code>path</code> 的最后一部分</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">basename</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/foo/bar/baz/asdf/quux.html'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 返回: 'quux.html'</span>\\n\\npath<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">basename</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/foo/bar/baz/asdf/quux.html'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'.html'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 返回: 'quux'</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h4 id=\\\"path-dirname-path\\\"><a href=\\\"#path-dirname-path\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> path.dirname(path)</h4><p>返回一个 <code>path</code> 的目录名</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dirname</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/foo/bar/baz/asdf/quux'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 返回: '/foo/bar/baz/asdf'</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h4 id=\\\"path-join-paths\\\"><a href=\\\"#path-join-paths\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> path.join([...paths])</h4><p>使用平台特定的分隔符把全部给定的 <code>path</code> 片段连接到一起，并规范化生成的路径。</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'baz/asdf'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'quux'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'..'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 返回: '/foo/bar/baz/asdf'</span>\\n\\npath<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 抛出 'TypeError: Path must be a string. Received {}'</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h4 id=\\\"path-parse-path\\\"><a href=\\\"#path-parse-path\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> path.parse(path)</h4><p>返回一个对象，对象的属性表示 <code>path</code> 的元素。</p><p>返回的对象有以下属性：</p>\"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"dir \"),_c('string')],2),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"root \"),_c('string')],2),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"base \"),_c('string')],2),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"name \"),_c('string')],2),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"ext \"),_c('string')],2)]),_vm._ssrNode(\"<div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/home/user/dir/file.txt'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 返回:</span>\\n<span class=\\\"token comment\\\">// { root: '/',</span>\\n<span class=\\\"token comment\\\">//   dir: '/home/user/dir',</span>\\n<span class=\\\"token comment\\\">//   base: 'file.txt',</span>\\n<span class=\\\"token comment\\\">//   ext: '.txt',</span>\\n<span class=\\\"token comment\\\">//   name: 'file' }</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><h2 id=\\\"url-模块\\\"><a href=\\\"#url-模块\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> URL 模块</h2>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://nodejs.cn/api/url.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"URL 文档\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<p>url 模块提供了一些实用函数，用于 URL 处理与解析。</p><p>URL 字符串是具有结构的字符串，包含多个意义不同的组成部分。URL 字符串可以被解析为一个 URL 对象，其属性对应于字符串的各组成部分。</p><p>url 模块提供了两套 API 来处理 URL 字符串：</p><ul><li>一个是 Node.js 特有的 API，是旧版本的遗留；</li><li>另一个则是实现了 WHATWG URL Standard 的 API ，该标准也在各种浏览器中被使用。</li></ul><blockquote><p>新的应用程序应当使用 WHATWG API。</p></blockquote><p>下图中，网址 <code>'http://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</code> 上方是由遗留的 <code>url.parse()</code> 返回的对象的属性。下方的则是<code>WHATWG URL</code>对象的属性。</p><p><img src=\\\"https://i.imgur.com/0uUzBxZ.png\\\" alt=\\\"Screen Shot 2018-07-15 at 5.11.20 PM\\\"></p><p>利用WHATWG API解析一个URL字符串:</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token constant\\\">URL</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> myURL <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">URL</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>通过Node.js提供的API解析一个URL:</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> url <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> myURL <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"whatwg-url\\\"><a href=\\\"#whatwg-url\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> WHATWG URL</h3><p>根据 WHATWG URL 标准, 实现的 URL 类. 解析出来的 URL 对象的所有属性都是在类的原型上实现为 getter 和 setter，而不是作为对象本身的数据属性。因此，在 URL 对象的任何属性上使用 delete 关键字没有任何效果，但仍返回 true。</p><h4 id=\\\"new-url-input-base\\\"><a href=\\\"#new-url-input-base\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> new URL(input[, base])</h4><ul><li><code>input &lt;string&gt;</code> : 要解析的输入 URL</li><li><code>base &lt;string&gt; | &lt;URL&gt;</code> : 如果 <code>input</code> 是相对 URL，则为要解析的基本 URL。</li></ul><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token constant\\\">URL</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> myURL <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">URL</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'https://example.org/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// https://example.org/foo</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>Unicode 字符将被使用 Punycode 算法自动转换为 ASCII:</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token constant\\\">URL</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> myURL <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">URL</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://你好你好'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// https://xn--6qqa088eba/</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h4 id=\\\"url-tostring\\\"><a href=\\\"#url-tostring\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> url.toString()</h4><p>在 URL 对象上调用 <code>toString()</code> 方法将返回序列化的 URL。返回值与 <code>url.href</code> 和 <code>url.toJSON()</code> 的相同。</p><h3 id=\\\"legacy-url\\\"><a href=\\\"#legacy-url\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Legacy URL</h3><p>旧版本的 URL 对象属性可以用 delete.</p><h4 id=\\\"url-format-urlobject\\\"><a href=\\\"#url-format-urlobject\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> url.format(urlObject)</h4><p><code>url.format()</code> 方法返回一个从 <code>urlObject</code> 格式化后的 URL 字符串。</p><h4 id=\\\"url-parse-urlstring-parsequerystring-slashesdenotehost\\\"><a href=\\\"#url-parse-urlstring-parsequerystring-slashesdenotehost\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</h4><p><code>url.parse()</code> 方法会解析一个 URL 字符串并返回一个 URL 对象。</p><ul><li><code>urlString &lt;string&gt;</code> : 要解析的 URL 字符串。</li><li><code>parseQueryString &lt;boolean&gt;</code> 如果为 <code>true</code>，则 <code>query</code> 属性总会通过 querystring 模块的 <code>parse()</code> : 方法生成一个对象。 如果为 <code>false</code>，则返回的 URL 对象上的 <code>query</code> 属性会是一个未解析、未解码的字符串。 默认为 <code>false</code>。</li><li><code>slashesDenoteHost &lt;boolean&gt;</code> : 如果为 <code>true</code>，则 <code>//</code> 之后至下一个 <code>/</code> 之前的字符串会被解析作为 <code>host</code>。 例如，<code>//foo/bar</code> 会被解析为 <code>{host: 'foo', pathname: '/bar'}</code> 而不是 <code>{pathname: '//foo/bar'}</code>。 默认为 <code>false</code>。</li></ul><h2 id=\\\"http-模块\\\"><a href=\\\"#http-模块\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> HTTP 模块</h2>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"\\bHTTP 文档\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<p>在 Node 标准库提供了 http 模块, 可以让 HTTP 协议 应用起来更简易.</p><p>模块中封装了一个高效的 HTTP 服务器对象 和 一个简易的 HTTP 客户端.\\n<code>http.Server</code> 是一个基于事件的 HTTP 服务器.\\n<code>http.request</code> 则是一个 HTTP 客户端工具，用于向 HTTP 服务器发起请求.</p><h3 id=\\\"http-服务器\\\"><a href=\\\"#http-服务器\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> HTTP 服务器</h3><p>http.Server 是 http 模块中的 HTTP 服务器对象. 用 Node.js 做的所有基于 HTTP 协议的系统都是基于 http.Server 实现的.</p><p>它提供了 一套封装级别很低的 API，仅仅是流控制和简单的消息解析，所有的高层功能都要通过它们接口来实现。</p><blockquote><p><strong>先看个实际使用</strong>:</p></blockquote><p>首先使用 <code>http.createServer</code> 方法创建一个实例.  这个函数接受一个 HTTP 请求处理函数 (requestListner) 作为参数, 返回一个 http.Server 实例.</p><p>HTTP 请求处理函数 接受两个参数, 分别是请求对象 ( request ) 和响应对象 ( response )</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 引入 http 模块</span>\\n<span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 创建实例</span>\\nhttp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'text/plain'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'I am Garrik'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 在 3000 端口监听</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p>在上面的代码中, 我先在编写了 响应头部. 然后编写了 响应\\b体. 然后通过 <code>res.end</code> 结束并发送. 最后调用 <code>listen</code> 函数去监听服务器的 3000 端口.</p><blockquote><p><strong>知识点</strong>:</p></blockquote>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_class_http_server\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"http.Server 文档\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<p>在讲解上面代码, 之前我们\\b先来介绍一些知识.</p><p><strong>http.Server 的事件:</strong></p><p>首先 http.Server 是一个<strong>基于事件</strong>的 HTTP 服务器. 所有的请求都被封装为独立的事件， 开发者只需要对它的事件编写响应函数即可实现 HTTP 服务器的所有功能。</p><p>事件都继承自 EventEmitter，常用的几个有:</p><ul><li><p><strong><code>request</code></strong>:\\n当收到客户端发来的请求时, 该事件触发.\\n发送两个参数 req 和 res, ，分别是 <code>http.IncomingMessage</code> 和 <code>http.ServerResponse</code> 的实例，表示请求和响应信息。</p></li><li><p><strong><code>connection</code></strong>:\\n当 TCP 连接建立时，该事件被触发，提供一个参数 socket，为 <code>net.Socket</code> 的实例。\\nconnection 事件的粒度要大于 request，因为客户端在 Keep-Alive 模式下可能会在同一个连接内发送多次请求。(粒度大意思就是事件被触发频率高, 个人理解.)</p></li><li><p><strong><code>close</code></strong>:\\n当服务器关闭时，该事件被触发。注意不是在用户连接断开时。</p></li></ul><p><strong>http.IncomingMessage:</strong></p><p>是 HTTP 请求的信息. 一般由\\nhttp.Server 创建，作为 request 或 response 事件的第一个参数传递. 通常简称 request 或 req.</p><p><strong>http.ServerResponse:</strong></p><p>http.ServerResponse 是返回给客户端的信息，决定了用户最终能看到的结果。一般由\\nhttp.Server 创建，作为 request 或 response 事件的第二个参数传递. 通常简称  response 或 res.</p><blockquote><p><strong>代码解析</strong>:</p></blockquote><p>首先在代码中, 我们创建一个 http.Server 实例, 然后监听 request 事件.</p><p>http.Server 实例在创建时,\\b 接收一个函数作为 requestListner 请求监听函数.</p><p>当 request 事件触发了, request 事件向这个函数传递 req 和 res 两个对象, 同时该函数被\\b回调执行.</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}