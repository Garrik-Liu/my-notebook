{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/数据结构与算法/算法/复杂度分析.md?vue&type=template&id=10320d42","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/数据结构与算法/算法/复杂度分析.md","mtime":1538415434300},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"复杂度分析\"><a class=\"header-anchor\" href=\"#复杂度分析\" aria-hidden=\"true\">#</a> 复杂度分析</h1>\n<p>简单说, 复杂度分析就是不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法</p>\n<h2 id=\"大-o-复杂度表示法\"><a class=\"header-anchor\" href=\"#大-o-复杂度表示法\" aria-hidden=\"true\">#</a> 大 O 复杂度表示法</h2>\n<p>算法的执行效率，粗略地讲，就是算法代码执行的时间。</p>\n<p>先举个例子:</p>\n<!--beforebegin--><div class=\"language-C extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">int</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>看上面这一段代码, 求 1,2,3…n 的累加和.  估算一下这段代码的执行时间。这段代码的每一行都执行着类似的操作：读数据-运算-写数据。假设每行代码执行的时间都一样，为  unit_time。</p>\n<p>第 2、3 行代码分别需要 1 个 unit_time 的执执行时间，第 4、5 行都运行了 n 遍，所以需要 <code>2n * unit_time</code> 的执行时间，所以这段代码总的执行时间就是 <code>(2n+2) * unit_time</code></p>\n<p>可以看出来，所有代码的执行时间 T(n) 与<strong>每行代码的执行次数成正比</strong>。</p>\n<p>这个规律总结成一个公式:</p>\n<p><img src=\"https://i.imgur.com/lqlpF7W.png\" alt=\"22900968aa2b190072c985a08b0e92ef\"></p>\n<ul>\n<li><code>T(n)</code> 我们已经讲过了，它表示代码执行的时间；</li>\n<li><code>n</code> 表示数据规模的大小；</li>\n<li><code>f(n)</code> 表示每行代码执行的次数总和。</li>\n<li><code>O</code> 表示代码的执行时间 <code>T(n)</code> 与 <code>f(n)</code> 表达式成正比</li>\n</ul>\n<p>所以，上面例子用大 O 时间复杂度表示法表示就是 <code>T(n) = O(2n+2)</code></p>\n<p>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度，简称时间复杂度</strong>。</p>\n<h2 id=\"时间复杂度分析\"><a class=\"header-anchor\" href=\"#时间复杂度分析\" aria-hidden=\"true\">#</a> 时间复杂度分析</h2>\n<p>如何分析一段代码的时间复杂度？我这儿有三个比较实用的方法可以分享给你。</p>\n<h3 id=\"_1-只关注循环执行次数最多的一段代码\"><a class=\"header-anchor\" href=\"#_1-只关注循环执行次数最多的一段代码\" aria-hidden=\"true\">#</a> 1. 只关注循环执行次数最多的一段代码</h3>\n<p>我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了。</p>\n<p>这段核心代码执行次数的 n 的量级，就是整段要分析代码的时间复杂度。</p>\n<p>还是前面的例子, 第 2, 3 行都是常量级执行时间, 对时间复杂度没有什么影响.  我们只关注 for 循环里面的代码就可以了.  循环中的代码被执行了 n 次, 所以复杂度就是  O(n)。</p>\n<h3 id=\"_2-加法法则：总复杂度等于量级最大的那段代码的复杂度\"><a class=\"header-anchor\" href=\"#_2-加法法则：总复杂度等于量级最大的那段代码的复杂度\" aria-hidden=\"true\">#</a> 2. 加法法则：总复杂度等于量级最大的那段代码的复杂度</h3>\n<p>先看下面这一段代码:</p>\n<!--beforebegin--><div class=\"language-C extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">int</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">int</span> sum_1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     sum_1 <span class=\"token operator\">=</span> sum_1 <span class=\"token operator\">+</span> p<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">int</span> sum_2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> q <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> q <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     sum_2 <span class=\"token operator\">=</span> sum_2 <span class=\"token operator\">+</span> q<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n \n   <span class=\"token keyword\">int</span> sum_3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       sum_3 <span class=\"token operator\">=</span> sum_3 <span class=\"token operator\">+</span>  i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n \n   <span class=\"token keyword\">return</span> sum_1 <span class=\"token operator\">+</span> sum_2 <span class=\"token operator\">+</span> sum_3<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这上面一有三个循环, 第一个循环里面代码执行了 100 次, 所以是一个常量的执行时间，跟 n 的规模无关。( 这里要记住, 无论常量级执行时间有多大, 都忽略掉, 因为我们研究是算法执行效率与数据规模<strong>增长</strong>的变化趋势. )</p>\n<p>第二个循环的复杂度是 O(n), 第三个是 O(n^2).</p>\n<p>综合这三段代码的时间复杂度，我们取其中最大的量级。所以，整段代码的时间复杂度就为 O(n^2)。</p>\n<p>也就是说：<strong>总的时间复杂度就等于量级最大的那段代码的时间复杂度</strong></p>\n<h3 id=\"_3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\"><a class=\"header-anchor\" href=\"#_3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\" aria-hidden=\"true\">#</a> 3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</h3>\n<p>如果 <code>T1(n) = O(f(n))</code>，<code>T2(n) = O(g(n))</code>；那么 <code>T(n) = T1(n) * T2(n) = O(f(n)) * O(g(n)) = O(f(n) * g(n))</code>.</p>\n<p>落实到具体的代码上，我们可以把乘法法则看成是嵌套循环</p>\n<!--beforebegin--><div class=\"language-C extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">int</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ret <span class=\"token operator\">=</span> ret <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n \n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>我们单独看 <code>cal()</code> 函数。假设 <code>f()</code> 只是一个普通的操作, 那么 <code>cal()</code> 函数的复杂度是 O(n).  但 <code>f()</code> 函数的\b复杂度也是 O(n), 所以 <code>cal()</code> 函数的复杂度就是, <code>T(n) = T1(n) * T2(n) = O(n*n) = O(n^2)</code></p>\n<h2 id=\"几种常见时间复杂度实例分析\"><a class=\"header-anchor\" href=\"#几种常见时间复杂度实例分析\" aria-hidden=\"true\">#</a> 几种常见时间复杂度实例分析</h2>\n<p><img src=\"https://i.imgur.com/I1uuKxG.jpg\" alt=\"3723793cc5c810e9d5b06bc95325bf0a\"></p>\n<p>我们可以粗略地分为两类，<strong>多项式量级</strong> 和 <strong>非多项式量级</strong>。</p>\n<p><img src=\"https://i.imgur.com/sm2Lima.jpg\" alt=\"497a3f120b7debee07dc0d03984faf04\"></p>\n<p>它们所花时间的比较</p>\n<h3 id=\"非多项式量级\"><a class=\"header-anchor\" href=\"#非多项式量级\" aria-hidden=\"true\">#</a> 非多项式量级</h3>\n<p>其中，非多项式量级只有两个：<code>O(2n)</code> 和 <code>O(n!)</code>。</p>\n<p>我们把时间复杂度为非多项式量级的算法问题叫作 <strong>NP</strong>（Non-Deterministic Polynomial，非确定多项式）问题。</p>\n<p>当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加, 所以这是一种非常低效的算法</p>\n<h3 id=\"多项式量级\"><a class=\"header-anchor\" href=\"#多项式量级\" aria-hidden=\"true\">#</a> 多项式量级</h3>\n<h4 id=\"_1-o-1\"><a class=\"header-anchor\" href=\"#_1-o-1\" aria-hidden=\"true\">#</a> 1. O(1)</h4>\n<p>O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。</p>\n<p>只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。</p>\n<h4 id=\"_2-o-logn-、o-nlogn\"><a class=\"header-anchor\" href=\"#_2-o-logn-、o-nlogn\" aria-hidden=\"true\">#</a> 2. O(logn)、O(nlogn)</h4>\n<p>对数时间复杂度非常常见，同时也是最难分析的一种时间复杂度。</p>\n<p>我们先来看一\b段代码:</p>\n<!--beforebegin--><div class=\"language-C extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n  i <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2. 当大于 n 时，循环结束。</p>\n<p>实际上，变量 i 的取值就是一个等比数列。</p>\n<p><img src=\"https://i.imgur.com/lxW8Dfu.jpg\" alt=\"9b1c88264e7a1a20b5954be9bc4bec9a\"></p>\n<p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了</p>\n<p>通过 <code>2 ^ x = n</code> 求解 <code>x</code>. <code>x = log2n</code> 这段代码的时间复杂度就是 <code>O(log2n)</code>。</p>\n<p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 <code>O(logn)</code>。\b</p>\n<p>\b原因很简单, 就拿上面的例子举例.  <code>O(log2n) = O(logn / log2)</code>.  <code>O(log2)</code> 是一个常量, 我们就把它忽略掉了</p>\n<h4 id=\"_3-o-m-n-、o-m-n\"><a class=\"header-anchor\" href=\"#_3-o-m-n-、o-m-n\" aria-hidden=\"true\">#</a> 3. O(m+n)、O(m*n)</h4>\n<p>先看代码:</p>\n<!--beforebegin--><div class=\"language-C extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">int</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> sum_1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum_1 <span class=\"token operator\">=</span> sum_1 <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">int</span> sum_2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum_2 <span class=\"token operator\">=</span> sum_2 <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> sum_1 <span class=\"token operator\">+</span> sum_2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 <code>O(m+n)</code>。</p>\n<h2 id=\"空间复杂度分析\"><a class=\"header-anchor\" href=\"#空间复杂度分析\" aria-hidden=\"true\">#</a> 空间复杂度分析</h2>\n<p>前面我讲过，时间复杂度的全称是渐进时间复杂度，表示<strong>算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是渐进空间复杂度，表示<strong>算法的存储空间与数据规模之间的增长关系</strong>。</p>\n<!--beforebegin--><div class=\"language-C extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    print out a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>可以看到, 第 2 行代码中，我们申请了一个空间存储变量 i，它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。 第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 <code>O(n)</code>。</p>\n<h2 id=\"时间复杂度进阶知识\"><a class=\"header-anchor\" href=\"#时间复杂度进阶知识\" aria-hidden=\"true\">#</a> 时间复杂度进阶知识</h2>\n<h3 id=\"最好、最坏情况时间复杂度\"><a class=\"header-anchor\" href=\"#最好、最坏情况时间复杂度\" aria-hidden=\"true\">#</a> 最好、最坏情况时间复杂度</h3>\n<!--beforebegin--><div class=\"language-C extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token comment\">// n 表示数组 array 的长度</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       pos <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> pos<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面这段代码中, 要查找的变量 x 可能出现在数组的任意位置。如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。</p>\n<p>为了表示代码在不同情况下的不同时间复杂度，我们需要引入三个概念：最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度。</p>\n<p><strong>最好情况时间复杂度就是，在最理想的情况下，，执行这段代码的时间复杂度。</strong></p>\n<p><strong>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。</strong></p>\n<h3 id=\"平均情况时间复杂度\"><a class=\"header-anchor\" href=\"#平均情况时间复杂度\" aria-hidden=\"true\">#</a> 平均情况时间复杂度</h3>\n<p>为了更好地表示平均情况下的复杂度，我们需要引入另一个概念：平均情况时间复杂度，后面我简称为平均\b时间复杂度</p>\n<p>还是拿上面找\b变量 X 在数组中的位置的例子:</p>\n<p>要查找的变量 x 在数组中的位置，有 n+1 种情况：<strong>在数组的 0～n-1 位置中和不在数组中</strong>。</p>\n<p>我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：</p>\n<p><img src=\"https://i.imgur.com/8ILNkFg.png\" alt=\"Screen Shot 2018-10-01 at 1.12.28 PM\"></p>\n<p>咱们把刚刚这个公式简化之后，得到的平均时间复杂度就是 <code>O(n)</code></p>\n<p>但是上面这种计算方法其实存在问题.  我们知道，要查找的变量 x，要么在数组里，要么就不在数组里。我们假设在数组中与不在数组中的概率都为 1/2。要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)。</p>\n<p>前面的推导过程中存在的最大问题就是，没有将各种情况发生的<strong>概率</strong>考虑进去。如果我们把每种情况发生的概率也考虑进去，那平均时间复杂度的计算过程就变成了这样：</p>\n<p><img src=\"https://i.imgur.com/FuO0HMx.png\" alt=\"Screen Shot 2018-10-01 at 1.16.45 PM\"></p>\n<p>这个值就是概率论中的<strong>加权平均值</strong>，也叫作<strong>期望值</strong>，所以平均时间复杂度的全称应该叫<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</p>\n<h3 id=\"均摊时间复杂度\"><a class=\"header-anchor\" href=\"#均摊时间复杂度\" aria-hidden=\"true\">#</a> 均摊时间复杂度</h3>\n<p>均摊时间复杂度，听起来跟平均时间复杂度有点儿像。大部分情况下，我们并不需要区分最好、最坏、平均三种复杂度。平均复杂度只在某些特殊情况下才会用到，而均摊时间复杂度应用的场景比它更加特殊、更加有限。</p>\n<p>下次再说:\n<a href=\"https://time.geekbang.org/column/article/40447\" target=\"_blank\" rel=\"noopener noreferrer\">链接<OutboundLink/></a></p>\n</div>\n",null]}