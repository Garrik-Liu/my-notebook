{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/基础篇/\b搭建HTTP\b服务器.md?vue&type=template&id=2ca1da32","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/基础篇/\b搭建HTTP\b服务器.md","mtime":1538022460474},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._m(0),_vm._m(1),_c('p',[_vm._v(\"\\b先思考, 平时我们在浏览器地址栏中, 输入网址按下回车之后, 网页是如何呈现在我们面前的?\")]),_c('p',[_vm._v(\"很显然, \\b我们想要访问的网页不是原本就保存在\\b我们的电脑里的.  我们在浏览器中输入\\b网址, 去网页文件所在的网络设备中去请求网页.  拥有网页的网络设别同意了我们的请求, 把网页返回给了浏览器.  之后浏览器再解析渲染网页文件, 使网页最终能呈现在我们面前.\")]),_vm._m(2),_vm._m(3),_c('p',[_c('a',{attrs:{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"MDN HTTP 文档\"),_c('OutboundLink')],1)]),_c('p',[_vm._v(\"那\\b客户端和服务器之间是怎么交流信息, 传递数据的呢?  \\b网络之间的\\b各种网络设备, 就像 \\\"学校里说不同地方方言的同学\\\", 大家想要交流就必须使用 \\\"普通话\\\".  各种网络设别之间想要通信也需要一套大家都认可的通信标准.\")]),_vm._m(4),_c('p',[_vm._v(\"在应用 HTTP 协议时，必定是一端担任客户端角色，另一端担任服务器端角色\")]),_vm._m(5),_vm._m(6),_vm._m(7),_vm._m(8),_vm._m(9),_vm._m(10),_vm._m(11),_vm._m(12),_c('p',[_c('a',{attrs:{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"MDN - HTTP 请求方法\\b 文档\"),_c('OutboundLink')],1)]),_c('p',[_vm._v(\"HTTP 定义了一组请求方法, 以表明要对给定资源执行的操作。\")]),_c('p',[_vm._v(\"常用的有:\")]),_vm._m(13),_c('p',[_vm._v(\"除上面这些之外, 还有其他请求方法,\\b 想了解可以\\b自行查阅文档.\")]),_vm._m(14),_c('p',[_vm._v(\"HTTP 协议使用 URI 定位互联网上的资源。也就是我们常说的 \\\"网址\\\".  多数情况下 URL 和 URI 说的是一回事.  这里不做过多论述.\")]),_vm._m(15),_vm._m(16),_c('p',[_c('a',{attrs:{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\" MDN - HTTP 状态码 - 文档\"),_c('OutboundLink')],1)]),_c('p',[_vm._v(\"状态码的职责是当客户端向服务器端发送请求时，描述服务器返回的请求结果。\")]),_c('p',[_vm._v(\"借助状态码，用户可以知道服务器端是正常处理了请求，还是出现了错误。\")]),_c('p',[_vm._v(\"状态码以 3 位数字 和 原因短语 组成。\")]),_c('p',[_vm._v(\"数字中的第一位指定了响应类别，后两位无分类。响应类别有以下 5 种:\")]),_vm._m(17),_c('p',[_vm._v(\"最常见的两个就是:\")]),_vm._m(18),_c('p',[_vm._v(\"其余的状态码, 大家可以查阅文档, 这里就不介绍了.\")]),_vm._m(19),_c('p',[_c('a',{attrs:{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"\\bMDN - HTTP 首部字段 - 文档\"),_c('OutboundLink')],1)]),_c('p',[_vm._v(\"首部字段, 为客户端和服务器, 处理请求和响应, 提供了所需要的信息。\")]),_vm._m(20),_c('p',[_vm._v(\"例如:\")]),_vm._m(21),_c('p',[_vm._v(\"\\b更多首部字段我就不再这里\\b介绍了, 大家可以根据需要查阅文档.\")]),_vm._m(22),_c('p',[_c('a',{attrs:{\"href\":\"http://nodejs.cn/api/http.html\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"HTTP 模块 - 文档\"),_c('OutboundLink')],1)]),_vm._m(23),_vm._m(24),_vm._m(25),_vm._m(26),_vm._m(27),_vm._m(28),_vm._m(29),_c('p',[_vm._v(\"服务器每次收到\\b新的请求, 都会创建新的请求对象和响应对象.  从客户端发过来的请求报文会被解析, 然后作为请求对象的一部分.  在回调函数的内部, 你需要根据\\b业务逻辑处理请求, 然后送出响应给客户端, 结束此次请求.\")]),_c('p',[_vm._v(\"在本练习中, 我们要返回给客户端一个写有 \\\"Hello World\\\" 的纯文本.  在回调函数中我们需要用到三个\\b响应对象上的函数:\")]),_vm._m(30),_c('p',[_vm._v(\"那么根据需求我们知道:\")]),_vm._m(31),_c('p',[_vm._v(\"根据这两个信息, 我们就可以很\\b轻松的写出请求处理函数内的代码:\")]),_vm._m(32),_c('p',[_vm._v(\"最后, 我们需要给 Web 服务器绑定一个端口.  为了让服务器可以提供多种服务, 不同请求会被发送到不同的端口.  只有发送到我们指定端口的 HTTP 请求会被上面的代码所处理.\")]),_vm._m(33),_vm._m(34),_vm._m(35),_c('p',[_vm._v(\"全部写完后代码为:\")]),_vm._m(36),_vm._m(37),_c('p',[_vm._v(\"服务器运行后, 可以在命令行看见\")]),_vm._m(38),_vm._m(39),_vm._m(40),_c('p',[_vm._v(\"现在你成功的返回了一条纯文本内容给\\b客户端, 你可以试着返回一个 HTML 文本吗?\")]),_vm._m(41)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h1',{attrs:{\"id\":\"实现-hello-world-http-服务器\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#实现-hello-world-http-服务器\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 实现 \\\"Hello World\\\" HTTP 服务器\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"客户端-服务器\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#客户端-服务器\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 客户端 & 服务器\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"像浏览器这样, 请求访问文本或图像等资源的一端称为\"),_c('strong',[_vm._v(\"客户端\")]),_vm._v(\"，而提供资源响应的一端称为\"),_c('strong',[_vm._v(\"服务器端\")]),_vm._v(\"。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"什么是-http-协议\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#什么是-http-协议\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" \\b什么是 HTTP 协议\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"HTTP 协议\")]),_vm._v(\" (Hyper Text Transfer Protocol 超文本传输协议）就是 服务器 和 客户端 之间的\"),_c('strong',[_vm._v(\"通信规则\")]),_vm._v(\".\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 HTTP 协议传输的信息叫做 \"),_c('strong',[_vm._v(\"HTTP 报文\")]),_vm._v(\". 请求端（客户端）的 HTTP 报文叫做\"),_c('strong',[_vm._v(\"请求报文\")]),_vm._v(\"，响应端（服务器端）的叫做\"),_c('strong',[_vm._v(\"响应报文\")]),_vm._v(\"。 HTTP 报文可分为 \"),_c('strong',[_vm._v(\"报文首部\")]),_vm._v(\" 和 \"),_c('strong',[_vm._v(\"报文主体\")]),_vm._v(\" 两块, 中间由一个空行分开.****\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/n8ecmof.png\",\"alt\":\"Untitled Diagram(2)\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"请求报文-响应报文\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#请求报文-响应报文\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 请求报文 & 响应报文\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"请求报文组成\")]),_vm._v(\": 请求方法 + 请求 URI + HTTP 协议版本 + (可选的请求首部字段 和 内容实体)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/pZbTmLG.png\",\"alt\":\"\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"响应报文组成\")]),_vm._v(\": HTTP 协议版本 + 状态码（表示请求成功或失败的数字代码）+ 用以解释状态码的原因短语 + (可选的响应首部字段 以及 实体主体)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/LhTUXaJ.png\",\"alt\":\"\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"请求方法\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"GET\")]),_vm._v(\": 用来请求服务器端指定的资源。使用 GET 的请求应该只用于获取数据。\")]),_c('li',[_c('code',[_vm._v(\"POST\")]),_vm._v(\": 用来发送数据给服务器. 虽然用 GET 方法也可以传输主体.  但一般不用 GET 方法进行传输，而是用 POST 方法。\")]),_c('li',[_vm._v(\"\\b\"),_c('code',[_vm._v(\"PUT\")]),_vm._v(\": 用于新增资源.  PUT 与 POST 方法的区别在于，PUT 方法调用一次与连续调用多次是等价的，而连续调用多次 POST 方法可能会有副作用，比如将一个订单重复提交多次。\")]),_c('li',[_c('code',[_vm._v(\"\\bDELETE\")]),_vm._v(\": 用于删除指定的资源。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"URI\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/PNmbAh1.png\",\"alt\":\"2824193-3b10e5ce8796c938\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"状态码\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/m3Qc4kc.png\",\"alt\":\"Screen Shot 2018-09-26 at 4.31.44 PM\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"200 OK\")]),_vm._v(\": 表示从客户端发来的请求在服务器端被正常处理了。\")]),_c('li',[_c('code',[_vm._v(\"404 Not Found\")]),_vm._v(\": 该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"首部字段\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"HTTP 首部字段是由 首部字段名 和 字段值 构成的，中间用 \"),_c('code',[_vm._v(\":\")]),_vm._v(\" 分隔。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在 HTTP 首部中以 Content-Type 这个字段来表示报文主体的类型。 \"),_c('code',[_vm._v(\"Content-Type: text/html\")]),_vm._v(\" 就是说, 报文主体的类型为 HTML.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"使用-http-模块-实现一个-hello-world-服务器\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#使用-http-模块-实现一个-hello-world-服务器\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 使用 HTTP 模块 实现一个 \\\"Hello World\\\" 服务器\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"Node.js 自身提供的 \"),_c('code',[_vm._v(\"http\")]),_vm._v(\" 模块, 提供了 HTTP 服务器和客户端接口, 可以很便捷地应用 HTTP 协议.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"下面我就介绍如何用 \"),_c('code',[_vm._v(\"http\")]),_vm._v(\" 模块实现一个响应 \\\"Hello World\\\" 给\\b客户端的 Web 服务器:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"首先, 新建一个 JavaScript 文件, 取名 \"),_c('code',[_vm._v(\"myServer.js\")]),_vm._v(\" , 当然你可以叫别的.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"\\b在文件开头先引用 \"),_c('code',[_vm._v(\"http\")]),_vm._v(\" 模块.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" http \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"require\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'http'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"然后调用 \"),_c('code',[_vm._v(\"http.createServer\")]),_vm._v(\" 函数创建并返回一个 HTTP 服务器.  这个函数接收一个\\b回调函数作为参数.  \\b服务器每次收到客户端发过来的 HTTP 请求会交给这个回调函数处理.  回调函数会受到两个参数, 请求对象和响应对象, 一般简写为 \"),_c('code',[_vm._v(\"req\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"res\")]),_vm._v(\".\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" server \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" http\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"createServer\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"req\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 处理请求, 送出响应\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"res.writeHead(statusCode[, statusMessage][, headers])\")]),_vm._v(\": 该方法会发送一个响应头给客户端.  第一个参数作为状态码, 最后一个参数 \"),_c('code',[_vm._v(\"headers\")]),_vm._v(\" 是响应头对象。 第二个参数 \"),_c('code',[_vm._v(\"statusMessage\")]),_vm._v(\" 是可选的状态描述。\")]),_c('li',[_c('code',[_vm._v(\"res.write(chunk[, encoding][, callback])\")]),_vm._v(\": 该方法会发送一块响应主体。 它可被多次调用，以便提供连续的响应主体片段。第一个参数是一个字符串或一个 Buffer 字节流, 如果是\\b字符串的话, 第二个参数指定如何将它编码成一个字节流 (默认为 utf-8).  最后一个参数这里先不考虑.\")]),_c('li',[_c('code',[_vm._v(\"res.end([data][, encoding][, callback])\")]),_vm._v(\": 该方法会通知服务器，所有响应头和响应主体都已被发送，即服务器将其视为已完成。每次响应都必须调用这个方法来结束请求, 否则请求会被一直挂起.  如果传入 data 参数, 相当于调用 \"),_c('code',[_vm._v(\"res.write(data, encoding)\")]),_vm._v(\".\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"响应成功, 状态码为 200.\")]),_c('li',[_vm._v(\"响应回去的为纯文本, 需要设定响应头 \"),_c('code',[_vm._v(\"Content-Type\")]),_vm._v(\" 的值为 \"),_c('code',[_vm._v(\"text/plain\")]),_vm._v(\".\")]),_c('li',[_vm._v(\"响应回去的主体是一个字符串 \\\"Hello World\\\".\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" server \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" http\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"createServer\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"req\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"writeHead\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"200\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'Content-Type'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'text/plain'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"write\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"Hello World\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"end\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"我们使用 \"),_c('code',[_vm._v(\"server.listen\")]),_vm._v(\" 函数, 第一个参数为端口号, 最后一个参数是一个回调函数, 监听成功后调用.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在这里我用 \"),_c('code',[_vm._v(\"3000\")]),_vm._v(\" 作为端口号, 当然你也可以改成你喜欢的.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_vm._v(\"server\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"listen\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"3000\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    console\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"\\b服务器启动成功!\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    console\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"正在监听 3000 端口:\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" http \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"require\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'http'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" server \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" http\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"createServer\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"req\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"writeHead\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"200\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'Content-Type'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'text/plain'\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"write\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"Hello World\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"end\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\nserver\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"listen\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"3000\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    console\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"\\b服务器启动成功!\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    console\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"正在监听 3000 端口:\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在命令行中输入 \"),_c('code',[_vm._v(\"node myServer.js\")]),_vm._v(\" ( 注意你的路径和文件名 )\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/jkchEZQ.png\",\"alt\":\"Screen Shot 2018-09-26 at 6.10.47 PM\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"然后在浏览器中登录 \"),_c('code',[_vm._v(\"localhost:3000\")]),_vm._v(\", 你就可以看见服务器响应给你的 \\\"Hello World\\\" 了.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/o9Dxynd.png\",\"alt\":\"Screen Shot 2018-09-26 at 6.11.52 PM\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"Tip:\")]),_c('code',[_vm._v(\"Content-Type\")]),_vm._v(\" 的值应改成什么?\")])}]\n\nexport { render, staticRenderFns }"]}