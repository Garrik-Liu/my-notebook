{"remainingRequest":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/基本模块.md?vue&type=template&id=0d1c4254","dependencies":[{"path":"/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/基本模块.md","mtime":1531419884360},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1530932815982},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1530932815981},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1530932816121}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._m(0),_vm._m(1),_c('p',[_c('a',{attrs:{\"href\":\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"\\bHTTP 文档\"),_c('OutboundLink')],1)]),_c('p',[_vm._v(\"在 Node 标准库提供了 http 模块, 可以让 HTTP 协议 应用起来更简易.\")]),_vm._m(2),_vm._m(3),_c('p',[_vm._v(\"http.Server 是 http 模块中的 HTTP 服务器对象. 用 Node.js 做的所有基于 HTTP 协议的系统都是基于 http.Server 实现的.\")]),_c('p',[_vm._v(\"它提供了 一套封装级别很低的 API，仅仅是流控制和简单的消息解析，所有的高层功能都要通过它们接口来实现。\")]),_vm._m(4),_vm._m(5),_c('p',[_vm._v(\"HTTP 请求处理函数 接受两个参数, 分别是请求对象 ( request ) 和响应对象 ( response )\")]),_vm._m(6),_vm._m(7),_vm._m(8),_c('p',[_c('a',{attrs:{\"href\":\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_class_http_server\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"http.Server 文档\"),_c('OutboundLink')],1)]),_c('p',[_vm._v(\"在讲解上面代码, 之前我们\\b先来介绍一些知识.\")]),_vm._m(9),_vm._m(10),_c('p',[_vm._v(\"事件都继承自 EventEmitter，常用的几个有:\")]),_vm._m(11),_vm._m(12),_c('p',[_vm._v(\"是 HTTP 请求的信息. 一般由\\nhttp.Server 创建，作为 request 或 response 事件的第一个参数传递. 通常简称 request 或 req.\")]),_vm._m(13),_c('p',[_vm._v(\"http.ServerResponse 是返回给客户端的信息，决定了用户最终能看到的结果。一般由\\nhttp.Server 创建，作为 request 或 response 事件的第二个参数传递. 通常简称  response 或 res.\")]),_vm._m(14),_c('p',[_vm._v(\"首先在代码中, 我们创建一个 http.Server 实例, 然后监听 request 事件.\")]),_c('p',[_vm._v(\"http.Server 实例在创建时,\\b 接收一个函数作为 requestListner 请求监听函数.\")]),_c('p',[_vm._v(\"当 request 事件触发了, request 事件向这个函数传递 req 和 res 两个对象, 同时该函数被\\b回调执行.\")])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h1',{attrs:{\"id\":\"核心模块\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#核心模块\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 核心模块\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"http-模块\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#http-模块\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" HTTP 模块\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"模块中封装了一个高效的 HTTP 服务器对象 和 一个简易的 HTTP 客户端.\\n\"),_c('code',[_vm._v(\"http.Server\")]),_vm._v(\" 是一个基于事件的 HTTP 服务器.\\n\"),_c('code',[_vm._v(\"http.request\")]),_vm._v(\" 则是一个 HTTP 客户端工具，用于向 HTTP 服务器发起请求.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"http-服务器\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#http-服务器\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" HTTP 服务器\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"tip custom-block\"},[_c('p',{staticClass:\"custom-block-title\"},[_vm._v(\"TIP\")]),_c('p',[_vm._v(\"先看个实际使用:\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"首先使用 \"),_c('code',[_vm._v(\"http.createServer\")]),_vm._v(\" 方法创建一个实例.  这个函数接受一个 HTTP 请求处理函数 (requestListner) 作为参数, 返回一个 http.Server 实例.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 引入 http 模块\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" http \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"require\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'http'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 创建实例\")]),_vm._v(\"\\nhttp\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"createServer\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"req\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"writeHead\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"200\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'Content-Type'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'text/plain'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\" \\n    res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"write\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'I am Garrik'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    res\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"end\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 在 3000 端口监听\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"listen\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"3000\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])]),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"9\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"10\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"11\")]),_c('br')])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在上面的代码中, 我先在编写了 响应头部. 然后编写了 响应\\b体. 然后通过 \"),_c('code',[_vm._v(\"res.end\")]),_vm._v(\" 结束并发送. 最后调用 \"),_c('code',[_vm._v(\"listen\")]),_vm._v(\" 函数去监听服务器的 3000 端口.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"tip custom-block\"},[_c('p',{staticClass:\"custom-block-title\"},[_vm._v(\"TIP\")]),_c('p',[_vm._v(\"知识点:\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"http.Server 的事件:\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"首先 http.Server 是一个\"),_c('strong',[_vm._v(\"基于事件\")]),_vm._v(\"的 HTTP 服务器. 所有的请求都被封装为独立的事件， 开发者只需要对它的事件编写响应函数即可实现 HTTP 服务器的所有功能。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('p',[_c('strong',[_c('code',[_vm._v(\"request\")])]),_vm._v(\":\\n当收到客户端发来的请求时, 该事件触发.\\n发送两个参数 req 和 res, ，分别是 \"),_c('code',[_vm._v(\"http.IncomingMessage\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"http.ServerResponse\")]),_vm._v(\" 的实例，表示请求和响应信息。\")])]),_c('li',[_c('p',[_c('strong',[_c('code',[_vm._v(\"connection\")])]),_vm._v(\":\\n当 TCP 连接建立时，该事件被触发，提供一个参数 socket，为 \"),_c('code',[_vm._v(\"net.Socket\")]),_vm._v(\" 的实例。\\nconnection 事件的粒度要大于 request，因为客户端在 Keep-Alive 模式下可能会在同一个连接内发送多次请求。(粒度大意思就是事件被触发频率高, 个人理解.)\")])]),_c('li',[_c('p',[_c('strong',[_c('code',[_vm._v(\"close\")])]),_vm._v(\":\\n当服务器关闭时，该事件被触发。注意不是在用户连接断开时。\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"http.IncomingMessage:\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"http.ServerResponse:\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"tip custom-block\"},[_c('p',{staticClass:\"custom-block-title\"},[_vm._v(\"TIP\")]),_c('p',[_vm._v(\"代码解析:\")])])}]\n\nexport { render, staticRenderFns }"]}