{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/深入探讨/异步.md?vue&type=template&id=6e5b63c3","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/深入探讨/异步.md","mtime":1546981253208},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"异步编程\\\"><a href=\\\"#异步编程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 异步编程</h1><h2 id=\\\"为什么要用异步\\\"><a href=\\\"#为什么要用异步\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么要用异步?</h2><p>在编程的时候, 一个很重要的问题是: <strong>如何表达和控制持续一段时间的程序行为</strong>。换句话说, 就是一段代码 &quot;现在&quot; 运行, 另一部分 &quot;将来&quot; 运行.   &quot;将来&quot; 运行的代码无法在 &quot;现在&quot; 运行的代码执行完之后立刻执行.  &quot;现在&quot; 和 &quot;将来&quot; 之间有一段间隙.</p><p>这个间隙可能是在等待用户输入信息、从数据库或文件系统中请求数据、或通过网络发送数据并等待响应.</p><p>处理好 &quot;现在&quot; 的代码和 &quot;将来&quot; 的代码之间的关系, 就是异步编程的核心.</p><h2 id=\\\"异步的解决方案\\\"><a href=\\\"#异步的解决方案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 异步的解决方案</h2><h3 id=\\\"callback\\\"><a href=\\\"#callback\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> callback</h3><h3 id=\\\"发布-订阅\\\"><a href=\\\"#发布-订阅\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 发布/订阅</h3><h3 id=\\\"promise\\\"><a href=\\\"#promise\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise</h3><h3 id=\\\"generator\\\"><a href=\\\"#generator\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Generator</h3><h3 id=\\\"async-await\\\"><a href=\\\"#async-await\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> async/await</h3>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}