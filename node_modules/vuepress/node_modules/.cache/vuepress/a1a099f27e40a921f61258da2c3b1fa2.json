{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/后端开发/NodeJs/基础知识/前后端接口设计.md?vue&type=template&id=488dbc8d","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/后端开发/NodeJs/基础知识/前后端接口设计.md","mtime":1533506463485},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"restful-api-设计\"><a class=\"header-anchor\" href=\"#restful-api-设计\" aria-hidden=\"true\">#</a> RESTful API 设计</h1>\n<p>REST 全称是 Representational State Transfer，中文意思是 - &quot;表述性 状态转化&quot;。 REST 指的是一组架构约束条件和原则。 如果一个架构符合 REST 的约束条件和原则，我们就称它为 RESTful 架构。</p>\n<p>REST 本身并没有创造新的技术、组件或服务，而隐藏在 RESTful 背后的理念就是基于现有 Web 的特征和能力，更好地应用现有 Web 标准中的一些准则和约束。虽然 REST 本身受 Web 技术的影响很深， 但是理论上 REST 架构风格并不是绑定在 HTTP 上，只不过目前 HTTP 是唯一与 REST 相关的实例。 所以我们这里描述的 REST 也是通过 HTTP 实现的 REST。</p>\n<p>用我的话说: &quot;REST 是基于 Web 标准的准则和约束, 目的是为了建立功能强、性能好、适宜通信的应用程序架构, HTTP 是实现 REST 的方法之一&quot;</p>\n<h2 id=\"rest-名字理解\"><a class=\"header-anchor\" href=\"#rest-名字理解\" aria-hidden=\"true\">#</a> REST 名字理解</h2>\n<p>&quot;表述性 状态转化&quot; - 到底什么意思 ?</p>\n<p>这个名字其实省略了主语。&quot;表述性&quot; 指的是 &quot;资源&quot; 的 &quot;表述性&quot;。所谓 &quot;资源&quot;，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的 URI。URI 就成了每一个资源的地址或独一无二的识别符.</p>\n<p>&quot;资源&quot; 是一种信息实体，它可以有多种外在表现形式。我们把 &quot;资源&quot; 具体呈现出来的形式，叫做它的 &quot;表述&quot;. 比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式；图片可以用 JPG 格式表现，也可以用 PNG 格式表现。URI 应该只代表 &quot;资源&quot; 的位置。它的具体表现形式，应该在 HTTP 请求的头信息中用 Accept 和 Content-Type 字段指定，这两个字段才是对 &quot;表述&quot; 的描述。</p>\n<p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。HTTP 协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生 &quot;状态转化&quot;。而这种转化是建立在表述层之上的，所以就是 &quot;表述性状态转化&quot;。</p>\n<p>在前端开发中, 客户端的手段就是 HTTP 方法, 四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：</p>\n<ul>\n<li><code>GET</code> 用来获取资源</li>\n<li><code>POST</code> 用来新建资源（也可以用于更新资源）</li>\n<li><code>PUT</code> 用来更新资源</li>\n<li><code>DELETE</code> 用来删除资源</li>\n</ul>\n<p>综合上面的解释，我们总结一下什么是 RESTful 架构：</p>\n<ol>\n<li>每一个 URI 代表一种资源；</li>\n<li>客户端和服务器之间，传递这种资源的某种表述</li>\n<li>客户端通过 HTTP 动词，对服务器端资源进行操作，实现 &quot;表述性状态转化&quot;。</li>\n</ol>\n<h2 id=\"接口文档示例\"><a class=\"header-anchor\" href=\"#接口文档示例\" aria-hidden=\"true\">#</a> 接口文档示例</h2>\n<h4 id=\"用户列表\"><a class=\"header-anchor\" href=\"#用户列表\" aria-hidden=\"true\">#</a> 用户列表</h4>\n<p>用于获取用户列表，带分页功能</p>\n<h4 id=\"接口：\"><a class=\"header-anchor\" href=\"#接口：\" aria-hidden=\"true\">#</a> 接口：</h4>\n<p><code>GET /users</code></p>\n<h4 id=\"请求参数：\"><a class=\"header-anchor\" href=\"#请求参数：\" aria-hidden=\"true\">#</a> 请求参数：</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>定义</th>\n<th>必需</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>keyword</td>\n<td>string</td>\n<td>查询关键词</td>\n<td></td>\n<td><code>&quot;&quot;</code></td>\n<td>作用于<code>name</code>和<code>id</code>字段</td>\n</tr>\n<tr>\n<td>page</td>\n<td>number</td>\n<td>页码</td>\n<td></td>\n<td><code>1</code></td>\n<td></td>\n</tr>\n<tr>\n<td>role</td>\n<td>number</td>\n<td>角色</td>\n<td></td>\n<td>全部</td>\n<td>参考角色枚举说明</td>\n</tr>\n<tr>\n<td>orderBy</td>\n<td>string</td>\n<td>排序字段名称</td>\n<td></td>\n<td><code>&quot;id&quot;</code></td>\n<td>可以使用<code>&quot;id&quot;</code>或<code>&quot;name&quot;</code></td>\n</tr>\n<tr>\n<td>order</td>\n<td>string</td>\n<td>排序方式</td>\n<td></td>\n<td><code>&quot;asc&quot;</code></td>\n<td>可以为<code>&quot;asc&quot;</code>或<code>&quot;desc&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"响应：\"><a class=\"header-anchor\" href=\"#响应：\" aria-hidden=\"true\">#</a> 响应：</h4>\n<p><strong>成功：200</strong></p>\n<p>响应格式：JSON</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n    totalCount<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> // 总数\n    results<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"role\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ...<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> // 角色，多个角色用数组表示\n            <span class=\"token property\">\"birthday\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> // 生日使用YYYYMMDD格式\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        ...\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}