{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/git/git攻略.md?vue&type=template&id=3df68f52","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/git/git攻略.md","mtime":1550199324608},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"git-攻略\"><a class=\"header-anchor\" href=\"#git-攻略\" aria-hidden=\"true\">#</a> Git 攻略</h1>\n<blockquote>\n<p><strong>摘要</strong>: 本文讲解 Git 是什么, 有什么用, 如何用 Git 进行版本控制, 以及\b\b\b大厂的版本管理策略.</p>\n</blockquote>\n<h2 id=\"git-干什么的\"><a class=\"header-anchor\" href=\"#git-干什么的\" aria-hidden=\"true\">#</a> Git 干什么的?</h2>\n<p><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Git 官网<OutboundLink/></a></p>\n<p><strong>Git 是一个开源的分布式版本控制系统。</strong></p>\n<p>版本控制是一种用来 &quot;记录文件内容变化，并且允许将来查阅特定版本修订情况的系统&quot;.  当编写文件时使用「版本控制系統」可以清楚的記錄每個檔案是誰在什麼時候加進來、什麼時候被修改或刪除。Git 是目前业界最流行的版本控制系統.</p>\n<p>Git 是分布式的, 相比于集中式的最大区别在于每一个客户端都是一个独立的节点，在各自的节点上都有独立的一份完整的版本库。一个人修改了文件，这时只要把修改过的文件发送给别人，别人就也都能看的到了。这样做不但提高了效率，而且即使一个人的电脑出问题了，也可以直接从其他人那里克隆一份。分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活.</p>\n<h2 id=\"git-基础\"><a class=\"header-anchor\" href=\"#git-基础\" aria-hidden=\"true\">#</a> Git 基础</h2>\n<h3 id=\"初始化仓库\"><a class=\"header-anchor\" href=\"#初始化仓库\" aria-hidden=\"true\">#</a> 初始化仓库</h3>\n<p>在一个目录下使用 <code>git init</code> 指令初始化這個目錄，主要目的是要讓 Git 開始對這個目錄進行版本控制。這個指令會在這個目錄裡建立了一個 <code>.git</code> 隐藏目录.  目录是 Git 来跟踪管理版本库的, 它将默认记录项目目录中任何文件的改动。如果把这个子目录删除了，这里面记录的文件版本就都没有了.</p>\n<h3 id=\"记录每次更新到仓库\"><a class=\"header-anchor\" href=\"#记录每次更新到仓库\" aria-hidden=\"true\">#</a> 记录每次更新到仓库</h3>\n<h4 id=\"检查当前文件状态\"><a class=\"header-anchor\" href=\"#检查当前文件状态\" aria-hidden=\"true\">#</a> 检查当前文件状态</h4>\n<p>在一个空目录下执行 <code>git init</code>.  之后使用命令 <code>git status</code> 来查看这个目录的状态.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> status\nOn branch master\n\nInitial commit\n\nnothing to commit <span class=\"token punctuation\">(</span>create/copy files and use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>表示目录中没有东西可以提交.</p>\n<h4 id=\"跟踪新文件\"><a class=\"header-anchor\" href=\"#跟踪新文件\" aria-hidden=\"true\">#</a> 跟踪新文件</h4>\n<p>在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 <code>git status</code> 命令，你将看到一个新的未跟踪文件：</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>On branch master\nUntracked files:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to include <span class=\"token keyword\">in</span> what will be committed<span class=\"token punctuation\">)</span>\n\n    readme.md\n\nnothing added to commit but untracked files present <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在状态报告中可以看到新建的 README 文件出现在 Untracked files 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件.</p>\n<p>现在用 <code>git add</code> 跟踪 <code>readme.md</code> 文件.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>On branch master\n\nNo commits yet\n\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git rm --cached &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n\tnew file:   readme.md\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>只要在 Changes to be committed 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。</p>\n<h4 id=\"暂存已修改文件\"><a class=\"header-anchor\" href=\"#暂存已修改文件\" aria-hidden=\"true\">#</a> 暂存已修改文件</h4>\n<p>现在修改一下之前被跟踪的 <code>readme.md</code> 文件.  然后再执行 <code>git status</code></p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>On branch master\n\nNo commits yet\n\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git rm --cached &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n\tnew file:   readme.md\n\nChanges not staged <span class=\"token keyword\">for</span> commit:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to update what will be committed<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file>...\"</span> to discard changes <span class=\"token keyword\">in</span> working directory<span class=\"token punctuation\">)</span>\n\n\tmodified:   readme.md\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>readme.md</code> 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 <code>git add</code> 命令。这个命令将可以理解为 “<strong>添加内容到下一次提交中</strong>” 而不是 “将一个文件添加到项目中” 要更加合适。</p>\n<p>添加完后, 在执行 <code>git status</code></p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>On branch master\n\nNo commits yet\n\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git rm --cached &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n\tnew file:   readme.md\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>表示已暂存，下次提交时就会一并记录到仓库。</p>\n<h4 id=\"提交更新\"><a class=\"header-anchor\" href=\"#提交更新\" aria-hidden=\"true\">#</a> 提交更新</h4>\n<p>使用 <code>git commit</code> 命令将已暂存的文件进行提交.  \b这种方式会启动文本编辑器以便输入本次提交的说明。(默认会启用 shell 的环境变量 <code>$EDITOR</code> 所指定的软件，一般都是 vim 或 emacs。)</p>\n<p>也可以在 <code>commit</code> 命令后添加 <code>-m</code> 选项，将提交信息与命令放在同一行</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Story 182: Fix benchmarks for speed\"</span>\n<span class=\"token punctuation\">[</span>master 463dc4f<span class=\"token punctuation\">]</span> Story 182: Fix benchmarks <span class=\"token keyword\">for</span> speed\n 2 files changed, 2 insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>\n create mode 100644 README\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>提交后它会告诉你，当前是在哪个分支（<code>master</code>）提交的，本次提交的完整 SHA-1 校验和是什么（<code>463dc4f</code>），以及在本次提交中，有多少文件修订过，多少行添加和删改过。</p>\n<p><code>commit</code> 命令加上 <code>-a</code> 选项，Git 就会自动把所有<strong>已经跟踪过</strong>的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤</p>\n<p>如果此次提交暂存区没有任何\b\b变动, 想要提交需要加上<code>--allow-empty</code>参数.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> commit --allow-empty -m <span class=\"token string\">\"空的\"</span>\n<span class=\"token punctuation\">[</span>master 76a5b84<span class=\"token punctuation\">]</span> 空的\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"状态简览\"><a class=\"header-anchor\" href=\"#状态简览\" aria-hidden=\"true\">#</a> 状态简览</h4>\n<p><code>git status</code> 命令的输出十分详细，但其用语有些繁琐。 如果你使用 <code>git status -s</code> 命令或 <code>git status --short</code> 命令，你将得到一种更为紧凑的格式输出。</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> status -s\n M README\nMM Rakefile\nA  lib/git.rb\nM  lib/simplegit.rb\n?? LICENSE.txt\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>新添加的未跟踪文件前面有 <code>??</code> 标记，</li>\n<li>新添加到暂存区中的文件前面有 <code>A</code> 标记，</li>\n<li>修改过的文件前面有 <code>M</code> 标记\n<ul>\n<li>出现在右边的 <code>M</code> 表示该文件被修改了但是还没放入暂存区</li>\n<li>出现在靠左边的 <code>M</code> 表示该文件被修改了并放入了暂存区。</li>\n</ul>\n</li>\n</ul>\n<p>向 <code>Rakefile</code> 文件前面有两个 <code>MM</code>, 表示在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。</p>\n<h4 id=\"移除文件\"><a class=\"header-anchor\" href=\"#移除文件\" aria-hidden=\"true\">#</a> 移除文件</h4>\n<p>如果想<strong>移除某个文件的已跟踪状态</strong>（确切地说，是从暂存区域移除）.  可以使用 <code>git rm</code> 命令.  此命令还会连带从工作目录中把指定的文件删除</p>\n<p>如果只是简单地从工作目录中手工删除文件，运行 <code>git status</code> 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到</p>\n<p>如果<strong>文件删除之前修改过并且已经放到暂存区域</strong>的话，则必须要用强制删除选项 <code>-f</code>. 这是一种安全特性，用于防止误删还没有添加到快照的数据.</p>\n<p>另外一种情况是，我们想<strong>把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中</strong>。换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一大堆文件添加到暂存区时，这一做法尤其有用。使用 <code>--cached</code> 选项可以做到.</p>\n<h4 id=\"忽略文件\"><a class=\"header-anchor\" href=\"#忽略文件\" aria-hidden=\"true\">#</a> 忽略文件</h4>\n<p>有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。我们可以创建一个名为 <code>.gitignore</code> 的文件，列出要忽略的文件模式。</p>\n<p>比如:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>*.<span class=\"token punctuation\">[</span>oa<span class=\"token punctuation\">]</span>\n*~\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件.</p>\n<p>要养成一开始就设置好 <code>.gitignore</code> 文件的习惯，以免将来误提交无用的文件.</p>\n<p><code>.gitignore</code> 的格式规范如下：</p>\n<ul>\n<li>所有空行或者以 <code>＃</code> 开头的行都会被 Git 忽略。</li>\n<li>可以使用标准的 <code>glob</code> 模式匹配。</li>\n<li>匹配模式可以以（<code>/</code>）开头防止递归。</li>\n<li>匹配模式可以以（<code>/</code>）结尾指定目录。</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</li>\n</ul>\n<p><code>glob</code> 模式是指 shell 所使用的简化了的正则表达式:</p>\n<ul>\n<li>星号（<code>*</code>）匹配零个或多个任意字符;</li>\n<li><code>[abc]</code> 匹配任何一个列在方括号中的字符;</li>\n<li>问号（<code>?</code>）只匹配一个任意字符;</li>\n<li>如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code> 表示匹配所有 0 到 9 的数字）;</li>\n<li>使用两个星号（<code>*</code>) 表示匹配任意中间目录，比如<code>a/**/z</code> 可以匹配 a/z, a/b/z 或 <code>a/b/c/z</code>等。</li>\n</ul>\n<p>下面有些例子:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token comment\"># no .a files</span>\n*.a\n\n<span class=\"token comment\"># but do track lib.a, even though you're ignoring .a files above</span>\n<span class=\"token operator\">!</span>lib.a\n\n<span class=\"token comment\"># only ignore the TODO file in the current directory, not subdir/TODO</span>\n/TODO\n\n<span class=\"token comment\"># ignore all files in the build/ directory</span>\nbuild/\n\n<span class=\"token comment\"># ignore doc/notes.txt, but not doc/server/arch.txt</span>\ndoc/*.txt\n\n<span class=\"token comment\"># ignore all .pdf files in the doc/ directory</span>\ndoc/**/*.pdf\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"文件状态-工作区域\"><a class=\"header-anchor\" href=\"#文件状态-工作区域\" aria-hidden=\"true\">#</a> 文件状态 &amp; 工作区域</h3>\n<p>在 Git 中文件有两种状态：<strong>已跟踪（tracked）</strong> 和 <strong>未跟踪（untracked）</strong></p>\n<p>**已跟踪（tracked）**又分为：<strong>已提交（committed）</strong>、**已修改（modified）**和 <strong>已暂存（staged）</strong></p>\n<p>被 Git 管理的项目有三个工作区域：<strong>版本库（Repository）</strong>、<strong>工作区（Working Directory）</strong> 和 <strong>暂存区（Staging Area）</strong>。</p>\n<ul>\n<li>工作区: 就是你在电脑里能看到的目录。</li>\n<li>暂存区：英文叫 stage, 或 index。一般存放在<code>.git</code>目录下的 <code>index</code> 文件（<code>.git/index</code>）中，所以我们把暂存区有时也叫作索引（index）。</li>\n<li>版本库：<code>.git</code> 目录不算工作区，而是 Git 的版本库。</li>\n</ul>\n<p><img src=\"https://i.imgur.com/qmzpPGu.jpg\" alt=\"1352126739_7909\"></p>\n<p>当对工作区修改（或新增）的文件执行 &quot;<code>git add</code>&quot; 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中。</p>\n<p>当执行提交操作（<code>git commit</code>）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>\n<h3 id=\"查看提交历史\"><a class=\"header-anchor\" href=\"#查看提交历史\" aria-hidden=\"true\">#</a> 查看提交历史</h3>\n<p>\b想回顾提交历史需要使用 <code>git log</code> 命令</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>garrikliu:a xiangliu$ <span class=\"token function\">git</span> log\ncommit fb3afcd7ad8151207cec0ace9a6550c3e1589f81 <span class=\"token punctuation\">(</span>HEAD<span class=\"token punctuation\">)</span>\nAuthor: Garrik-Liu <span class=\"token operator\">&lt;</span>garrikliu@Gmail.com<span class=\"token operator\">></span>\nDate:   Mon Feb 4 16:55:48 2019 +0800\n\n    deleted readme\n\ncommit 022abc8b56edac279d3aa28981913e378bca136b\nAuthor: Garrik-Liu <span class=\"token operator\">&lt;</span>garrikliu@Gmail.com<span class=\"token operator\">></span>\nDate:   Sun Feb 3 09:56:44 2019 +0800\n\n    add readme.md\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>默认不用任何参数的话，<code>git log</code> 会按提交时间列出所有的更新，最近的更新排在最上面。这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p>\n<p>通过使用不同的选项参数\b可以帮助我们找到要找的提交.</p>\n<p>一个常用的选项是 <code>-p</code>，用来显示每次提交的内容差异。 你也可以加上 <code>-2</code> 来仅显示最近两次提交(同理 <code>-3</code> 就是最近的三次提交)</p>\n<p>如果你想看到每次提交的简略的统计信息，你可以使用 <code>--stat</code> 选项.  <code>--stat</code> 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>commit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon <span class=\"token operator\">&lt;</span>schacon@gee-mail.com<span class=\"token operator\">></span>\nDate:   Sat Mar 15 10:31:28 2008 -0700\n\n    first commit\n\n README           <span class=\"token operator\">|</span>  6 ++++++\n Rakefile         <span class=\"token operator\">|</span> 23 +++++++++++++++++++++++\n lib/simplegit.rb <span class=\"token operator\">|</span> 25 +++++++++++++++++++++++++\n 3 files changed, 54 insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>另外一个常用的选项是 <code>--pretty</code>。 这个选项可以指定使用不同于默认格式的方式展示提交历史。这个选项有一些内建的子选项供你使用。 比如用 <code>oneline</code> 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有 <code>short</code>，<code>full</code> 和 <code>fuller</code> 可以用.  <code>format</code> 选项可以定制要显示的记录格式。 这样的输出对后期提取分析格外有用.  具体文档参考-<a href=\"https://git-scm.com/docs/pretty-formats\" target=\"_blank\" rel=\"noopener noreferrer\">链接<OutboundLink/></a></p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> log --pretty<span class=\"token operator\">=</span>oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary <span class=\"token function\">test</span>\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"远程仓库\"><a class=\"header-anchor\" href=\"#远程仓库\" aria-hidden=\"true\">#</a> 远程仓库</h2>\n<p>远程仓库是指托管在因特网或其他网络中的你的项目的版本库.  与他人协作时, 可以在这个远程仓库上根据需要 &quot;推送&quot; 或 &quot;拉取&quot; 数据。</p>\n<h3 id=\"查看远程仓库\"><a class=\"header-anchor\" href=\"#查看远程仓库\" aria-hidden=\"true\">#</a> 查看远程仓库</h3>\n<p>如果想查看你已经配置的远程仓库服务器，可以运行 <code>git remote</code> 命令。 它会列出你指定的每一个远程服务器的简写。</p>\n<p>如果你已经克隆了自己的仓库，那么至少应该能看到 <code>origin</code>. 这是 Git 给你克隆的仓库服务器的默认名字</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> clone https://github.com/schacon/ticgit\nCloning into <span class=\"token string\">'ticgit'</span><span class=\"token punctuation\">..</span>.\nremote: Reusing existing pack: 1857, done.\nremote: Total 1857 <span class=\"token punctuation\">(</span>delta 0<span class=\"token punctuation\">)</span>, reused 0 <span class=\"token punctuation\">(</span>delta 0<span class=\"token punctuation\">)</span>\nReceiving objects: 100% <span class=\"token punctuation\">(</span>1857/1857<span class=\"token punctuation\">)</span>, 374.35 KiB <span class=\"token operator\">|</span> 268.00 KiB/s, done.\nResolving deltas: 100% <span class=\"token punctuation\">(</span>772/772<span class=\"token punctuation\">)</span>, done.\nChecking connectivity<span class=\"token punctuation\">..</span>. done.\n$ <span class=\"token function\">cd</span> ticgit\n$ <span class=\"token function\">git</span> remote\norigin\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>指定选项 <code>-v</code>，会显示需要读写远程仓库使用的 Git 保存的仓库服务器的名字, 以及其对应的 URL。</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> remote -v\norigin\thttps://github.com/schacon/ticgit <span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">)</span>\norigin\thttps://github.com/schacon/ticgit <span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"添加远程仓库\"><a class=\"header-anchor\" href=\"#添加远程仓库\" aria-hidden=\"true\">#</a> 添加远程仓库</h3>\n<p>运行 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 添加一个新的远程 Git 仓库, 同时可以为仓库指定一个名字.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> remote\norigin\n$ <span class=\"token function\">git</span> remote add pb https://github.com/paulboone/ticgit\n$ <span class=\"token function\">git</span> remote -v\norigin\thttps://github.com/schacon/ticgit <span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">)</span>\norigin\thttps://github.com/schacon/ticgit <span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">)</span>\npb\thttps://github.com/paulboone/ticgit <span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">)</span>\npb\thttps://github.com/paulboone/ticgit <span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>如果你使用 <code>clone</code> 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为名称简写。</p>\n<h3 id=\"抓取-pull-拉取-fetch\"><a class=\"header-anchor\" href=\"#抓取-pull-拉取-fetch\" aria-hidden=\"true\">#</a> 抓取(pull) &amp; 拉取(fetch)</h3>\n<h4 id=\"拉取-fetch\"><a class=\"header-anchor\" href=\"#拉取-fetch\" aria-hidden=\"true\">#</a> 拉取(fetch)</h4>\n<p>从远程仓库中获得数据，可以执行 <code>git fetch [remote-name]</code>.  这个命令会访问远程仓库，从中<strong>拉取</strong>所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p>\n<p>必须注意 <code>git fetch</code> 命令会将数据<strong>拉取</strong>到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p>\n<h4 id=\"抓取-pull\"><a class=\"header-anchor\" href=\"#抓取-pull\" aria-hidden=\"true\">#</a> 抓取(pull)</h4>\n<blockquote>\n<p>git pull = git fetch + git merge</p>\n</blockquote>\n<h3 id=\"推送到远程仓库\"><a class=\"header-anchor\" href=\"#推送到远程仓库\" aria-hidden=\"true\">#</a> 推送到远程仓库</h3>\n<p>使用命令 <code>git push [remote-name] [branch-name]</code> 将你本地的内容推送到远端服务器.</p>\n<p>這個簡單的 Push 指令其實做了幾件事：</p>\n<ul>\n<li>把 <code>master</code> 這個分支的內容，推向 <code>origin</code> 這個位置。</li>\n<li>在 <code>origin</code> 那個遠端 Server 上，如果 <code>master</code> 不存在，就建立一個叫做 <code>master</code> 的同名分支。</li>\n<li>但如果本來 Server 上就存在 <code>master</code> 分支，便會移動 Server 上 <code>master</code> 分支的位置，使它指到目前最新的進度上。</li>\n</ul>\n<p>只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。</p>\n<p>你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。</p>\n<h4 id=\"设定-upstream-上游\"><a class=\"header-anchor\" href=\"#设定-upstream-上游\" aria-hidden=\"true\">#</a> 设定 upstream (上游)</h4>\n<p>upstream，中文翻譯成「上游」.  在 Git 裡，每個分支可以設定一個「上游」（但每個分支最多只能設定一個 upstream）.  它會指向並追蹤（track）某個分支。通常 upstream 會是远端 Server 上的某個分支，但其實要設定在本地端的其它分支也可以。</p>\n<p>如果有設定，當下次執行 <code>git push</code> 指令的時候，它就會用來當預設值。</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> push -u origin master\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>就會把 <code>origin/master</code> 設定為本地 <code>master</code> 分支的 upstream，當下回執行 <code>git push</code> 指令而不加任何參數的時候，它就會猜你是要推往 <code>origin</code> 這個遠端節點，並且把 <code>master</code> 這個分支推上去。</p>\n<h4 id=\"不想要同名的分支\"><a class=\"header-anchor\" href=\"#不想要同名的分支\" aria-hidden=\"true\">#</a> 不想要同名的分支</h4>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> push origin master\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>其實上面這個指令跟下面這個指令是一樣的效果：</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> push origin master:master\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>意思是「把本地的 master 分支推上去後，在 Server 上更新 master 分支的進度，或是如果不存在該分支的話，就建立一個 master 分支」。</p>\n<p>但如果你想推上去之後不要叫這個名字的話，可以把後面的那個名字改掉：</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> push origin master:cat\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>這樣當把本地端的 master 分支推上去之後，就不會在線上建立 master 分支，而是建立（或更新進度）一個叫做 cat 的分支了。</p>\n<h3 id=\"查看远程仓库-2\"><a class=\"header-anchor\" href=\"#查看远程仓库-2\" aria-hidden=\"true\">#</a> 查看远程仓库</h3>\n<p>如果想要查看某一个远程仓库的更多信息，可以使用 <code>git remote show [remote-name]</code> 命令</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> remote show origin\n* remote origin\n  Fetch URL: https://github.com/schacon/ticgit\n  Push  URL: https://github.com/schacon/ticgit\n  HEAD branch: master\n  Remote branches:\n    master                               tracked\n    dev-branch                           tracked\n  Local branch configured <span class=\"token keyword\">for</span> <span class=\"token string\">'git pull'</span><span class=\"token keyword\">:</span>\n    master merges with remote master\n  Local ref configured <span class=\"token keyword\">for</span> <span class=\"token string\">'git push'</span><span class=\"token keyword\">:</span>\n    master pushes to master <span class=\"token punctuation\">(</span>up to date<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>它同样会列出远程仓库的 URL 与跟踪分支的信息。 这些信息非常有用，它告诉你正处于 master 分支，并且如果运行 <code>git pull</code>，就会抓取所有的远程引用，然后将远程 master 分支合并到本地 master 分支。 它也会列出拉取到的所有远程引用。</p>\n<h3 id=\"远程仓库的移除与重命名\"><a class=\"header-anchor\" href=\"#远程仓库的移除与重命名\" aria-hidden=\"true\">#</a> 远程仓库的移除与重命名</h3>\n<p>运行 <code>git remote rename</code> 去修改一个远程仓库的简写名</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> remote <span class=\"token function\">rename</span> pb paul\n$ <span class=\"token function\">git</span> remote\norigin\npaul\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>使用 <code>git remote rm</code> 移除一个远程仓库</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> remote <span class=\"token function\">rm</span> paul\n$ <span class=\"token function\">git</span> remote\norigin\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"使用分支\"><a class=\"header-anchor\" href=\"#使用分支\" aria-hidden=\"true\">#</a> 使用分支</h2>\n</div>\n",null]}