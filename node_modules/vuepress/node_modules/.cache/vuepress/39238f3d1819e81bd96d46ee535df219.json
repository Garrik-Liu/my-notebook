{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/NodeJs/深入理解/HTTP通信过程.md?vue&type=template&id=cb78857a","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/NodeJs/深入理解/HTTP通信过程.md","mtime":1532210441406},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"http-通信过程\"><a class=\"header-anchor\" href=\"#http-通信过程\" aria-hidden=\"true\">#</a> HTTP 通信过程</h1>\n<h2 id=\"创建一个-http-服务器\"><a class=\"header-anchor\" href=\"#创建一个-http-服务器\" aria-hidden=\"true\">#</a> 创建一个 HTTP 服务器</h2>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// magic happens here!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>http.createServer([options][, requestListener])</code> 创建一个 <code>http.Server</code> 实例. 接收一个函数作为  'request' 事件的监听函数.</p>\n<p><code>http.Server</code> 实例 同时也是一个 <code>events.EventEmitter</code> 对象实例</p>\n<p>上面的代码等价于:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// the same kind of magic happens here!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>\b当服务器接收到 http 请求的时候, 就会在请求处理函数中去处理 <code>request</code>, <code>response</code> 对象, 而为了监听到客户端发过来的请求, 就需要\b用到 <code>listen</code> 方法.</p>\n<p><code>listen</code> 方法用于监听一个具体的服务器端口, 以来接收从客户端发到指定端口的请求.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"请求方法-url-和-请求头部\"><a class=\"header-anchor\" href=\"#请求方法-url-和-请求头部\" aria-hidden=\"true\">#</a> 请求方法, URL 和 请求头部</h3>\n<p><a href=\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\" target=\"_blank\" rel=\"noopener noreferrer\">http.IncomingMessage 文档<OutboundLink/></a></p>\n<p>在处理请求的时候, 我们最先要看的一般就是 请求方法 和 请求 URL.</p>\n<p>从客户端发过来的请求对象里面包含着这些属性, 可以很方便的获取到.</p>\n<blockquote>\n<p>请求对象是 <code>http.IncomingMessage</code> 实例</p>\n</blockquote>\n<p>\b<code>req.headers</code> 例子</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost:3001'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'user-agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) Gecko/20100101 Firefox/61.0'</span><span class=\"token punctuation\">,</span>\n  accept<span class=\"token punctuation\">:</span> <span class=\"token string\">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'accept-language'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh-CN,en-GB;q=0.7,en;q=0.3'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'accept-encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'gzip, deflate'</span><span class=\"token punctuation\">,</span>\n  connection<span class=\"token punctuation\">:</span> <span class=\"token string\">'keep-alive'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'upgrade-insecure-requests'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'cache-control'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'max-age=0'</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"请求体\"><a class=\"header-anchor\" href=\"#请求体\" aria-hidden=\"true\">#</a> 请求体</h3>\n<p>当收到 <code>POST</code> 或 <code>PUT</code> 请求的时候, 请求体\b就尤为重要了.</p>\n<p>请求对象实现了 ReadableStream 接口, 所有的流都是 EventEmitter 的实例\n(IncomingMessage 继承自 EventEmitter)</p>\n<p>请求对象可以监听流的 <code>data</code> 和 <code>end</code> 事件,\n<code>data</code> 事件向其回调函数传递一个 Buffer 类型的参数.\n之后在 <code>end</code> 事件的回调函数中将\b所有数据 字符串化.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  body <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// at this point, `body` has the entire request body stored in it as a string</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"错误处理\"><a class=\"header-anchor\" href=\"#错误处理\" aria-hidden=\"true\">#</a> 错误处理</h3>\n<p>因为 请求对象是一个 EventEmitter, 所以它可以接受 <code>error</code> 事件.<br>\n如果不为 <code>error</code> 事件设置一个监听函数的话, 如果错误发生, \b服务器就会崩停的.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>最好向客户端返回一个 http 回应.</p>\n<h2 id=\"服务器做出回应\"><a class=\"header-anchor\" href=\"#服务器做出回应\" aria-hidden=\"true\">#</a> 服务器做出回应</h2>\n<p>收到\b客户端发过来的请求后, 服务器就要\b向客户端返回一个响应了.</p>\n<p>响应对象 是 <code>http.ServerResponse</code> 实例, 实现了 <code>WritableStream</code> 接口.</p>\n<h3 id=\"状态码-响应头-响应头\"><a class=\"header-anchor\" href=\"#状态码-响应头-响应头\" aria-hidden=\"true\">#</a> 状态码, 响应头, 响应头</h3>\n<p>响应状态码 默认是 200.</p>\n<p>\b如果想设置的话, 可以通过 <code>statusCode</code> 属性.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>通过 <code>setHeader</code> 方法可以设置 响应头</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X-Powered-By'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bacon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>通过 <code>writeHead</code>, 可以同时设置\b这两个:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>response<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'X-Powered-By'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bacon'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>因为 响应对象 实现了 <code>WriteableStrem</code> 接口, 我们可以手动去写响应体</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;html>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;body>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h1>Hello, World!&lt;/h1>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/body>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/html>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>end()</code> 函数可以用来在流的最后添加\b数据, 上面代码也可以写成:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;html>&lt;body>&lt;h1>Hello, World!&lt;/h1>&lt;/body>&lt;/html>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"错误处理-2\"><a class=\"header-anchor\" href=\"#错误处理-2\" aria-hidden=\"true\">#</a> 错误处理</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>response<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}