{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/基础知识/引用类型.md?vue&type=template&id=1bc93fee","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/基础知识/引用类型.md","mtime":1538358655464},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"引用类型\"><a class=\"header-anchor\" href=\"#引用类型\" aria-hidden=\"true\">#</a> 引用类型</h1>\n<p>在ECMAScript中，<strong>引用类型</strong>是一种数据结构, 是一组<strong>数据和功能的无序集合</strong>。它也常被称为<strong>类</strong>. 引用类型有时候也被称为<strong>对象定义</strong>，因为它们描述的是一类对象所具有的属性和方法。</p>\n<p>对象是某个特定引用类型的实例。新对象是使用 <code>new</code> 操作符后跟一个构造函数来创建的。构造函数本身就是一个函数，只不过该函数是出于创建新对象的目的而定义的。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面代码, 用 Object 构造函数创建了一个 Object 引用类型的新实例, 实例保存在变量 person 中.</p>\n<h2 id=\"object类型\"><a class=\"header-anchor\" href=\"#object类型\" aria-hidden=\"true\">#</a> Object类型</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<p>创建Object实例的方式有两种:</p>\n<p>第一种是使用 <code>new</code> 操作符后跟 Object构造函数:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>另一种方式是使用 对象字面量表示法:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">,</span>\n    age <span class=\"token punctuation\">:</span> <span class=\"token number\">29</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>也可以写成:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">29</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面这种写法先定义了一个 &quot;空对象&quot;, 然后添加属性和方法.  但是注意 &quot;空对象&quot; 只是一个简称.  JS 中没有空对象, 最简单的 <code>{}</code> 也包含从 <code>Object.prototype</code> 继承来的属性和方法, 这里的 &quot;空&quot; 只是说它没有自有属性.</p>\n<p>对象字面量与使用构造函数相比还是很多区别的:</p>\n<ul>\n<li>对象字面量代码更少, 更易读.</li>\n<li>它可以强调对象就是一个简单的可变的散列表(可变哈希映射)，而不必一定派生自某个类</li>\n<li>对象字面量不需要做 &quot;<strong>作用域解析</strong>&quot;, 假如说我们自定义了一个同名的构造函数 <code>Object()</code>, 调用 <code>Object()</code> 创建新对象的时候, 解析器会顺着作用域链开始查找, 先找到自定义的了, 就不往上找了.  对象字面量不需要这个过程, 会更高效.</li>\n<li><code>Object()</code> 可以接收参数, 可以根据参数不同把创建过程委托给别的内置构造函数</li>\n</ul>\n<p>下面的示例代码中展示了给 <code>new Object()</code> 传入不同的参数（数字、字符串和布尔值），最终得到的对象是由不同的构造函数生成的：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 空对象</span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 数值对象</span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 字符串对象</span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 布尔值对象</span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>问题: 下面这个我还没明白!!!</p>\n<blockquote>\n<p>在通过对象字面量定义对象时，实际上不会调用Object构造函数</p>\n</blockquote>\n<p>访问对象中的属性可以用 点表示法 和 方括号表示法, 使用方括号语法时，应该将要访问的属性以字符串的形式放在方括号中:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//\"Nicholas\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//\"Nicholas\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"哈希表\"><a class=\"header-anchor\" href=\"#哈希表\" aria-hidden=\"true\">#</a> 哈希表</h3>\n<p>哈希表(hash table), 也叫散列表, 是根据键（Key）而直接访问在内存存储位置的二维数据结构。通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置, 通过这个位置来访问数据。这个映射函数称做散列函数，存放记录的数组称做散列表。</p>\n<p>举个例子: 查电话本, 将人名按照首字母排序, 找人时, 根据人的名字找到首字母, 根据首字母, 去对应字母的一栏查找具体的电话号码.\n在这里, 人名是 &quot;Key&quot;, 取人名首字母的过程是 &quot;散列函数&quot;, 算出之后, 对应的首字母组为人名的 &quot;Value&quot;, 人名和首字母构成散列表.</p>\n<h3 id=\"\"><a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">#</a> </h3>\n<p>JS 对象是基于 Hash 表存储变量的</p>\n<h2 id=\"array类型\"><a class=\"header-anchor\" href=\"#array类型\" aria-hidden=\"true\">#</a> Array类型</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<p>ECMAScript 数组的每一项可以保存任何类型的数据。ECMAScript数组的大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。</p>\n<p>和 Object 一样, 也是有两种创建方法:</p>\n<p>第一种: 使用 <code>Array</code> 构造函数:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 如果预先知道数组要保存的项目数量，也可以给构造函数传递该数量，而该数量会自动变成 \"length\" 属性的值。</span>\n<span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 也可以向 Array 构造函数传递数组中应该包含的项。</span>\n<span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// new 操作符可以省略</span>\n<span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>第二种: 使用数组字面量表示法: 数组字面量由一对包含数组项的方括号 (&quot;[]&quot;) 表示，多个数组项之间以逗号 (&quot;,&quot;) 隔开，</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 创建一个包含3个字符串的数组</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><blockquote>\n<p>与对象一样，在使用数组字面量表示法时，也不会调用 Array 构造函数</p>\n</blockquote>\n<p>在读取和设置数组的值时，要使用方括号 (&quot;[]&quot;) 并提供相应值的 基于 0 的数字索引</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 定义一个字符串数组</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 显示第一项</span>\ncolors<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 修改第三项</span>\ncolors<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"brown\"</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 新增第四项</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>数组的项数保存在其 <code>length</code> 属性中，这个属性始终会返回0或更大的值, 通过设置 <code>length</code> 来删除, 添加数组项</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 创建一个包含3个字符串的数组</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// 移除最后一项</span>\ncolors<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在末尾添加新项, 由于数组最后一项的索引始终是length-1，因此下一个新项的位置就是length。</span>\ncolors<span class=\"token punctuation\">[</span>colors<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"检测数组\"><a class=\"header-anchor\" href=\"#检测数组\" aria-hidden=\"true\">#</a> 检测数组</h3>\n<p><code>Array.isArray()</code> 方法可以确定某个值到底是不是数组</p>\n<h3 id=\"转换方法\"><a class=\"header-anchor\" href=\"#转换方法\" aria-hidden=\"true\">#</a> 转换方法</h3>\n<p>数组的 <code>toString()</code> 方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号 (&quot;,&quot;) 分隔的字符串.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 创建一个包含3个字符串的数组</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// red,blue,green</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>join()</code>方法可以使用不同的分隔符来构建返回包含所有数组项的字符串。只接收一个参数，即用作分隔符的字符串.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//red,green,blue</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"||\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//red||green||blue</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"栈方法\"><a class=\"header-anchor\" href=\"#栈方法\" aria-hidden=\"true\">#</a> 栈方法</h3>\n<p>栈是一种 LIFO（Last-In-First-Out，后进先出）的数据结构, 也就是最新添加的项最早被移除。</p>\n<p>ECMAScript 数组也提供了一种让数组的行为类似于栈数据结构的方法。</p>\n<ul>\n<li><code>push()</code> 方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。</li>\n<li><code>pop()</code>方法则从数组末尾移除最后一项，然后返回移除的项。</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> deleteColor <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"队列方法\"><a class=\"header-anchor\" href=\"#队列方法\" aria-hidden=\"true\">#</a> 队列方法</h3>\n<p>队列数据结构的访问规则是 FIFO（First-In-First-Out，先进先出）队列在列表的末端添加项，从列表的前端移除项。</p>\n<ul>\n<li><code>push()</code> 是向数组末端添加项的方法, 返回长度</li>\n<li><code>shift()</code> 是从数组前端取得项的方法, 返回移除的项</li>\n<li><code>unshift()</code> 在数组前端添加任意个项并返回新数组的长度</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> deleteColor <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"重排序方法\"><a class=\"header-anchor\" href=\"#重排序方法\" aria-hidden=\"true\">#</a> 重排序方法</h3>\n<p>数组中已经存在两个可以直接用来重排序的方法：<code>reverse()</code> 和 <code>sort()</code>。</p>\n<p><code>reverse()</code> 方法会反转数组项的顺序。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//5,4,3,2,1</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在默认情况下，<code>sort()</code> 方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。\n为了实现排序，<code>sort()</code> 方法会调用每个数组项的 <code>toString()</code> 转型方法，也就是说最后比较的是字符串, 也就是字符的 Unicode 值.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//0,1,10,15,5</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>因为按照字符串进行比较, 就会出现上面的问题.</p>\n<p><code>sort()</code> 方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回0，如果第一个参数应该位于第二个之后则返回一个正数。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//0,1,5,10,15</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value1 <span class=\"token operator\">-</span> value2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"操作方法\"><a class=\"header-anchor\" href=\"#操作方法\" aria-hidden=\"true\">#</a> 操作方法</h3>\n<h4 id=\"concat\"><a class=\"header-anchor\" href=\"#concat\" aria-hidden=\"true\">#</a> concat()</h4>\n<p><code>concat()</code> 方法可以用于拼接数组. 这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> colors2 <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"black\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"brown\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//red,green,blue</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//red,green,blue,yellow,black,brown</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>不传递任何参数, 可以硬复制一个数组, 数组是引用类型, 直接的复制只是复制了指针</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> colors2 <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> colors3 <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncolors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// white, green, blue</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// red, green, blue</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"slice\"><a class=\"header-anchor\" href=\"#slice\" aria-hidden=\"true\">#</a> slice()</h4>\n<p><code>slice()</code> 用于切割数组, 接受一或两个参数，即要返回项的起始和结束位置. 在只有一个参数的情况下，<code>slice()</code> 方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"purple\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> colors2 <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> colors3 <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//green,blue,yellow,purple</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//green,blue,yellow</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"splice\"><a class=\"header-anchor\" href=\"#splice\" aria-hidden=\"true\">#</a> splice()</h4>\n<p><code>splice()</code> 方法主要用途是向数组的中部插入项，但使用这种方法的方式则有如下3种:</p>\n<p>删除: 可以删除任意数量的项，只需指定2个参数：要删除的第一项的位置和要删除的项数, 返回删除的项组成的数组</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> removed <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 删除第一项</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// green,blue</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>removed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// red，返回的数组中只包含一项</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>插入: 向指定位置插入任意数量的项，只需提供3个参数：起始位置、0（要删除的项数）和要插入的项。返回空数组</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>removed <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 从位置1开始插入两项</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// green,yellow,orange,blue</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>removed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 返回的是一个空数组</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>替换: 可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>removed <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"purple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 插入两项，删除一项</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// green,red,purple,orange,blue</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>removed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// yellow，返回的数组中只包含一项</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"位置方法\"><a class=\"header-anchor\" href=\"#位置方法\" aria-hidden=\"true\">#</a> 位置方法</h3>\n<p>数组实例添加了两个位置方法: <code>indexOf()</code> 和 <code>lastIndexOf()</code>。</p>\n<p>这两个方法都接收两个参数：要查找的项 和（可选的）表示查找起点位置的索引。其中，<code>indexOf()</code> 方法从数组的开头（位置0）开始向后查找，<code>lastIndexOf()</code> 方法则从数组的末尾开始向前查找。</p>\n<p>返回要查找的项在数组中的位置，或者在没找到的情况下返回 -1。比较的时候用的是全等操作符 <code>===</code></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//3</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//5</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//5</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3up</span>\n\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Nicholas\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Nicholas\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> morePeople <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>person<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//-1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>morePeople<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"迭代方法\"><a class=\"header-anchor\" href=\"#迭代方法\" aria-hidden=\"true\">#</a> 迭代方法</h3>\n<p>ECMAScript 5 为数组定义了 5 个迭代方法。每个方法都接收两个参数：要在每一项上运行的函数和（可选的）运行该函数的作用域对象(影响 <code>this</code> 的值)。传入方法中的函数会接收三个参数：数组项的值、该项在数组中的位置 和 数组对象本身。</p>\n<p>下面这些方法都不会修改原数组中的包含的值</p>\n<ul>\n<li>\n<p><code>every()</code>：对数组中的每一项运行给定函数，如果该函数对每一项都返回 <code>true</code>，则返回 <code>true</code>。</p>\n</li>\n<li>\n<p><code>filter()</code>：对数组中的每一项运行给定函数，返回该函数会返回 <code>true</code> 的项组成的数组。</p>\n</li>\n<li>\n<p><code>forEach()</code>：对数组中的每一项运行给定函数。这个方法没有返回值。</p>\n</li>\n<li>\n<p><code>map()</code>：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</p>\n</li>\n<li>\n<p><code>some()</code>：对数组中的每一项运行给定函数，如果该函数对任一项返回 <code>true</code>，则返回 <code>true</code>。</p>\n</li>\n</ul>\n<h3 id=\"缩小方法\"><a class=\"header-anchor\" href=\"#缩小方法\" aria-hidden=\"true\">#</a> 缩小方法</h3>\n<p>ECMAScript 5还新增了两个缩小数组的方法：<code>reduce()</code> 和 <code>reduceRight()</code>。这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。</p>\n<p><code>reduce()</code> 方法从数组的第一项开始，逐个遍历到最后。而 <code>reduceRight()</code> 则从数组的最后一项开始，向前遍历到第一项。</p>\n<p>两个方法都接收两个参数：一个在每一项上调用的函数 和（可选的）作为缩小基础的初始值。</p>\n<p>传给的函数接收 4 个参数：前一个值、当前值、项的索引 和 数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//15</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"date类型\"><a class=\"header-anchor\" href=\"#date类型\" aria-hidden=\"true\">#</a> Date类型</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<h2 id=\"regexp-类型\"><a class=\"header-anchor\" href=\"#regexp-类型\" aria-hidden=\"true\">#</a> RegExp 类型</h2>\n<h2 id=\"function-类型\"><a class=\"header-anchor\" href=\"#function-类型\" aria-hidden=\"true\">#</a> Function 类型</h2>\n<p>直接参考 <router-link to=\"./函数.html\">函数</router-link></p>\n<h2 id=\"基本包装类型\"><a class=\"header-anchor\" href=\"#基本包装类型\" aria-hidden=\"true\">#</a> 基本包装类型</h2>\n<p>为了便于操作基本类型值，ECMAScript 还提供了3个特殊的引用类型：<code>Boolean</code>、<code>Number</code> 和 <code>String</code>.  每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象，从而让我们能够调用一些方法来操作这些数据。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"some text\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面这个例子中, 我们明明创建的是基本类型, 为什么它可以有方法.  其实，为了让我们实现这种直观的操作，后台已经自动完成了一系列的处理。当第二行代码访问 <code>s1</code> 时，访问过程处于一种读取模式，也就是要从内存中读取这个字符串的值。而在读取模式中访问字符串时，后台都会自动完成下列处理。</p>\n<ol>\n<li>创建 String 类型的一个实例；</li>\n<li>在实例上调用指定的方法；</li>\n<li>销毁这个实例。</li>\n</ol>\n<p>引用类型与基本包装类型的主要区别就是对象的生存期。使用 <code>new</code> 操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型值添加属性和方法。</p>\n<p>要注意的是，使用 <code>new</code> 调用基本包装类型的构造函数，与直接调用同名的转型函数是不一样的。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"25\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//转型函数</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//\"number\"</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//构造函数</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//\"object\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"boolean-类型\"><a class=\"header-anchor\" href=\"#boolean-类型\" aria-hidden=\"true\">#</a> Boolean 类型</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<p><code>Boolean</code> 类型是与布尔值对应的引用类型。要创建 <code>Boolean</code> 对象，可以像下面这样调用 <code>Boolean</code> 构造函数并传入 <code>true</code> 或 <code>false</code> 值。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> booleanObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>理解基本类型的布尔值与 Boolean 对象之间的区别非常重要:</p>\n<p><code>typeof</code> 操作符对基本类型返回 <code>&quot;boolean&quot;</code>，而对引用类型返回 <code>&quot;object&quot;</code>。其次，由于 <code>Boolean</code> 对象是 <code>Boolean</code> 类型的实例，所以使用 <code>instanceof</code> 操作符测试 <code>Boolean</code> 对象会返回 <code>true</code>，而测试基本类型的布尔值则返回 <code>false</code>。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> falseObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//object</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> falseValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//boolean</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>falseObject <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//true</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>falseValue <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在布尔表达式中 <code>Boolean</code> 实例也被认为是 <code>true</code></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> falseObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> falseObject <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"number-类型\"><a class=\"header-anchor\" href=\"#number-类型\" aria-hidden=\"true\">#</a> Number 类型</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<p><code>Number</code> 是与数字值对应的引用类型。要创建 <code>Number</code> 对象，可以在调用 <code>Number</code> 构造函数时向其中传递相应的数值。</p>\n<p>向 <code>Number</code> 实例的 <code>toString()</code> 方法传递一个表示基数的参数，告诉它返回几进制数值的字符串形式</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//\"10\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//\"1010\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//\"12\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//\"10\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//\"a\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>Number</code> 类型还提供了一些用于将数值格式化为字符串的方法. <code>toFixed()</code> 方法会按照指定的小数位返回数值的字符串表示, 如果数值本身包含的小数位比指定的还多，那么接近指定的最大小数位的值就会舍入</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//\"10.00\"</span>\n\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10.005</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//\"10.01\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>另外可用于格式化数值的方法是 <code>toExponential()</code>，该方法返回以指数表示法（也称e表示法）表示的数值的字符串形式。接收一个参数，而且该参数同样也是指定输出结果中的小数位数。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toExponential</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//\"1.0e+1\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>如果你想得到表示某个数值的最合适的格式，就应该使用 <code>toPrecision()</code> 方法。对于一个数值来说，<code>toPrecision()</code> 方法可能会返回固定大小（fixed）格式，也可能返回指数（exponential）格式；这个方法接收一个参数，即表示数值的所有数字的位数（不包括指数部分）。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//\"1e+2\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//\"99\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//\"99.0\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>以上代码首先完成的任务是以一位数来表示 99，结果是 &quot;1e+2&quot;，即 100。因为一位数无法准确地表示99，因此 <code>toPrecision()</code> 就将它向上舍入为 100，这样就可以使用一位数来表示它了。而接下来的用两位数表示 99，当然还是 &quot;99&quot;。最后，在想以三位数表示 99 时， <code>toPrecision()</code> 方法返回了&quot;99.0&quot;。实际上，<code>toPrecision()</code> 会根据要处理的数值决定到底是调用 <code>toFixed()</code> 还是调用 <code>toExponential()</code>。</p>\n<h3 id=\"string-类型\"><a class=\"header-anchor\" href=\"#string-类型\" aria-hidden=\"true\">#</a> String 类型</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<p>String 类型是字符串的对象包装类型.</p>\n<p>String类型的每个实例都有一个 <code>length</code> 属性，表示字符串中包含多个字符。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//\"11\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_1-字符方法\"><a class=\"header-anchor\" href=\"#_1-字符方法\" aria-hidden=\"true\">#</a> 1. 字符方法</h4>\n<p>两个用于访问字符串中特定字符的方法是：<code>charAt()</code> 和 <code>charCodeAt()</code>。这两个方法都接收一个参数，即基于0的字符位置。其中，<code>charAt()</code> 方法以单字符字符串的形式返回给定位置的那个字符, 如果你想得到的不是字符而是字符编码，那么就要像下面这样使用<code>charCodeAt()</code> 了</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"e\"</span>\n\n<span class=\"token keyword\">var</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//输出\"101\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>ES5 中可以用方括号加数字索引来访问字符串中的特定字符:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"e\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_2-字符串操作方法\"><a class=\"header-anchor\" href=\"#_2-字符串操作方法\" aria-hidden=\"true\">#</a> 2. 字符串操作方法</h4>\n<p><code>concat()</code>，用于将一或多个字符串拼接起来，返回拼接得到的新字符串。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\"hello \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//\"hello world\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//\"hello\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>然而实践中使用更多的还是加号操作符 <code>+</code></p>\n<p>ECMAScript还提供了三个基于子字符串创建新字符串的方法：<code>slice()</code>、<code>substr()</code> 和 <code>substring()</code>。这三个方法都会返回被操作字符串的一个子字符串，而且也都接受一或两个参数。第一个参数指定子字符串的开始位置，第二个参数（在指定的情况下）表示子字符串到哪里结束。</p>\n<p><code>slice()</code> 和 <code>substring()</code> 的第二个参数指定的是子字符串最后一个字符后面的位置。而 <code>substr()</code> 的第二个参数指定的则是返回的字符个数。如果没有给这些方法传递第二个参数，则将字符串的末尾作为结束位置。</p>\n<p>与 <code>concat()</code> 方法一样，<code>slice()</code>、<code>substr()</code> 和 <code>substring()</code> 也不会修改字符串本身的值——它们只是返回一个基本类型的字符串值，对原始字符串没有任何影响。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//\"lo world\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//\"lo world\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//\"lo world\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//\"lo w\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//\"lo w\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//\"lo worl\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在传递给这些方法的参数是负值的情况下，它们的行为就不尽相同了:</p>\n<ul>\n<li><code>slice()</code> 方法会将传入的负值与字符串的长度相加</li>\n<li><code>substr()</code> 方法将负的第一个参数加上字符串的长度，而将负的第二个参数转换为 0。</li>\n<li><code>substring()</code> 方法会把所有负值参数都转换为0。</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//\"rld\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//\"hello world\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//\"rld\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//\"lo w\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//\"hel\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//\"\"（空字符串）</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"单体内置对象\"><a class=\"header-anchor\" href=\"#单体内置对象\" aria-hidden=\"true\">#</a> 单体内置对象</h2>\n</div>\n",null]}