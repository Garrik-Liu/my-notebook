{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/基础篇/模块机制.md?vue&type=template&id=5b2ed3b4","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/基础篇/模块机制.md","mtime":1536276360327},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"模块机制\"><a class=\"header-anchor\" href=\"#模块机制\" aria-hidden=\"true\">#</a> 模块机制</h1>\n<p>在开发相对复杂的程序时, 通过使用模块机制, 我们可以把一个复杂程序的各个功能拆分, 分别封装到不同的文件. 在需要的时候引入相关的模块. 这样做可以让代码的可读性, 复用性, 和易维护性够变得更高.</p>\n<p>Node.js 参照 CommonJS 标准实现了模块机制.  在 Node.js 中, 每个\b文件就被视为一个模块.  这个文件可能是 JavaScript \b编写的文件、JSON 或者用 C/C++ 编译的二进制文件.  在上一篇结尾的 Node 代码实例中, <code>http</code> 就是一个 Node 自带的核心模块, 用以实现 HTTP 协议.</p>\n<blockquote>\n<p>CommonJS 规范: 因为 JavaScript 诞生之初只是为了写网页小脚本, 并不作为开发大型复杂应用的语言, 其自身有很多不足.  由于官方规范 (ECMAScript) 制定的时间较早, 涵盖范围较小, 对于后端开发而言, 例如文件系统, I/O 流, 模块系统, 等等方面都没有相应的标准.  CommonJS 规范让 JavaScript 弥补了没有标准的缺陷, 让 JavaScript 有能力去开发复杂应用, 同时具备了跨平台能力.</p>\n</blockquote>\n<h2 id=\"模块类型\"><a class=\"header-anchor\" href=\"#模块类型\" aria-hidden=\"true\">#</a> 模块类型</h2>\n<p>核心模块</p>\n<h2 id=\"创建-导出模块\"><a class=\"header-anchor\" href=\"#创建-导出模块\" aria-hidden=\"true\">#</a> 创建 &amp; 导出模块</h2>\n<p>在了解了什么是模块之后, 让我们来看看如何创建并导出模块.  在 Node.js 中, 一个文件就是一个模块.  创建模块的方法就是创建一个文件.  我们要关注的问题是怎么样把这个模块的内容导出, 以让其他文件能够获取到. 在这一篇里我只关注 JavaScript 编写的模块.</p>\n<p>在 Node.js 中, 通过 <code>exports</code> 对象来指定一个模块的导出内容.</p>\n<p>示例:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 文件名: nameModule.js</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Garrik'</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>newName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在以上示例中, nameModule.js 文件通过 <code>exports</code> 对象导出了 <code>setName</code> 和 <code>getName</code> 两个方法.  其他的模块可以通过引入这两个方法来操作 nameModule.js 文件中的 <code>name</code> 变量.</p>\n<h2 id=\"引入模块\"><a class=\"header-anchor\" href=\"#引入模块\" aria-hidden=\"true\">#</a> 引入模块</h2>\n<p>在 Node.js 中, 通过 <code>require</code> 方法来引入外界模块导出的内容.</p>\n<p>示例:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 文件名: showNameModule.js</span>\n<span class=\"token keyword\">var</span> nameModule <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./nameModule'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nameModule<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 显示: Garrik</span>\n\nnameModule<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Xiang'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nameModule<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 显示: Xiang</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面示例中, 通过 <code>require</code> 引入 nameModule.js 导出的对象 (后缀 <code>.js</code> 可以省略).  我们就可以在 showNameModule.js 文件中使用 <code>getName</code> 和 <code>setName</code> 这两个方法了.</p>\n<h3 id=\"路径解析\"><a class=\"header-anchor\" href=\"#路径解析\" aria-hidden=\"true\">#</a> 路径解析</h3>\n<h2 id=\"包-包管理器\"><a class=\"header-anchor\" href=\"#包-包管理器\" aria-hidden=\"true\">#</a> 包 &amp; 包管理器</h2>\n</div>\n",null]}