{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/webpack/基础概念.md?vue&type=template&id=6c408b58","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/webpack/基础概念.md","mtime":1549548361144},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"webpack-基础概念\"><a class=\"header-anchor\" href=\"#webpack-基础概念\" aria-hidden=\"true\">#</a> Webpack 基础概念</h1>\n<h2 id=\"前端的-模块化\"><a class=\"header-anchor\" href=\"#前端的-模块化\" aria-hidden=\"true\">#</a> 前端的 &quot;模块化&quot;</h2>\n<p>随着前端变得越来越复杂和庞大, 传统的通过直接编写 JavaScript、CSS、HTML 开发 Web 应用的方式已经无法应对当前 Web 应用的发展。随之各种为了优化开发, 提升效率的新思想, 新技术也涌现出来.  其中最重要的理念之一就是 - &quot;模块化&quot;.  模块化是指解决一个复杂问题时自顶向下逐层把系统划分成若干模块的过程.  当项目变大时这种方式将变得难以维护，需要用模块化的思想来组织代码。模块化思想被很多新的前端框架所应用, 但是这些东西都有一个共同点：源代码无法直接运行，必须通过转换后才可以正常运行。</p>\n<p>这个时候构建工具就派上了用场, 构建工具把源代码转换成发布到线上的可执行 JavaScrip、CSS、HTML 代码.</p>\n<h2 id=\"什么是-webpack\"><a class=\"header-anchor\" href=\"#什么是-webpack\" aria-hidden=\"true\">#</a> 什么是 Webpack</h2>\n<p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(static module bundler)。webpack 把项目中的一切文件都看作是模块, 并内部理清各个模块之间的依赖关系，然后将模块打包构建成项目运行所需的静态文件.</p>\n<p><img src=\"http://webpack.wuhaolin.cn/1%E5%85%A5%E9%97%A8/img/1-2webpack.png\" alt=\"img\"></p>\n<h2 id=\"基本概念\"><a class=\"header-anchor\" href=\"#基本概念\" aria-hidden=\"true\">#</a> 基本概念</h2>\n<h3 id=\"入口-entry\"><a class=\"header-anchor\" href=\"#入口-entry\" aria-hidden=\"true\">#</a> 入口 Entry</h3>\n<p>如上图所示，在多个代码模块中会有一个起始的 <code>.js</code> 文件，这个便是 webpack 构建的入口。webpack 会读取这个文件，并从它开始解析依赖. 任何时候，一个文件依赖于另一个文件，webpack 就把此视为文件之间有依赖关系。 从入口起点开始，webpack 递归地构建一个依赖图，这个依赖图包含着应用程序所需的每个模块.</p>\n<p>默认的入口文件就是 <code>./src/index.js</code>。</p>\n<p>在 webpack 配置文件中, 入口可以使用 <code>entry</code> 字段来进行配置:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./path/to/my/entry/file.js'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"出口\"><a class=\"header-anchor\" href=\"#出口\" aria-hidden=\"true\">#</a> 出口</h3>\n<p><code>output</code> 属性告诉 webpack 在哪里输出它打包模块后生成的静态文件，以及如何命名这些文件，主输出文件默认为 <code>./dist/main.js</code>，其他生成文件的默认输出目录是 <code>./dist</code>。</p>\n<p>通过配置文件中的 <code>output</code> 字段可以进行\b\b配置:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./path/to/my/entry/file.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-first-webpack.bundle.js'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"loader\"><a class=\"header-anchor\" href=\"#loader\" aria-hidden=\"true\">#</a> loader</h3>\n<p><strong>loader 用于对模块的源代码进行转换</strong></p>\n<p>前面说, 在 webpack 中一切文件都被视为模块.  loader 为 webpack 提供了一种处理多种文件格式的机制.  能够让 webpack 处理那些非 JavaScript 文件，并且先将它们转换为有效模块，然后添加到依赖中.</p>\n<p>可以把 loader 理解为是一个转换器，负责把某种文件格式的内容转换成 webpack 可以支持打包的模块。</p>\n<p>假如我们要让 webpack 加载 CSS 文件.  就需要配置相对应的 loader.</p>\n<p>首先安装对应的 loader</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev css-loader\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>然后在 <code>module.rules</code> 字段下来配置相关的规则:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> \n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 匹配文件路径的正则表达式</span>\n          use<span class=\"token punctuation\">:</span> <span class=\"token string\">'css-loader'</span> <span class=\"token comment\">// 指定使用的 loader</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"plugin\"><a class=\"header-anchor\" href=\"#plugin\" aria-hidden=\"true\">#</a> plugin</h3>\n<p>插件目的在于解决 loader 无法实现的其他事。通过添加我们需要的 plugin，可以满足更多构建中特殊的需求。例如，使用 <code>uglifyjs-webpack-plugin</code> 插件可以压缩 JS 代码.</p>\n<h2 id=\"一个简单的-webpack-配置\"><a class=\"header-anchor\" href=\"#一个简单的-webpack-配置\" aria-hidden=\"true\">#</a> 一个简单的 webpack 配置</h2>\n<p>我们把上述涉及的几部分配置内容合到一起，就可以创建一个简单的 webpack 配置了，webpack 运行时默认读取项目下的 <code>webpack.config.js</code> 文件作为配置。</p>\n<p>下面是一个配置示例:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> UglifyPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uglifyjs-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.jsx?/</span><span class=\"token punctuation\">,</span>\n        include<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 代码模块路径解析的配置</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span>\n      path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".wasm\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".mjs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".jsx\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">UglifyPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token comment\">// 使用 uglifyjs-webpack-plugin 来压缩 JS 代码</span>\n    <span class=\"token comment\">// 如果你留意了我们一开始直接使用 webpack 构建的结果，你会发现默认已经使用了 JS 代码压缩的插件</span>\n    <span class=\"token comment\">// 这其实也是我们命令中的 --mode production 的效果，后续的小节会介绍 webpack 的 mode 参数</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>webpack 的配置其实是一个 Node.js 的脚本，这个脚本对外暴露一个配置对象，webpack 通过这个对象来读取相关的一些配置。</p>\n</div>\n",null]}