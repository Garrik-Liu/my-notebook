{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/git/git攻略.md?vue&type=template&id=3df68f52","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/git/git攻略.md","mtime":1550199324608},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._m(0),_vm._m(1),_vm._m(2),_c('p',[_c('a',{attrs:{\"href\":\"https://git-scm.com/\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"Git 官网\"),_c('OutboundLink')],1)]),_vm._m(3),_c('p',[_vm._v(\"版本控制是一种用来 \\\"记录文件内容变化，并且允许将来查阅特定版本修订情况的系统\\\".  当编写文件时使用「版本控制系統」可以清楚的記錄每個檔案是誰在什麼時候加進來、什麼時候被修改或刪除。Git 是目前业界最流行的版本控制系統.\")]),_c('p',[_vm._v(\"Git 是分布式的, 相比于集中式的最大区别在于每一个客户端都是一个独立的节点，在各自的节点上都有独立的一份完整的版本库。一个人修改了文件，这时只要把修改过的文件发送给别人，别人就也都能看的到了。这样做不但提高了效率，而且即使一个人的电脑出问题了，也可以直接从其他人那里克隆一份。分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活.\")]),_vm._m(4),_vm._m(5),_vm._m(6),_vm._m(7),_vm._m(8),_vm._m(9),_vm._m(10),_c('p',[_vm._v(\"表示目录中没有东西可以提交.\")]),_vm._m(11),_vm._m(12),_vm._m(13),_c('p',[_vm._v(\"在状态报告中可以看到新建的 README 文件出现在 Untracked files 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件.\")]),_vm._m(14),_vm._m(15),_c('p',[_vm._v(\"只要在 Changes to be committed 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。\")]),_vm._m(16),_vm._m(17),_vm._m(18),_vm._m(19),_vm._m(20),_vm._m(21),_c('p',[_vm._v(\"表示已暂存，下次提交时就会一并记录到仓库。\")]),_vm._m(22),_vm._m(23),_vm._m(24),_vm._m(25),_vm._m(26),_vm._m(27),_vm._m(28),_vm._m(29),_vm._m(30),_vm._m(31),_vm._m(32),_vm._m(33),_vm._m(34),_vm._m(35),_vm._m(36),_vm._m(37),_vm._m(38),_vm._m(39),_vm._m(40),_vm._m(41),_c('p',[_vm._v(\"比如:\")]),_vm._m(42),_c('p',[_vm._v(\"第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件.\")]),_vm._m(43),_vm._m(44),_vm._m(45),_vm._m(46),_vm._m(47),_c('p',[_vm._v(\"下面有些例子:\")]),_vm._m(48),_vm._m(49),_vm._m(50),_vm._m(51),_vm._m(52),_vm._m(53),_vm._m(54),_vm._m(55),_vm._m(56),_vm._m(57),_vm._m(58),_vm._m(59),_vm._m(60),_c('p',[_vm._v(\"通过使用不同的选项参数\\b可以帮助我们找到要找的提交.\")]),_vm._m(61),_vm._m(62),_vm._m(63),_c('p',[_vm._v(\"另外一个常用的选项是 \"),_c('code',[_vm._v(\"--pretty\")]),_vm._v(\"。 这个选项可以指定使用不同于默认格式的方式展示提交历史。这个选项有一些内建的子选项供你使用。 比如用 \"),_c('code',[_vm._v(\"oneline\")]),_vm._v(\" 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有 \"),_c('code',[_vm._v(\"short\")]),_vm._v(\"，\"),_c('code',[_vm._v(\"full\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"fuller\")]),_vm._v(\" 可以用.  \"),_c('code',[_vm._v(\"format\")]),_vm._v(\" 选项可以定制要显示的记录格式。 这样的输出对后期提取分析格外有用.  具体文档参考-\"),_c('a',{attrs:{\"href\":\"https://git-scm.com/docs/pretty-formats\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"链接\"),_c('OutboundLink')],1)]),_vm._m(64),_vm._m(65),_c('p',[_vm._v(\"远程仓库是指托管在因特网或其他网络中的你的项目的版本库.  与他人协作时, 可以在这个远程仓库上根据需要 \\\"推送\\\" 或 \\\"拉取\\\" 数据。\")]),_vm._m(66),_vm._m(67),_vm._m(68),_vm._m(69),_vm._m(70),_vm._m(71),_vm._m(72),_vm._m(73),_vm._m(74),_vm._m(75),_vm._m(76),_vm._m(77),_vm._m(78),_vm._m(79),_vm._m(80),_vm._m(81),_vm._m(82),_vm._m(83),_c('p',[_vm._v(\"這個簡單的 Push 指令其實做了幾件事：\")]),_vm._m(84),_c('p',[_vm._v(\"只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。\")]),_c('p',[_vm._v(\"你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。\")]),_vm._m(85),_c('p',[_vm._v(\"upstream，中文翻譯成「上游」.  在 Git 裡，每個分支可以設定一個「上游」（但每個分支最多只能設定一個 upstream）.  它會指向並追蹤（track）某個分支。通常 upstream 會是远端 Server 上的某個分支，但其實要設定在本地端的其它分支也可以。\")]),_vm._m(86),_vm._m(87),_vm._m(88),_vm._m(89),_vm._m(90),_c('p',[_vm._v(\"其實上面這個指令跟下面這個指令是一樣的效果：\")]),_vm._m(91),_c('p',[_vm._v(\"意思是「把本地的 master 分支推上去後，在 Server 上更新 master 分支的進度，或是如果不存在該分支的話，就建立一個 master 分支」。\")]),_c('p',[_vm._v(\"但如果你想推上去之後不要叫這個名字的話，可以把後面的那個名字改掉：\")]),_vm._m(92),_c('p',[_vm._v(\"這樣當把本地端的 master 分支推上去之後，就不會在線上建立 master 分支，而是建立（或更新進度）一個叫做 cat 的分支了。\")]),_vm._m(93),_vm._m(94),_vm._m(95),_vm._m(96),_vm._m(97),_vm._m(98),_vm._m(99),_vm._m(100),_vm._m(101),_vm._m(102)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h1',{attrs:{\"id\":\"git-攻略\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#git-攻略\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Git 攻略\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('blockquote',[_c('p',[_c('strong',[_vm._v(\"摘要\")]),_vm._v(\": 本文讲解 Git 是什么, 有什么用, 如何用 Git 进行版本控制, 以及\\b\\b\\b大厂的版本管理策略.\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"git-干什么的\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#git-干什么的\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Git 干什么的?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"Git 是一个开源的分布式版本控制系统。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"git-基础\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#git-基础\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Git 基础\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"初始化仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#初始化仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 初始化仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在一个目录下使用 \"),_c('code',[_vm._v(\"git init\")]),_vm._v(\" 指令初始化這個目錄，主要目的是要讓 Git 開始對這個目錄進行版本控制。這個指令會在這個目錄裡建立了一個 \"),_c('code',[_vm._v(\".git\")]),_vm._v(\" 隐藏目录.  目录是 Git 来跟踪管理版本库的, 它将默认记录项目目录中任何文件的改动。如果把这个子目录删除了，这里面记录的文件版本就都没有了.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"记录每次更新到仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#记录每次更新到仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 记录每次更新到仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"检查当前文件状态\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#检查当前文件状态\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 检查当前文件状态\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在一个空目录下执行 \"),_c('code',[_vm._v(\"git init\")]),_vm._v(\".  之后使用命令 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 来查看这个目录的状态.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" status\\nOn branch master\\n\\nInitial commit\\n\\nnothing to commit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"create/copy files and use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add\\\"\")]),_vm._v(\" to track\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"跟踪新文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#跟踪新文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 跟踪新文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 命令，你将看到一个新的未跟踪文件：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\nUntracked files:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add <file>...\\\"\")]),_vm._v(\" to include \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"in\")]),_vm._v(\" what will be committed\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n    readme.md\\n\\nnothing added to commit but untracked files present \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add\\\"\")]),_vm._v(\" to track\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"现在用 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 跟踪 \"),_c('code',[_vm._v(\"readme.md\")]),_vm._v(\" 文件.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\n\\nNo commits yet\\n\\nChanges to be committed:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git rm --cached <file>...\\\"\")]),_vm._v(\" to unstage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tnew file:   readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"暂存已修改文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#暂存已修改文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 暂存已修改文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"现在修改一下之前被跟踪的 \"),_c('code',[_vm._v(\"readme.md\")]),_vm._v(\" 文件.  然后再执行 \"),_c('code',[_vm._v(\"git status\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\n\\nNo commits yet\\n\\nChanges to be committed:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git rm --cached <file>...\\\"\")]),_vm._v(\" to unstage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tnew file:   readme.md\\n\\nChanges not staged \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"for\")]),_vm._v(\" commit:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add <file>...\\\"\")]),_vm._v(\" to update what will be committed\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git checkout -- <file>...\\\"\")]),_vm._v(\" to discard changes \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"in\")]),_vm._v(\" working directory\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tmodified:   readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"readme.md\")]),_vm._v(\" 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 命令。这个命令将可以理解为 “\"),_c('strong',[_vm._v(\"添加内容到下一次提交中\")]),_vm._v(\"” 而不是 “将一个文件添加到项目中” 要更加合适。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"添加完后, 在执行 \"),_c('code',[_vm._v(\"git status\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\n\\nNo commits yet\\n\\nChanges to be committed:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git rm --cached <file>...\\\"\")]),_vm._v(\" to unstage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tnew file:   readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"提交更新\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#提交更新\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 提交更新\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\" 命令将已暂存的文件进行提交.  \\b这种方式会启动文本编辑器以便输入本次提交的说明。(默认会启用 shell 的环境变量 \"),_c('code',[_vm._v(\"$EDITOR\")]),_vm._v(\" 所指定的软件，一般都是 vim 或 emacs。)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"也可以在 \"),_c('code',[_vm._v(\"commit\")]),_vm._v(\" 命令后添加 \"),_c('code',[_vm._v(\"-m\")]),_vm._v(\" 选项，将提交信息与命令放在同一行\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" commit -m \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"Story 182: Fix benchmarks for speed\\\"\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"master 463dc4f\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\" Story 182: Fix benchmarks \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"for\")]),_vm._v(\" speed\\n 2 files changed, 2 insertions\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"+\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n create mode 100644 README\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"提交后它会告诉你，当前是在哪个分支（\"),_c('code',[_vm._v(\"master\")]),_vm._v(\"）提交的，本次提交的完整 SHA-1 校验和是什么（\"),_c('code',[_vm._v(\"463dc4f\")]),_vm._v(\"），以及在本次提交中，有多少文件修订过，多少行添加和删改过。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"commit\")]),_vm._v(\" 命令加上 \"),_c('code',[_vm._v(\"-a\")]),_vm._v(\" 选项，Git 就会自动把所有\"),_c('strong',[_vm._v(\"已经跟踪过\")]),_vm._v(\"的文件暂存起来一并提交，从而跳过 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 步骤\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果此次提交暂存区没有任何\\b\\b变动, 想要提交需要加上\"),_c('code',[_vm._v(\"--allow-empty\")]),_vm._v(\"参数.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" commit --allow-empty -m \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"空的\\\"\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"master 76a5b84\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\" 空的\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"状态简览\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#状态简览\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 状态简览\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"git status\")]),_vm._v(\" 命令的输出十分详细，但其用语有些繁琐。 如果你使用 \"),_c('code',[_vm._v(\"git status -s\")]),_vm._v(\" 命令或 \"),_c('code',[_vm._v(\"git status --short\")]),_vm._v(\" 命令，你将得到一种更为紧凑的格式输出。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" status -s\\n M README\\nMM Rakefile\\nA  lib/git.rb\\nM  lib/simplegit.rb\\n?? LICENSE.txt\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"新添加的未跟踪文件前面有 \"),_c('code',[_vm._v(\"??\")]),_vm._v(\" 标记，\")]),_c('li',[_vm._v(\"新添加到暂存区中的文件前面有 \"),_c('code',[_vm._v(\"A\")]),_vm._v(\" 标记，\")]),_c('li',[_vm._v(\"修改过的文件前面有 \"),_c('code',[_vm._v(\"M\")]),_vm._v(\" 标记\\n\"),_c('ul',[_c('li',[_vm._v(\"出现在右边的 \"),_c('code',[_vm._v(\"M\")]),_vm._v(\" 表示该文件被修改了但是还没放入暂存区\")]),_c('li',[_vm._v(\"出现在靠左边的 \"),_c('code',[_vm._v(\"M\")]),_vm._v(\" 表示该文件被修改了并放入了暂存区。\")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"向 \"),_c('code',[_vm._v(\"Rakefile\")]),_vm._v(\" 文件前面有两个 \"),_c('code',[_vm._v(\"MM\")]),_vm._v(\", 表示在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"移除文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#移除文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 移除文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果想\"),_c('strong',[_vm._v(\"移除某个文件的已跟踪状态\")]),_vm._v(\"（确切地说，是从暂存区域移除）.  可以使用 \"),_c('code',[_vm._v(\"git rm\")]),_vm._v(\" 命令.  此命令还会连带从工作目录中把指定的文件删除\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果只是简单地从工作目录中手工删除文件，运行 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果\"),_c('strong',[_vm._v(\"文件删除之前修改过并且已经放到暂存区域\")]),_vm._v(\"的话，则必须要用强制删除选项 \"),_c('code',[_vm._v(\"-f\")]),_vm._v(\". 这是一种安全特性，用于防止误删还没有添加到快照的数据.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"另外一种情况是，我们想\"),_c('strong',[_vm._v(\"把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中\")]),_vm._v(\"。换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一大堆文件添加到暂存区时，这一做法尤其有用。使用 \"),_c('code',[_vm._v(\"--cached\")]),_vm._v(\" 选项可以做到.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"忽略文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#忽略文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 忽略文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。我们可以创建一个名为 \"),_c('code',[_vm._v(\".gitignore\")]),_vm._v(\" 的文件，列出要忽略的文件模式。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"*.\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"oa\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n*~\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"要养成一开始就设置好 \"),_c('code',[_vm._v(\".gitignore\")]),_vm._v(\" 文件的习惯，以免将来误提交无用的文件.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\".gitignore\")]),_vm._v(\" 的格式规范如下：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"所有空行或者以 \"),_c('code',[_vm._v(\"＃\")]),_vm._v(\" 开头的行都会被 Git 忽略。\")]),_c('li',[_vm._v(\"可以使用标准的 \"),_c('code',[_vm._v(\"glob\")]),_vm._v(\" 模式匹配。\")]),_c('li',[_vm._v(\"匹配模式可以以（\"),_c('code',[_vm._v(\"/\")]),_vm._v(\"）开头防止递归。\")]),_c('li',[_vm._v(\"匹配模式可以以（\"),_c('code',[_vm._v(\"/\")]),_vm._v(\"）结尾指定目录。\")]),_c('li',[_vm._v(\"要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（\"),_c('code',[_vm._v(\"!\")]),_vm._v(\"）取反。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"glob\")]),_vm._v(\" 模式是指 shell 所使用的简化了的正则表达式:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"星号（\"),_c('code',[_vm._v(\"*\")]),_vm._v(\"）匹配零个或多个任意字符;\")]),_c('li',[_c('code',[_vm._v(\"[abc]\")]),_vm._v(\" 匹配任何一个列在方括号中的字符;\")]),_c('li',[_vm._v(\"问号（\"),_c('code',[_vm._v(\"?\")]),_vm._v(\"）只匹配一个任意字符;\")]),_c('li',[_vm._v(\"如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 \"),_c('code',[_vm._v(\"[0-9]\")]),_vm._v(\" 表示匹配所有 0 到 9 的数字）;\")]),_c('li',[_vm._v(\"使用两个星号（\"),_c('code',[_vm._v(\"*\")]),_vm._v(\") 表示匹配任意中间目录，比如\"),_c('code',[_vm._v(\"a/**/z\")]),_vm._v(\" 可以匹配 a/z, a/b/z 或 \"),_c('code',[_vm._v(\"a/b/c/z\")]),_vm._v(\"等。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# no .a files\")]),_vm._v(\"\\n*.a\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# but do track lib.a, even though you're ignoring .a files above\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"!\")]),_vm._v(\"lib.a\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# only ignore the TODO file in the current directory, not subdir/TODO\")]),_vm._v(\"\\n/TODO\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# ignore all files in the build/ directory\")]),_vm._v(\"\\nbuild/\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# ignore doc/notes.txt, but not doc/server/arch.txt\")]),_vm._v(\"\\ndoc/*.txt\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# ignore all .pdf files in the doc/ directory\")]),_vm._v(\"\\ndoc/**/*.pdf\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"文件状态-工作区域\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#文件状态-工作区域\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 文件状态 & 工作区域\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在 Git 中文件有两种状态：\"),_c('strong',[_vm._v(\"已跟踪（tracked）\")]),_vm._v(\" 和 \"),_c('strong',[_vm._v(\"未跟踪（untracked）\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"**已跟踪（tracked）**又分为：\"),_c('strong',[_vm._v(\"已提交（committed）\")]),_vm._v(\"、**已修改（modified）**和 \"),_c('strong',[_vm._v(\"已暂存（staged）\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"被 Git 管理的项目有三个工作区域：\"),_c('strong',[_vm._v(\"版本库（Repository）\")]),_vm._v(\"、\"),_c('strong',[_vm._v(\"工作区（Working Directory）\")]),_vm._v(\" 和 \"),_c('strong',[_vm._v(\"暂存区（Staging Area）\")]),_vm._v(\"。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"工作区: 就是你在电脑里能看到的目录。\")]),_c('li',[_vm._v(\"暂存区：英文叫 stage, 或 index。一般存放在\"),_c('code',[_vm._v(\".git\")]),_vm._v(\"目录下的 \"),_c('code',[_vm._v(\"index\")]),_vm._v(\" 文件（\"),_c('code',[_vm._v(\".git/index\")]),_vm._v(\"）中，所以我们把暂存区有时也叫作索引（index）。\")]),_c('li',[_vm._v(\"版本库：\"),_c('code',[_vm._v(\".git\")]),_vm._v(\" 目录不算工作区，而是 Git 的版本库。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/qmzpPGu.jpg\",\"alt\":\"1352126739_7909\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"当对工作区修改（或新增）的文件执行 \\\"\"),_c('code',[_vm._v(\"git add\")]),_vm._v(\"\\\" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"当执行提交操作（\"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\"）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"查看提交历史\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#查看提交历史\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 查看提交历史\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"\\b想回顾提交历史需要使用 \"),_c('code',[_vm._v(\"git log\")]),_vm._v(\" 命令\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"garrikliu:a xiangliu$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" log\\ncommit fb3afcd7ad8151207cec0ace9a6550c3e1589f81 \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"HEAD\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\nAuthor: Garrik-Liu \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_vm._v(\"garrikliu@Gmail.com\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"\\nDate:   Mon Feb 4 16:55:48 2019 +0800\\n\\n    deleted readme\\n\\ncommit 022abc8b56edac279d3aa28981913e378bca136b\\nAuthor: Garrik-Liu \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_vm._v(\"garrikliu@Gmail.com\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"\\nDate:   Sun Feb 3 09:56:44 2019 +0800\\n\\n    add readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"默认不用任何参数的话，\"),_c('code',[_vm._v(\"git log\")]),_vm._v(\" 会按提交时间列出所有的更新，最近的更新排在最上面。这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"一个常用的选项是 \"),_c('code',[_vm._v(\"-p\")]),_vm._v(\"，用来显示每次提交的内容差异。 你也可以加上 \"),_c('code',[_vm._v(\"-2\")]),_vm._v(\" 来仅显示最近两次提交(同理 \"),_c('code',[_vm._v(\"-3\")]),_vm._v(\" 就是最近的三次提交)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果你想看到每次提交的简略的统计信息，你可以使用 \"),_c('code',[_vm._v(\"--stat\")]),_vm._v(\" 选项.  \"),_c('code',[_vm._v(\"--stat\")]),_vm._v(\" 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"commit a11bef06a3f659402fe7563abf99ad00de2209e6\\nAuthor: Scott Chacon \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_vm._v(\"schacon@gee-mail.com\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"\\nDate:   Sat Mar 15 10:31:28 2008 -0700\\n\\n    first commit\\n\\n README           \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\"  6 ++++++\\n Rakefile         \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\" 23 +++++++++++++++++++++++\\n lib/simplegit.rb \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\" 25 +++++++++++++++++++++++++\\n 3 files changed, 54 insertions\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"+\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" log --pretty\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\"oneline\\nca82a6dff817ec66f44342007202690a93763949 changed the version number\\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"test\")]),_vm._v(\"\\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"远程仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#远程仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"查看远程仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#查看远程仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 查看远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果想查看你已经配置的远程仓库服务器，可以运行 \"),_c('code',[_vm._v(\"git remote\")]),_vm._v(\" 命令。 它会列出你指定的每一个远程服务器的简写。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果你已经克隆了自己的仓库，那么至少应该能看到 \"),_c('code',[_vm._v(\"origin\")]),_vm._v(\". 这是 Git 给你克隆的仓库服务器的默认名字\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" clone https://github.com/schacon/ticgit\\nCloning into \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'ticgit'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"..\")]),_vm._v(\".\\nremote: Reusing existing pack: 1857, done.\\nremote: Total 1857 \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"delta 0\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\", reused 0 \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"delta 0\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\nReceiving objects: 100% \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"1857/1857\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\", 374.35 KiB \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\" 268.00 KiB/s, done.\\nResolving deltas: 100% \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"772/772\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\", done.\\nChecking connectivity\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"..\")]),_vm._v(\". done.\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cd\")]),_vm._v(\" ticgit\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote\\norigin\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"指定选项 \"),_c('code',[_vm._v(\"-v\")]),_vm._v(\"，会显示需要读写远程仓库使用的 Git 保存的仓库服务器的名字, 以及其对应的 URL。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote -v\\norigin\\thttps://github.com/schacon/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"fetch\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\norigin\\thttps://github.com/schacon/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"push\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"添加远程仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#添加远程仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 添加远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"运行 \"),_c('code',[_vm._v(\"git remote add <shortname> <url>\")]),_vm._v(\" 添加一个新的远程 Git 仓库, 同时可以为仓库指定一个名字.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote\\norigin\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote add pb https://github.com/paulboone/ticgit\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote -v\\norigin\\thttps://github.com/schacon/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"fetch\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\norigin\\thttps://github.com/schacon/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"push\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\npb\\thttps://github.com/paulboone/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"fetch\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\npb\\thttps://github.com/paulboone/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"push\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果你使用 \"),_c('code',[_vm._v(\"clone\")]),_vm._v(\" 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为名称简写。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"抓取-pull-拉取-fetch\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#抓取-pull-拉取-fetch\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 抓取(pull) & 拉取(fetch)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"拉取-fetch\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#拉取-fetch\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 拉取(fetch)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"从远程仓库中获得数据，可以执行 \"),_c('code',[_vm._v(\"git fetch [remote-name]\")]),_vm._v(\".  这个命令会访问远程仓库，从中\"),_c('strong',[_vm._v(\"拉取\")]),_vm._v(\"所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"必须注意 \"),_c('code',[_vm._v(\"git fetch\")]),_vm._v(\" 命令会将数据\"),_c('strong',[_vm._v(\"拉取\")]),_vm._v(\"到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"抓取-pull\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#抓取-pull\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 抓取(pull)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('blockquote',[_c('p',[_vm._v(\"git pull = git fetch + git merge\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"推送到远程仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#推送到远程仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 推送到远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用命令 \"),_c('code',[_vm._v(\"git push [remote-name] [branch-name]\")]),_vm._v(\" 将你本地的内容推送到远端服务器.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"把 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 這個分支的內容，推向 \"),_c('code',[_vm._v(\"origin\")]),_vm._v(\" 這個位置。\")]),_c('li',[_vm._v(\"在 \"),_c('code',[_vm._v(\"origin\")]),_vm._v(\" 那個遠端 Server 上，如果 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 不存在，就建立一個叫做 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 的同名分支。\")]),_c('li',[_vm._v(\"但如果本來 Server 上就存在 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支，便會移動 Server 上 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支的位置，使它指到目前最新的進度上。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"设定-upstream-上游\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#设定-upstream-上游\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 设定 upstream (上游)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果有設定，當下次執行 \"),_c('code',[_vm._v(\"git push\")]),_vm._v(\" 指令的時候，它就會用來當預設值。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" push -u origin master\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"就會把 \"),_c('code',[_vm._v(\"origin/master\")]),_vm._v(\" 設定為本地 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支的 upstream，當下回執行 \"),_c('code',[_vm._v(\"git push\")]),_vm._v(\" 指令而不加任何參數的時候，它就會猜你是要推往 \"),_c('code',[_vm._v(\"origin\")]),_vm._v(\" 這個遠端節點，並且把 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 這個分支推上去。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"不想要同名的分支\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#不想要同名的分支\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 不想要同名的分支\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" push origin master\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" push origin master:master\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" push origin master:cat\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"查看远程仓库-2\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#查看远程仓库-2\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 查看远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果想要查看某一个远程仓库的更多信息，可以使用 \"),_c('code',[_vm._v(\"git remote show [remote-name]\")]),_vm._v(\" 命令\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote show origin\\n* remote origin\\n  Fetch URL: https://github.com/schacon/ticgit\\n  Push  URL: https://github.com/schacon/ticgit\\n  HEAD branch: master\\n  Remote branches:\\n    master                               tracked\\n    dev-branch                           tracked\\n  Local branch configured \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"for\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'git pull'\")]),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\":\")]),_vm._v(\"\\n    master merges with remote master\\n  Local ref configured \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"for\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'git push'\")]),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\":\")]),_vm._v(\"\\n    master pushes to master \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"up to date\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"它同样会列出远程仓库的 URL 与跟踪分支的信息。 这些信息非常有用，它告诉你正处于 master 分支，并且如果运行 \"),_c('code',[_vm._v(\"git pull\")]),_vm._v(\"，就会抓取所有的远程引用，然后将远程 master 分支合并到本地 master 分支。 它也会列出拉取到的所有远程引用。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"远程仓库的移除与重命名\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#远程仓库的移除与重命名\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 远程仓库的移除与重命名\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"运行 \"),_c('code',[_vm._v(\"git remote rename\")]),_vm._v(\" 去修改一个远程仓库的简写名\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"rename\")]),_vm._v(\" pb paul\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote\\norigin\\npaul\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git remote rm\")]),_vm._v(\" 移除一个远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"rm\")]),_vm._v(\" paul\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote\\norigin\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"使用分支\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#使用分支\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 使用分支\")])}]\n\nexport { render, staticRenderFns }"]}