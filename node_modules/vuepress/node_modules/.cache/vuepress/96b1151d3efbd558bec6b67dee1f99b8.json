{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/设计模式/建造者模式.md?vue&type=template&id=5b12ae87","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/设计模式/建造者模式.md","mtime":1538489270951},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"建造者模式\"><a class=\"header-anchor\" href=\"#建造者模式\" aria-hidden=\"true\">#</a> 建造者模式</h1>\n<p>建造者模式（Builder）：<strong>将一个复杂对象的构建层与其表示层相互分离，同样的构建过程可采用不同的表示</strong>。</p>\n<p>『 工厂模式 』主要是为了创建对象实例或者类簇（抽象工厂），关心的是最终产出（创建）的是什么。不关心你创建的整个过程，仅仅需要知道你最终创建的结果。所以通过工厂模式我们得到的都是对象实例或者类簇。</p>\n<p>『 建造者模式 』其目的也是为了创建对象，但是它更多关心的是创建这个对象的整个过程，甚至于创建对象的每一个细节，比如创建一个人，我们创建的结果不仅仅要得到人的实例，还要关注创建人的时候，这个人应该穿什么衣服，男的还是女的，兴趣爱好都是什么。所以说建造者模式更注重的是创建的细节.</p>\n<h2 id=\"例子\"><a class=\"header-anchor\" href=\"#例子\" aria-hidden=\"true\">#</a> 例子</h2>\n<p>🌰 有一些找工作的人，想借助咱们的网站发布自己的简历。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 创建一位人类</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Human</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 技能</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>skill <span class=\"token operator\">=</span> param <span class=\"token operator\">&amp;&amp;</span> param<span class=\"token punctuation\">.</span>skill <span class=\"token operator\">||</span> <span class=\"token string\">'保密'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 兴趣爱好</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">=</span> param <span class=\"token operator\">&amp;&amp;</span> param<span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">||</span> <span class=\"token string\">'保密'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 类人原型方法</span>\nHuman<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    getSkill <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>skill<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    getHobby <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 实例化姓名类</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Named</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 构造器</span>\n    <span class=\"token comment\">// 构造函数解析姓名的姓与名</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        that<span class=\"token punctuation\">.</span>wholeName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            that<span class=\"token punctuation\">.</span>FirstName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            that<span class=\"token punctuation\">.</span>secondName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 实例化职位类</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Work</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 构造器</span>\n    <span class=\"token comment\">// 构造函数中通过传入的职位特征来设置相应职位以及描述</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">:</span>\n                    that<span class=\"token punctuation\">.</span>work <span class=\"token operator\">=</span> <span class=\"token string\">'工程师'</span><span class=\"token punctuation\">;</span>\n                    that<span class=\"token punctuation\">.</span>workDescript <span class=\"token operator\">=</span> <span class=\"token string\">'每天沉醉于编程'</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'UI'</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'UE'</span><span class=\"token punctuation\">:</span>\n                    that<span class=\"token punctuation\">.</span>work <span class=\"token operator\">=</span> <span class=\"token string\">'设计师'</span><span class=\"token punctuation\">;</span>\n                    that<span class=\"token punctuation\">.</span>workDescript <span class=\"token operator\">=</span> <span class=\"token string\">'设计更似一种艺术'</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token string\">'teach'</span><span class=\"token punctuation\">:</span>\n                    that<span class=\"token punctuation\">.</span>work <span class=\"token operator\">=</span> <span class=\"token string\">'教师'</span><span class=\"token punctuation\">;</span>\n                    that<span class=\"token punctuation\">.</span>workDescript <span class=\"token operator\">=</span> <span class=\"token string\">'分享也是一种快乐'</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span> <span class=\"token punctuation\">:</span>\n                    that<span class=\"token punctuation\">.</span>work <span class=\"token operator\">=</span> work<span class=\"token punctuation\">;</span>\n                    that<span class=\"token punctuation\">.</span>workDescript <span class=\"token operator\">=</span> <span class=\"token string\">'对不起，我们还不清楚您所选择职位的相关描述'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 更换期望的职位</span>\nWork<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">changeWork</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>work <span class=\"token operator\">=</span> work<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 添加对职位的描述</span>\nWork<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">changeDescript</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>setence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>workDescript <span class=\"token operator\">=</span> setence<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这样我们就创建了抽象出来的3个类——应聘者类、姓名解析类与期望职位类。我们最终的目的是要创建一位应聘者，所以需要上面抽象的3个类。这样我们写一个建造者类，在建造者类中我们要通过对这 3 个类<strong>组合调用</strong>，就可以创建出一个完整的应聘者对象</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">/****\n    * 应聘者建造者\n    * 参数 name : 姓名（全名）\n    * 参数 work : 期望职位\n    **/</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 创建应聘者缓存对象</span>\n    <span class=\"token keyword\">var</span> _person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 创建应聘者姓名解析对象</span>\n    _person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Named</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 创建应聘者期望职位</span>\n    _person<span class=\"token punctuation\">.</span>work <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Work</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将创建的应聘者对象返回</span>\n    <span class=\"token keyword\">return</span> _person<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在应聘者建造者中我们分成三个部分来创建一位应聘者对象，首先创建一位应聘者缓存对象，缓存对象需要修饰（添加属性和方法），然后我们向缓存对象添加姓名，添加一个期望职位，最终我们就可得到一位完整的应聘者了</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xiao ming'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>skill<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 保密 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>FirstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// xiao</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>work<span class=\"token punctuation\">.</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 工程师 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>work<span class=\"token punctuation\">.</span>workDescript<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 每一天在编程中度过</span>\nperson<span class=\"token punctuation\">.</span>work<span class=\"token punctuation\">.</span><span class=\"token function\">changeDescript</span><span class=\"token punctuation\">(</span><span class=\"token string\">'更改一下职位描述！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>work<span class=\"token punctuation\">.</span>workDescript<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 更改一下职位描述！</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\n<p>与『 工厂模式 』相比, 以前工厂模式创建出来的是一个对象，它追求的是创建的结果，『 建造者模式 』不仅仅可得到创建的结果，然而也参与了创建的具体过程，对于创建的具体实现的细节也参与了干涉，可以说创建的对象更复杂，或者说 <strong>这种模式创建的对象是一个复合对象</strong>。</p>\n<p>当然这种方式对于整体对象类的拆分无形中增加了结构的复杂性，因此如果对象粒度很小，或者模块间的复用率很低并且变动不大，我们最好还是要创建整体对象。</p>\n</div>\n",null]}