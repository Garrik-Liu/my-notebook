{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/后端开发/NodeJs/基础知识/基础概念.md?vue&type=template&id=821021dc","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/后端开发/NodeJs/基础知识/基础概念.md","mtime":1532111593324},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h1',{attrs:{\"id\":\"基础概念\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#基础概念\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 基础概念\")]),_c('p',[_vm._v(\"Node.js 是一个使用\"),_c('strong',[_vm._v(\"单线程, 事件驱动、非阻塞式 (异步式) I/O\")]),_vm._v(\" 的模型, 基于 \"),_c('strong',[_vm._v(\"Chrome V8 引擎\")]),_vm._v(\"的 \"),_c('strong',[_vm._v(\"JavaScript 运行环境\")]),_vm._v(\"。\\b允许 J\\bs 可以\\b脱离浏览器去执行.\")]),_c('blockquote',[_c('p',[_vm._v(\"要实现在后台运行 JavaScript 代码，代码需要先被解释然后正确的执行。Node.js 的原理正是如此，它使用了 Google 的 V8 虚拟机（ Google 的 Chrome 浏览器使用的 JavaScript 执行环境，来解释和执行 JavaScript 代码。\")])]),_c('h2',{attrs:{\"id\":\"单线程-非阻塞-i-o-和-事件驱动\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#单线程-非阻塞-i-o-和-事件驱动\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 单线程, 非阻塞 I/O 和 事件驱动\")]),_c('p',[_vm._v(\"Node.js 最大的特点就是应用 非阻塞 I/O 与 事件驱动的编程模式。\")]),_c('h3',{attrs:{\"id\":\"什么是阻塞\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#什么是阻塞\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 什么是阻塞?\")]),_c('p',[_vm._v(\"在说非阻塞\\b之前, 先了解什么是阻塞.\\n线程在执行中如果遇到磁盘读写或网络通信(统称为 I/O 操作)， 通常要耗费较长的时间.  这时候操作系统会剥夺这个线程的 CPU 控制权，使其暂停执行，同时将资源让给其他的工作线程，这种线程调度方式称为阻塞。\\n当 I/O 操作完毕时，操作系统 将这个线程的阻塞状态解除，恢复其对CPU的控制权，令其继续执行。这种 I/O 模式就是通常的 \"),_c('strong',[_vm._v(\"阻塞式 I/O\")])]),_c('p',[_vm._v(\"相应地，异步式 I/O 则针对 所有 I/O 操作不采用阻塞的策略。当线程遇到 I/O 操作时，不会以阻塞的方式等待 I/O 操作 的完成或数据的返回. 而只是将 I/O 请求发送给操作系统，继续执行下一条语句。\\n当操作 系统完成 I/O 操作时，以事件的形式通知执行 I/O 操作的线程，线程会在特定时候处理这个 事件。为了处理异步 I/O，线程必须有事件循环，不断地检查有没有未处理的事件，依次予以处理。这种 I/O 模式就是通常的 \"),_c('strong',[_vm._v(\"非阻塞式 I/O\")])]),_c('h3',{attrs:{\"id\":\"非阻塞好处\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#非阻塞好处\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 非阻塞好处\")]),_c('p',[_vm._v(\"因为采用了非阻塞, 个线程永远在执行计算操作，这个线程所使用的 CPU 核心利用率几近是 100%，可以提高服务器的利用率, 提高系统吞吐量.\")]),_c('p',[_vm._v(\"假设我们有一项工作，可以分为两个计算部分和一个 I/O 部分，I/O 部分占的时间比计算多得多。如果我们使用阻塞 I/O，那么要想获得高并发就必须开启多个线程。而使用异步式 I/O 时，单线程即可胜任。\")]),_c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/SW5NWqi.png\",\"alt\":\"Screen Shot 2018-07-12 at 4.37.15 PM\"}})]),_c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/FAfPumU.png\",\"alt\":\"Screen Shot 2018-07-12 at 4.37.22 PM\"}})]),_c('p',[_vm._v(\"总而言之, 使用单线程事件驱动的异步式 I/O 可以\\b避免服务器对于多线程的开销, 提高对服务器CPU性能的利用效率. 不好的\\b地方, 可以就在于理解起来不直观\\b吧.\")]),_c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/PofEKRT.png\",\"alt\":\"Screen Shot 2018-07-12 at 4.41.05 PM\"}})]),_c('h2',{attrs:{\"id\":\"回调函数\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#回调函数\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 回调函数\")]),_c('p',[_vm._v(\"在 Node.js 中，异步式 I/O 是通过回调函数来实现的。\")]),_c('p',[_vm._v(\"先看看代码的不同:\")]),_c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 同步式读取文件\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" fs \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"require\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'fs'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" data \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" fs\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"readFileSync\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'file.txt'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'utf-8'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\nconsole\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"data\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])])]),_c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 异步式读取文件\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" fs \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"require\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'fs'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\nfs\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"readFile\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'file.txt'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'utf-8'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"err\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" data\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"if\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"err\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n        console\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"err\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"else\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n        console\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"data\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])]),_c('p',[_vm._v(\"同步式读取代码将文件名作为参数传入 \"),_c('code',[_vm._v(\"fs.readFileSync\")]),_vm._v(\" 函 数，阻塞等待读取完成后，将文件的内容作为函数的返回值赋给 data 变量\")]),_c('p',[_vm._v(\"异步式读取文件是通过回调函数来实现的. fs.readFile 接收了三个参数， 第一个是文件名，第二个是编码方式，第三个是一个函数，我们称这个函数为回调函数。\\n\"),_c('code',[_vm._v(\"fs.readFile\")]),_vm._v(\" 调用时所做的工作只是将异步式 I/O 请求发送给了操作系统，然后立即 返回并执行后面的语句，执行完以后进入事件循环监听事件。当 fs 接收到 I/O 请求完成的事件时，事件循环会主动调用回调函数以完成后续工作。\")]),_c('h2',{attrs:{\"id\":\"事件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#事件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 事件\")]),_c('p',[_vm._v(\"Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。事件由 \"),_c('code',[_vm._v(\"EventEmitter\")]),_vm._v(\" 对象提供。\")]),_c('p',[_vm._v(\"EventEmitter 使用例子:\")]),_c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 引入 events 模块\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" events \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"require\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'events'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 创建 eventEmitter 对象\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" event \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"new\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token class-name\"}},[_vm._v(\"events\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"EventEmitter\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 注册事件 \\bsome_event\")]),_vm._v(\"\\nevent\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"on\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'some_event'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\" \\n    console\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'some_event occured.'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"setTimeout\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"function\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\" \\n    \"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 触发事件 some_event\")]),_vm._v(\"\\n    event\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"emit\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'some_event'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"1000\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])])]),_c('p',[_vm._v(\"代码运行一秒后, 控制台输出 'some_event occured'.\")]),_c('p',[_vm._v(\"运行机制是 \"),_c('code',[_vm._v(\"event\")]),_vm._v(\" 对象 注册了事件 \"),_c('code',[_vm._v(\"some_event\")]),_vm._v(\" 的一个监听器, 通过 setTimeout 在1000毫秒以后向 \"),_c('code',[_vm._v(\"event\")]),_vm._v(\" 对象发送事件 \"),_c('code',[_vm._v(\"some_event\")]),_vm._v(\"，此时会调用绑定在 \"),_c('code',[_vm._v(\"some_event\")]),_vm._v(\"监听器上的事件处理函数。\")]),_c('h2',{attrs:{\"id\":\"事件循环机制\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#事件循环机制\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 事件循环机制\")]),_c('p',[_vm._v(\"Node.js 在什么时候会进入事件循环呢? 答案是 Node.js 始终在事件循环中.\")]),_c('p',[_vm._v(\"Node.js 程序由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数. 程序入口就是事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出 I/O 请求或 直接发射(emit)事件，执行完毕后再返回事件循环，事件循环会检查事件队列中有没有未处理的事件，直到程序结束。\")]),_c('p',[_vm._v(\"Node.js的事件循环对开发者是不可见, 所有的一切均被 EventEmitter 封装\")]),_c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/6rc1C5Y.png\",\"alt\":\"Screen Shot 2018-07-12 at 5.07.35 PM\"}})])])}]\n\nexport { render, staticRenderFns }"]}