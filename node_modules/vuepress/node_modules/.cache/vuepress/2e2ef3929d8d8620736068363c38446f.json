{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/深入探讨/作用域.md?vue&type=template&id=63ae3a58","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/深入探讨/作用域.md","mtime":1545770877484},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"作用域\"><a class=\"header-anchor\" href=\"#作用域\" aria-hidden=\"true\">#</a> 作用域</h1>\n<h2 id=\"什么是作用域\"><a class=\"header-anchor\" href=\"#什么是作用域\" aria-hidden=\"true\">#</a> 什么是作用域</h2>\n<p>简单来说, 『 作用域 』就是一套用来储存变量, 操纵变量的<strong>规则</strong>.</p>\n<h3 id=\"传统编译原理\"><a class=\"header-anchor\" href=\"#传统编译原理\" aria-hidden=\"true\">#</a> 传统编译原理</h3>\n<p>尽管我们通常将 JavaScript 归类为“动态”或“解释执行”语言，但事实上它是一门编译语言。但与传统的编译语言不同，它不是提前编译的，JavaScript 的编译过程不是发生在构建之前的。简单地说，任何 JavaScript 代码片段在执行前都要进行编译（通常 就在 执行前）。</p>\n<p>在<strong>传统编译语言</strong>的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为“编译”。</p>\n<ul>\n<li>\n<p><strong>分词/词法分析</strong>（Tokenizing/Lexing）\n将由字符组成的 字符串 分解成（对编程语言来说）有意义的 代码块，这些 代码块 被称为 『 词法单元（token） 』。例如，<code>var a = 2;</code> 这段程序通常会被分解成为下面这些词法单元： <code>var</code>, <code>a</code>, <code>=</code>, <code>2</code>, <code>;</code>.</p>\n</li>\n<li>\n<p><strong>解析/语法分析</strong>（Parsing）\n将 『 词法单元流（数组） 』转换成一个由元素逐级嵌套所组成的代表了程序语法\n结构的树, 被称为 『 抽象语法树 』（Abstract Syntax Tree，AST）。<code>var a = 2;</code> 的抽象语法树中可能会有一个叫作 <code>VariableDeclaration</code> 的顶级节点，接下来是一个叫作 <code>Identifier</code> （它的值是 <code>a</code> ）的子节点，以及一个叫作 <code>AssignmentExpression</code> 的子节点。 <code>AssignmentExpression</code> 节点有一个叫作 <code>NumericLiteral</code> （它的值是 <code>2</code> ）的子节点。</p>\n</li>\n<li>\n<p><strong>代码生成</strong>\n将 抽象语法树 (AST) 转换为 可执行代码的过程 称被称为代码生成。这个过程与语言、目标平台等相关。简单来说就是有某种方法可以将 <code>var a = 2;</code> 的 抽象语法树 (AST) 转化为一组『 机器指令 』，用来创建一个叫作 <code>a</code> 的变量（包括分配内存等），并将一个值储存在 <code>a</code> 中。</p>\n</li>\n</ul>\n<h3 id=\"初步理解作用域\"><a class=\"header-anchor\" href=\"#初步理解作用域\" aria-hidden=\"true\">#</a> 初步理解作用域</h3>\n<p>下面用拟人对话的形式, 模拟 <code>var a = 2;</code> 这段代码的处理过程.</p>\n<p>参与到的角色有:</p>\n<ul>\n<li>\n<p>引擎\n从头到尾负责整个 JavaScript 程序的编译及执行过程。</p>\n</li>\n<li>\n<p>编译器\n引擎的好朋友之一，负责语法分析及代码生成等</p>\n</li>\n<li>\n<p>作用域\n引擎的另一位好朋友， 负责收集并维护所有声明的标识符（变量），并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</p>\n</li>\n</ul>\n<p>编译器首先会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。当编译器开始进行代码生成时，它会进行如下处理:</p>\n<ul>\n<li>\n<p>遇到 <code>var a</code> ，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中。如果是，编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为 <code>a</code></p>\n</li>\n<li>\n<p>接下来编译器会为引擎生成运行时所需的代码，这些代码被用来处理 <code>a = 2</code> 这个赋值操作。 引擎运行时会首先询问作用域， 在当前的作用域集合中是否存在一个叫作 <code>a</code> 的变量。 如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量.如果引擎最终找到了 <code>a</code> 变量， 就会将 <code>2</code> 赋值给它。 否则引擎就会抛出异常.</p>\n</li>\n</ul>\n<h3 id=\"作用域嵌套\"><a class=\"header-anchor\" href=\"#作用域嵌套\" aria-hidden=\"true\">#</a> 作用域嵌套</h3>\n<p>实际情况中，通常需要同时顾及几个作用域。当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的作用域（也就是全局作用域）为止。</p>\n<h2 id=\"词法作用域\"><a class=\"header-anchor\" href=\"#词法作用域\" aria-hidden=\"true\">#</a> 词法作用域</h2>\n<p>在第1章中，我们将“作用域”定义为一套规则，这套规则用来管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。</p>\n<p>作用域共有两种主要的工作模型。第一种是最为普遍的，被大多数编程语言所采用的 <strong>词法作用域</strong>，另外一种叫作 <strong>动态作用域</strong></p>\n<h3 id=\"词法阶段\"><a class=\"header-anchor\" href=\"#词法阶段\" aria-hidden=\"true\">#</a> 词法阶段</h3>\n<p>大部分标准语言编译器的第一个工作阶段叫作<strong>词法化</strong>（单词化）</p>\n<p>简单地说，<strong>词法作用域就是定义在词法阶段的作用域</strong>。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2, 4, 12</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在这个例子中有三个逐级嵌套的作用域。</p>\n<p>作用域的结构和互相之间的位置关系给引擎提供了足够的位置信息，引擎用这些信息来查找标识符的位置。</p>\n<p>作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。<strong>作用域查找会在找到第一个匹配的标识符时停止。</strong></p>\n<p>引擎执行<code>console.log(..)</code>声明，并查找<code>a</code>、<code>b</code> 和 <code>c</code> 三个变量的引用。它首先从最内部的作用域，也就是<code>bar(..)</code>函数的作用域气泡开始查找。引擎无法在这里找到<code>a</code>，因此会去上一级到所嵌套的<code>foo(..)</code>的作用域中继续查找。在这里找到了<code>a</code>，因此引擎使用了这个引用。对<code>b</code>来讲也是一样的。而对<code>c</code>来说，引擎在<code>bar(..)</code>中就找到了它。</p>\n<h3 id=\"欺骗词法\"><a class=\"header-anchor\" href=\"#欺骗词法\" aria-hidden=\"true\">#</a> 欺骗词法</h3>\n<p>无论函数在哪里被调用，也无论它如何被调用，<strong>函数的词法作用域都只由函数被声明时所处的位置决定</strong>。</p>\n<p>如果词法作用域完全由写代码期间函数所声明的位置来定义，怎样才能在运行时来“修改”（也可以说欺骗）词法作用域呢？</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">WARNING</p>\n<p>欺骗词法作用域会导致性能下降。</p>\n</div>\n<p>JavaScript 中有两种机制来实现这个目的:</p>\n<ul>\n<li><code>eval</code></li>\n<li><code>with</code></li>\n</ul>\n<h4 id=\"eval\"><a class=\"header-anchor\" href=\"#eval\" aria-hidden=\"true\">#</a> <code>eval</code></h4>\n<p><code>eval(..)</code> 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码, 换句话说，可以在你写的代码中用程序生成代码并运行，就好像（词法期）代码就在那。</p>\n<p>在执行· 之后的代码时，引擎并不“在意”前面的代码是以动态形式插入进来，并对词法作用域的环境进行修改的。引擎只会如往常地进行词法作用域查找。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 欺骗！</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"var b = 3;\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>var b = 3;</code> 声明了一个新的变量 <code>b</code>。 因此它对已经存在的<code>foo(..)</code> 的词法作用域进行了修改。也就是这段代码实际上在<code>foo(..)</code>内部创建了一个变量<code>b</code>，并遮蔽了外部（全局）作用域中的同名变量。</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">WARNING</p>\n<p>在严格模式的程序中，<code>eval(..)</code> 在运行时有其自己的词法作用域，意味着其中的声明无法修改所在的作用域。</p>\n</div>\n<h4 id=\"with\"><a class=\"header-anchor\" href=\"#with\" aria-hidden=\"true\">#</a> <code>with</code></h4>\n<p><code>with</code> 通常被当作重复引用同一个对象中的多个属性的快捷方式</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 单调乏味的重复\"obj\"</span>\nobj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 简单的快捷方式</span>\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>再看另外一个例子：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> o1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> o1<span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> o2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> o2<span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2, a 被泄漏到全局作用域上了！</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这个例子中创建了 <code>o1</code> 和 <code>o2</code> 两个对象。其中一个具有<code>a</code>属性，另外一个没有。<code>foo(..)</code> 函数接受一个 <code>obj</code> 参数，该参数是一个对象引用，并对这个对象引用执行了<code>with(obj) {..}</code>。</p>\n<p>在 <code>with</code> 块内部，我们写的代码看起来只是对变量 <code>a</code> 进行简单的词法引用，实际上就是一个\nLHS 引用，并将2 赋值给它。</p>\n<p>当我们将 <code>o1</code> 传递进去，<code>a ＝ 2</code> 赋值操作找到了<code>o1.a</code> 并将<code>2</code> 赋值给它.  而当 <code>o2</code> 传递进去，<code>o2</code> 并没有<code>a</code> 属性，因此不会创建这个属性，<code>o2.a</code> 保持 <code>undefined</code>。但是可以注意到一个奇怪的副作用，实际上<code>a = 2</code> 赋值操作创建了一个全局的变量<code>a</code>。</p>\n<p><code>with</code> 可以<strong>将一个没有或有多个属性的对象处理为一个 完全隔离 的词法作用域</strong>，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。</p>\n<p>也就是， <code>o2</code> 的作用域、<code>foo(..)</code> 的作用域和全局作用域中都没有找到标识符<code>a</code>，因此当<code>a＝2</code> 执行\n时，自动创建了一个全局变量（因为是非严格模式）。</p>\n<h4 id=\"性能问题\"><a class=\"header-anchor\" href=\"#性能问题\" aria-hidden=\"true\">#</a> 性能问题</h4>\n<p><code>eval(..)</code> 和 <code>with</code> 会在运行时修改或创建新的作用域，以此来欺骗其他在书写时定义的词\n法作用域。</p>\n<p>但那又怎样呢？如果它们能实现更复杂的功能，并且代码更具有扩展性，难道不是非常好的功能吗？<strong>答案是否定的</strong>。</p>\n<p>JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行过程中快速找到标识符。</p>\n<p>但如果引擎在代码中发现了<code>eval(..)</code> 或<code>with</code>，它只能简单地假设关于标识符位置的判断都是无效的，因为无法在词法分析阶段明确知道<code>eval(..)</code> 会接收到什么代码，这些代码会如何对作用域进行修改，也无法知道传递给<code>with</code> 用来创建新词法作用域的对象的内容到底是什么。可能所有的优化可能都是无意义的，因此最简\n单的做法就是完全不做任何优化。<strong>如果没有这些优化，代码会运行得更慢</strong></p>\n<p>另外一个不推荐使用 <code>eval(..)</code> 和 <code>with</code> 的原因是会被 <strong>严格模式</strong> 所限制。</p>\n<h2 id=\"函数作用域-块作用域\"><a class=\"header-anchor\" href=\"#函数作用域-块作用域\" aria-hidden=\"true\">#</a> 函数作用域 &amp; 块作用域</h2>\n<p>很多人认为 JavaScript 具有基于函数的作用域，意味着每声明一个函数都会为其自身创建一个作用域，而其他结构都不会创建作用域。但事实上这并不完全正确.</p>\n<p>函数作用域的含义是指，<strong>属于这个函数的全部变量都可以在整个函数的范围内使用及复用</strong></p>\n<p>对函数的传统认知就是先声明一个函数，然后再向里面添加代码。但反过来想也可以带来 一些启示：从所写的代码中挑选出一个任意的片段，然后用函数声明对它进行包装，实际 上就是把这些代码“隐藏”起来了。实际的结果就是<strong>在这个代码片段的周围创建了一个作用域</strong>, 也就是说这段代码中的任 何声明（变量或函数）都将绑定在这个新创建的包装函数的作用域中.</p>\n<h3 id=\"为什么要-隐藏\"><a class=\"header-anchor\" href=\"#为什么要-隐藏\" aria-hidden=\"true\">#</a> 为什么要 &quot;隐藏&quot;?</h3>\n<h4 id=\"最小暴露原则\"><a class=\"header-anchor\" href=\"#最小暴露原则\" aria-hidden=\"true\">#</a> 最小暴露原则</h4>\n<p>有很多原因促成了这种基于作用域的隐藏方法。 它们大都是从 &quot;最小特权原则&quot; 中引申出来 的，也叫 &quot;最小授权&quot; 或 &quot;最小暴露原则&quot;。</p>\n<p>这个原则是指在软件设计中，应该<strong>最小限度地暴露必要内容</strong>，而将其他内容都“隐藏”起来.</p>\n<p>如果所有的变量和函数\b都在全局作用域中可以访问, 这可能会暴漏过多的变量或函数，而这些变量或函数本应该是私有的.  正确的代码应该是可以阻止对这些变量或函数进行访问的。</p>\n<h4 id=\"避免冲突\"><a class=\"header-anchor\" href=\"#避免冲突\" aria-hidden=\"true\">#</a> 避免冲突</h4>\n<p>“隐藏”作用域中的变量和函数所带来的另一个好处，是可以避免同名标识符之间的冲突.</p>\n<p>变量冲突的一个典型例子存在于全局作用域中。当程序中加载了多个第三方库时，如果它 们没有妥善地将内部私有的函数或变量隐藏起来，就会很容易引发冲突。</p>\n<h3 id=\"函数作用域\"><a class=\"header-anchor\" href=\"#函数作用域\" aria-hidden=\"true\">#</a> 函数作用域</h3>\n<p>我们已经知道， 在任意代码片段外部添加包装函数， 可以将内部的变量和函数定义“隐 藏”起来，外部作用域无法访问包装函数内部的任何内容。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span> \n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面这段代码中, 声明一个具名函数 <code>foo()</code> ，意味着 <code>foo</code> 这个名称本身“<strong>污染</strong>”了所在作用域（在这个 例子中是全局作用域）。其次，必须显式地通过函数名调用这个函数才能运行其中的代码。</p>\n<p>如果函数不需要函数名（或者至少函数名可以不污染所在作用域），并且能够自动运行， 这将会更加理想。</p>\n<p>JavaScript 提供了能够同时解决这两个问题的方案:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面代码中, 函数会被<strong>当作函数表达式</strong>而不是一个标准的函数声明来处理。</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">WARNING</p>\n<p>区分函数声明和表达式最简单的方法是看 <code>function</code> 关键字出现在声明中的位置.  如果 <code>function</code> 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</p>\n</div>\n</div>\n",null]}