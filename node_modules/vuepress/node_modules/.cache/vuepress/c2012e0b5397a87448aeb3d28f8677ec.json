{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/ES6/Symbol.md?vue&type=template&id=a0b1cce8","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/ES6/Symbol.md","mtime":1538719147009},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"symbol\\\"><a href=\\\"#symbol\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Symbol</h1>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文档 - MDN\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<h2 id=\\\"概述\\\"><a href=\\\"#概述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 概述</h2><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如我想给一个别人写的对象添加新属性.  如果每个属性的名字都是独一无二的, 那么就不会有这种问题了.  Symbol 数据类型就解决了这个问题</p><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型</p><p>Symbol 值通过 <code>Symbol</code> 函数生成。函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述, 主要是为了在控制台显示，或者转为字符串时，比较容易区分。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> s <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">typeof</span> s\\n<span class=\\\"token comment\\\">// &quot;symbol&quot;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> s1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> s2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ns1 <span class=\\\"token comment\\\">// Symbol(foo)</span>\\ns2 <span class=\\\"token comment\\\">// Symbol(bar)</span>\\n\\ns1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// &quot;Symbol(foo)&quot;</span>\\ns2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// &quot;Symbol(bar)&quot;</span>\\n</code></pre></div><div class=\\\"warning custom-block\\\"><p class=\\\"custom-block-title\\\">注意</p><p>注意，Symbol 函数前不能使用 <code>new</code> 命令，否则会报错。这是因为生成的 Symbol 是一个基本类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。</p></div><p>如果 Symbol 的参数是一个对象，就会调用该对象的 <code>toString</code> 方法，将其转为字符串，然后才生成一个 Symbol 值。</p><p>注意，<code>Symbol</code> 函数的参数只是表示对当前 Symbol 值的描述，因此即使相同参数的 <code>Symbol</code> 函数的返回值是不相等的。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 没有参数的情况</span>\\n<span class=\\\"token keyword\\\">let</span> s1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> s2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ns1 <span class=\\\"token operator\\\">===</span> s2 <span class=\\\"token comment\\\">// false</span>\\n\\n<span class=\\\"token comment\\\">// 有参数的情况</span>\\n<span class=\\\"token keyword\\\">let</span> s1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> s2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ns1 <span class=\\\"token operator\\\">===</span> s2 <span class=\\\"token comment\\\">// false</span>\\n</code></pre></div><p>┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅</p><p>Symbol 值不能与其他类型的值进行运算，会报错。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> sym <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'My symbol'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token string\\\">&quot;your symbol is &quot;</span> <span class=\\\"token operator\\\">+</span> sym\\n<span class=\\\"token comment\\\">// TypeError: can't convert symbol to string</span>\\n<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`your symbol is </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>sym<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span>\\n<span class=\\\"token comment\\\">// TypeError: can't convert symbol to string</span>\\n</code></pre></div><p>但是，Symbol 值可以显式转为字符串。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> sym <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'My symbol'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">String</span><span class=\\\"token punctuation\\\">(</span>sym<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 'Symbol(My symbol)'</span>\\nsym<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 'Symbol(My symbol)'</span>\\n</code></pre></div><p>另外，Symbol 值也可以转为布尔值，但是不能转为数值。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> sym <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">Boolean</span><span class=\\\"token punctuation\\\">(</span>sym<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token operator\\\">!</span>sym  <span class=\\\"token comment\\\">// false</span>\\n</code></pre></div><h2 id=\\\"作为属性名的-symbol\\\"><a href=\\\"#作为属性名的-symbol\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 作为属性名的 Symbol</h2><p>使用 Symbol 作为对象的属性名可以防止命名冲突.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> mySymbol <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 第一种写法</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">[</span>mySymbol<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Hello!'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 第二种写法</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span>mySymbol<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Hello!'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 第三种写法</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> mySymbol<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Hello!'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 以上写法都得到同样结果</span>\\na<span class=\\\"token punctuation\\\">[</span>mySymbol<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// &quot;Hello!&quot;</span>\\n</code></pre></div><div class=\\\"warning custom-block\\\"><p class=\\\"custom-block-title\\\">注意</p><p>注意，Symbol 值作为对象属性名时，不能用点运算符</p></div><h2 id=\\\"属性名的遍历\\\"><a href=\\\"#属性名的遍历\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性名的遍历</h2><p>Symbol 作为属性名，该属性不会出现在 <code>for...in</code> 、<code>for...of</code> 循环中，也不会被 <code>Object.keys()</code>、 <code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。但是，它也<strong>不是私有属性</strong>.</p><p><code>Object.getOwnPropertySymbols</code> 方法，可以获取指定对象的所有 Symbol 属性名。返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nobj<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Hello'</span><span class=\\\"token punctuation\\\">;</span>\\nobj<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'World'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> objectSymbols <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOwnPropertySymbols</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nobjectSymbols\\n<span class=\\\"token comment\\\">// [Symbol(a), Symbol(b)]</span>\\n</code></pre></div><p>┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅</p><p><code>Reflect.ownKeys</code> 方法可以返回所有类型的键名，包括常规键名和 Symbol 键名</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'my_key'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">enum</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  nonEnum<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReflect<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ownKeys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">//  [&quot;enum&quot;, &quot;nonEnum&quot;, Symbol(my_key)]</span>\\n</code></pre></div><h2 id=\\\"symbol-for-，symbol-keyfor\\\"><a href=\\\"#symbol-for-，symbol-keyfor\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Symbol.for()，Symbol.keyFor()</h2><p>有时，我们希望重新使用<strong>同一个 Symbol 值</strong></p><p><code>Symbol.for</code> 方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> s1 <span class=\\\"token operator\\\">=</span> Symbol<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> s2 <span class=\\\"token operator\\\">=</span> Symbol<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ns1 <span class=\\\"token operator\\\">===</span> s2 <span class=\\\"token comment\\\">// true</span>\\n</code></pre></div><p><code>Symbol.for()</code> 与 <code>Symbol()</code> 这两种写法，都会生成新的 Symbol。它们的区别是，<strong>前者会被登记在全局环境中供搜索，后者不会</strong>。</p><p><code>Symbol.keyFor</code> 方法返回一个已登记的 Symbol 类型值的 <code>key</code>。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> s1 <span class=\\\"token operator\\\">=</span> Symbol<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;foo&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSymbol<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keyFor</span><span class=\\\"token punctuation\\\">(</span>s1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// &quot;foo&quot;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> s2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;foo&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSymbol<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keyFor</span><span class=\\\"token punctuation\\\">(</span>s2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// undefined</span>\\n</code></pre></div><p>上面代码中，变量 <code>s2</code> 属于未登记的 Symbol 值，所以返回 <code>undefined</code>。</p><h2 id=\\\"内置的-symbol-值\\\"><a href=\\\"#内置的-symbol-值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 内置的 Symbol 值</h2><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。</p>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://es6.ruanyifeng.com/#docs/symbol#%E5%86%85%E7%BD%AE%E7%9A%84-Symbol-%E5%80%BC\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"参考链接\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<h2 id=\\\"使用案例\\\"><a href=\\\"#使用案例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用案例</h2><h4 id=\\\"消除魔术字符串\\\"><a href=\\\"#消除魔术字符串\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 消除魔术字符串</h4><p>魔术字符串指的是，在代码之中多次出现、与代码形成<strong>强耦合</strong>的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getArea</span><span class=\\\"token punctuation\\\">(</span>shape<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> area <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span>shape<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'Triangle'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token comment\\\">// 魔术字符串</span>\\n      area <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">.5</span> <span class=\\\"token operator\\\">*</span> options<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">*</span> options<span class=\\\"token punctuation\\\">.</span>height<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">/* ... more code ... */</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> area<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">getArea</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Triangle'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> width<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> height<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 魔术字符串</span>\\n</code></pre></div><p>上面代码中，字符串 <code>Triangle</code> 就是一个魔术字符串。它多次出现，与代码形成“强耦合”，不利于将来的修改和维护。</p><p>常用的消除魔术字符串的方法，就是把它写成一个变量。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> shapeType <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  triangle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Triangle'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getArea</span><span class=\\\"token punctuation\\\">(</span>shape<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> area <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span>shape<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">case</span> shapeType<span class=\\\"token punctuation\\\">.</span>triangle<span class=\\\"token punctuation\\\">:</span>\\n      area <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">.5</span> <span class=\\\"token operator\\\">*</span> options<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">*</span> options<span class=\\\"token punctuation\\\">.</span>height<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> area<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">getArea</span><span class=\\\"token punctuation\\\">(</span>shapeType<span class=\\\"token punctuation\\\">.</span>triangle<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> width<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> height<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>上面代码中，我们把 <code>Triangle</code> 写成 <code>shapeType</code> 对象的 <code>triangle</code> 属性，这样就消除了强耦合。</p><p>如果仔细分析，可以发现 <code>shapeType.triangle</code> 等于哪个值并不重要，只要确保不会跟其他 <code>shapeType</code> 属性的值冲突即可。因此，这里就很适合改用 Symbol 值。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> shapeType <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  triangle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"模块的单例模式\\\"><a href=\\\"#模块的单例模式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 模块的单例模式</h4><p>单例模式指的是调用一个类，任何时候返回的都是同一个实例。</p><p>对于 Node 来说，模块文件可以看成是一个类。怎么保证每次执行这个模块文件，返回的都是同一个实例呢？</p><p>很容易想到，可以把实例放到顶层对象 <code>global</code>。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// mod.js</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 如果顶层对象中没有目标属性, 那么就初始化一个</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>global<span class=\\\"token punctuation\\\">.</span>_foo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  global<span class=\\\"token punctuation\\\">.</span>_foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">A</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> global<span class=\\\"token punctuation\\\">.</span>_foo<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>但是，这里有一个问题，全局变量 <code>global._foo</code> 是可写的，任何文件都可以修改。</p><p>为了防止这种情况出现，我们就可以使用 Symbol。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// mod.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">FOO_KEY</span> <span class=\\\"token operator\\\">=</span> Symbol<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>global<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">FOO_KEY</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  global<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">FOO_KEY</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">A</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> global<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">FOO_KEY</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>上面代码中，可以保证 <code>global[FOO_KEY]</code> 不会被无意间覆盖，但还是可以被改写。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code>global<span class=\\\"token punctuation\\\">[</span>Symbol<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'world'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./mod.js'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>如果键名使用 Symbol 方法生成，那么外部将无法引用这个值，当然也就无法改写。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// mod.js</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">FOO_KEY</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 后面代码相同 ……</span>\\n</code></pre></div><p>上面代码将导致其他脚本都无法引用 FOO_KEY。但这样也有一个问题，就是如果多次执行这个脚本，每次得到的 FOO_KEY 都是不一样的。</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}