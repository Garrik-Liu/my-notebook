{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/模板引擎/ejs介绍.md?vue&type=template&id=378c01a1","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/模板引擎/ejs介绍.md","mtime":1532206401542},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"ejs-介绍\"><a class=\"header-anchor\" href=\"#ejs-介绍\" aria-hidden=\"true\">#</a> EJS 介绍</h1>\n<p><a href=\"https://ejs.bootcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">EJS 文档<OutboundLink/></a></p>\n<p>EJS 是一套的模板语言, 是 &quot;Embedded JavaScript&quot; 的缩写, 通过在 HTML 文件内嵌入 JavaScript 代码来进行 HTML 模板渲染。(用 JS 生成 HTML)</p>\n<p>因为 EJS 支持直接在标签内书写简单、直白的 JavaScript 代码。所以可以让你在不破坏 HTML 文档结构的情况下, 使用 JS.  显著减少学习成本.</p>\n<h2 id=\"后端用法\"><a class=\"header-anchor\" href=\"#后端用法\" aria-hidden=\"true\">#</a> 后端用法</h2>\n<p>先安装:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> ejs\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在服务器代码上:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 三种使用方法:</span>\n\n<span class=\"token comment\">// data: 要传进去的数据, str: HTML 字符串</span>\n\n<span class=\"token comment\">// 1. </span>\n<span class=\"token keyword\">let</span> template <span class=\"token operator\">=</span> ejs<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">template</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2.</span>\nejs<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3. filename 是文件名(路径), </span>\nejs<span class=\"token punctuation\">.</span><span class=\"token function\">renderFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>\b\n例子:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> ejs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ejs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n\n\bejs<span class=\"token punctuation\">.</span><span class=\"token function\">renderFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'views/index.ejs'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    msg<span class=\"token punctuation\">:</span> data\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'text/html'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"配置选项-option\"><a class=\"header-anchor\" href=\"#配置选项-option\" aria-hidden=\"true\">#</a> 配置选项 option:</h3>\n<ul>\n<li><code>cache</code> 缓存编译后的函数，需要提供 <code>filename</code></li>\n<li><code>filename</code> 被 <code>cache</code> 参数用做键值，同时也用于 include 语句</li>\n<li><code>context</code> 函数执行时的上下文环境</li>\n<li><code>compileDebug</code> 当为 <code>false</code> 时不编译调试语句</li>\n<li><code>client</code> 返回独立的编译后的函数</li>\n<li><code>delimiter</code> 放在角括号中的字符，用于标记标签的开与闭</li>\n<li><code>debug</code> 将生成的函数体输出</li>\n<li><code>_with</code> 是否使用 <code>with() {}</code> 结构。如果为 <code>false</code>，所有局部数据将存储在 <code>locals</code> 对象上。</li>\n<li><code>localsName</code> 如果不使用 <code>with</code> <code>，localsName</code> 将作为存储局部变量的对象的名称。默认名称是 <code>locals</code></li>\n<li><code>rmWhitespace</code> 删除所有可安全删除的空白字符，包括开始与结尾处的空格。对于所有标签来说，它提供了一个更安全版本的 <code>-%&gt;</code> (在一行的中间并不会剔除标签后面的换行符)。</li>\n<li><code>escape</code> 为 <code>&lt;%=</code> 结构设置对应的转义（escape）函数。它被用于输出结果以及在生成的客户端函数中通过 <code>.toString()</code> 输出。(默认转义 XML)。</li>\n</ul>\n<h2 id=\"前端用法\"><a class=\"header-anchor\" href=\"#前端用法\" aria-hidden=\"true\">#</a> 前端用法</h2>\n<p>\bEJS 模板文件 用 <code>.ejs</code> 作为后缀名.</p>\n<p>例子:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>&lt;%= title %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    \n    <span class=\"token comment\">&lt;!-- 如果 hello \b传进来了, 则在 &lt;p> 标签中显示 --></span>\n    &lt;% if(hello) { %>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>&lt;%= hello %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    &lt;% } %>\n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>模板中, <code>&lt;% %&gt;</code> 括起来的内容都会被编译成 Javascript, <code>&lt;%= %&gt;</code> 将括起来的变量名中的数据渲染到模板.</p>\n<h3 id=\"标签含义\"><a class=\"header-anchor\" href=\"#标签含义\" aria-hidden=\"true\">#</a> 标签含义:</h3>\n<ul>\n<li><code>&lt;%</code> '脚本' 标签，用于流程控制，无输出。</li>\n<li><code>&lt;%_</code> 删除其前面的空格符</li>\n<li><code>&lt;%=</code> 输出数据到模板（输出是转义 HTML 标签）</li>\n<li><code>&lt;%-</code> 输出非转义的数据到模板</li>\n<li><code>&lt;%#</code> 注释标签，不执行、不输出内容</li>\n<li><code>&lt;%%</code> 输出字符串 '&lt;%'</li>\n<li><code>%&gt;</code> 一般结束标签</li>\n<li><code>-%&gt;</code> 删除紧随其后的换行符</li>\n<li><code>_%&gt;</code> 将结束标签后面的空格符删除</li>\n</ul>\n<p>用 <code>&lt;%=...%&gt;</code> 输出变量，变量若包含 '&lt;' '&gt;' '&amp;'等字符会被转义, 如果不希望变量值的内容被转义，那就这么用 <code>&lt;%-... %&gt;</code> 输出变量</p>\n<h3 id=\"包含-include\"><a class=\"header-anchor\" href=\"#包含-include\" aria-hidden=\"true\">#</a> 包含 include:</h3>\n<p>通过 <code>include</code> 指令将相对于模板路径中的模板片段包含进来。</p>\n<p>例如，如果存在 <code>&quot;./views/users.ejs&quot;</code> 和 <code>&quot;./views/user/show.ejs&quot;</code> 两个模板文件，你可以通过 <code>&lt;%- include('user/show'); %&gt;</code> 代码包含后者。</p>\n<p>你可能需要能够输出<strong>原始内容</strong>的标签 (&lt;%-) 用于 <code>include</code> 指令，避免对输出的 HTML 代码做转义处理。</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  &lt;% users.forEach(function(user){ %>\n    &lt;%- include('user/show', {user: user}); %>\n  &lt;% }); %>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"实例代码\"><a class=\"header-anchor\" href=\"#实例代码\" aria-hidden=\"true\">#</a> 实例代码:</h3>\n<h4 id=\"for\"><a class=\"header-anchor\" href=\"#for\" aria-hidden=\"true\">#</a> for:</h4>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>&lt;% for(var i = 0; i &lt; list.length; i++) { %>\n  &lt;% var user = list[i]; %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>&lt;%= user.name %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>&lt;%= user.age %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n&lt;% } %>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"if\"><a class=\"header-anchor\" href=\"#if\" aria-hidden=\"true\">#</a> if:</h4>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>&lt;% if(hello) { %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>&lt;%= hello %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n&lt;% } %>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>&lt;% if (x === 1) { %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello world!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n&lt;% } else if (x === 2) { %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hi earth!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n&lt;% } else { %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hey terra!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n&lt;% } %>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"swith\"><a class=\"header-anchor\" href=\"#swith\" aria-hidden=\"true\">#</a> swith:</h4>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>&lt;% switch (role) { %>\n&lt;% case 'Admin' : %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Super Admin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    &lt;% break; %>\n\n&lt;% case 'eventAdmin' : %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Event Admin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    &lt;% break; %>\n\n&lt;% case 'subAdmin' : %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Sub Admin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    &lt;% break; %>\n\n&lt;% } %>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}