{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/ES6/解构赋值.md?vue&type=template&id=02262dde","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/ES6/解构赋值.md","mtime":1538686915449},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"解构赋值\\\"><a href=\\\"#解构赋值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 解构赋值</h1><h2 id=\\\"数组的结构赋值\\\"><a href=\\\"#数组的结构赋值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组的结构赋值</h2><p>ES6 允许按照一定模式，<strong>从数组和对象中提取值，对变量进行赋值</strong>，这被称为解构</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p><p>本质上，这种写法属于 “<strong>模式匹配</strong>”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>foo<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span>bar<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> baz<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nfoo <span class=\\\"token comment\\\">// 1</span>\\nbar <span class=\\\"token comment\\\">// 2</span>\\nbaz <span class=\\\"token comment\\\">// 3</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">,</span> third<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;foo&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;bar&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;baz&quot;</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nthird <span class=\\\"token comment\\\">// &quot;baz&quot;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nx <span class=\\\"token comment\\\">// 1</span>\\ny <span class=\\\"token comment\\\">// 3</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>head<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>tail<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nhead <span class=\\\"token comment\\\">// 1</span>\\ntail <span class=\\\"token comment\\\">// [2, 3, 4]</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>z<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nx <span class=\\\"token comment\\\">// &quot;a&quot;</span>\\ny <span class=\\\"token comment\\\">// undefined</span>\\nz <span class=\\\"token comment\\\">// []</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nx <span class=\\\"token comment\\\">// 1</span>\\ny <span class=\\\"token comment\\\">// 2</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> d<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\na <span class=\\\"token comment\\\">// 1</span>\\nb <span class=\\\"token comment\\\">// 2</span>\\nd <span class=\\\"token comment\\\">// 4</span>\\n</code></pre></div><p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构, 也就是没有 Iterator 接口），那么将会报错。换句话说, 只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 报错</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>foo<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>foo<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>foo<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>foo<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>foo<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>foo<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"默认值\\\"><a href=\\\"#默认值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 默认值</h3><p>解构赋值允许指定默认值。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nfoo <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// x='a', y='b'</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> undefined<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// x='a', y='b'</span>\\n</code></pre></div><p>ES6 内部使用严格相等运算符 <code>===</code>，判断一个位置是否有值。所以，只有当一个数组成员严格等于 <code>undefined</code>，默认值才会生效。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>undefined<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nx <span class=\\\"token comment\\\">// 1</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nx <span class=\\\"token comment\\\">// null</span>\\n</code></pre></div><p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>     <span class=\\\"token comment\\\">// x=1; y=1</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\">// x=2; y=2</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// x=1; y=2</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>x <span class=\\\"token operator\\\">=</span> y<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>     <span class=\\\"token comment\\\">// ReferenceError: y is not defined</span>\\n</code></pre></div><h2 id=\\\"对象的解构赋值\\\"><a href=\\\"#对象的解构赋值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 对象的解构赋值</h2><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，如果按照模式匹配来赋值, 变量必须与属性同名，才能取到正确的值。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">,</span> bar <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;aaa&quot;</span><span class=\\\"token punctuation\\\">,</span> bar<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;bbb&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nfoo <span class=\\\"token comment\\\">// &quot;aaa&quot;</span>\\nbar <span class=\\\"token comment\\\">// &quot;bbb&quot;</span>\\n</code></pre></div><p>如果变量名与属性名不一致，必须写成下面这样。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> baz <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'aaa'</span><span class=\\\"token punctuation\\\">,</span> bar<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bbb'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nbaz <span class=\\\"token comment\\\">// &quot;aaa&quot;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> first<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">,</span> last<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'world'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> first<span class=\\\"token punctuation\\\">:</span> f<span class=\\\"token punctuation\\\">,</span> last<span class=\\\"token punctuation\\\">:</span> l <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">;</span>\\nf <span class=\\\"token comment\\\">// 'hello'</span>\\nl <span class=\\\"token comment\\\">// 'world'</span>\\n</code></pre></div><p>实际上在按照模式匹配赋值的时候 <code>{ foo, bar}</code> 是 <code>{ foo: foo, bar: bar }</code> 的简写.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> baz <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'aaa'</span><span class=\\\"token punctuation\\\">,</span> bar<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bbb'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 等价于</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> foo<span class=\\\"token punctuation\\\">,</span> bar<span class=\\\"token punctuation\\\">:</span> bar <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;aaa&quot;</span><span class=\\\"token punctuation\\\">,</span> bar<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;bbb&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>也就是说，对象的解构赋值的内部机制，<strong>是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者</strong>，而不是前者。</p><p>┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅</p><p>与数组一样，解构也可以用于嵌套结构的对象。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  p<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">'Hello'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'World'</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> p<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> y <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">;</span>\\nx <span class=\\\"token comment\\\">// &quot;Hello&quot;</span>\\ny <span class=\\\"token comment\\\">// &quot;World&quot;</span>\\n\\n\\n<span class=\\\"token comment\\\">// { p, p: [x, { y }] } 等价于 { p: p, p: [x, { y }] }</span>\\n<span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  p<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">'Hello'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'World'</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> p<span class=\\\"token punctuation\\\">,</span> p<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> y <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">;</span>\\nx <span class=\\\"token comment\\\">// &quot;Hello&quot;</span>\\ny <span class=\\\"token comment\\\">// &quot;World&quot;</span>\\np <span class=\\\"token comment\\\">// [&quot;Hello&quot;, {y: &quot;World&quot;}]</span>\\n</code></pre></div><p>另一个例子:</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> obj<span class=\\\"token punctuation\\\">.</span>prop<span class=\\\"token punctuation\\\">,</span> bar<span class=\\\"token punctuation\\\">:</span> arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">,</span> bar<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nobj <span class=\\\"token comment\\\">// {prop:123}</span>\\narr <span class=\\\"token comment\\\">// [true]</span>\\n</code></pre></div><p>┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅</p><p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 报错</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>bar<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>baz<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'baz'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>上面代码中，等号左边对象的 <code>foo</code> 属性，对应一个子对象。该子对象的 <code>bar</code> 属性，解构时会报错。原因很简单，因为 <code>foo</code> 这时等于 <code>undefined</code>，再取子属性就会报错</p><p>┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅</p><p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 错误的写法</span>\\n<span class=\\\"token keyword\\\">let</span> x<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// SyntaxError: syntax error</span>\\n\\n<span class=\\\"token comment\\\">// 正确的写法</span>\\n<span class=\\\"token keyword\\\">let</span> x<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>上面代码的写法会报错，因为 JavaScript 引擎会将 <code>{x}</code> 理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p><p>┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅</p><p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">:</span> first<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> last<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">;</span>\\nfirst <span class=\\\"token comment\\\">// 1</span>\\nlast <span class=\\\"token comment\\\">// 3</span>\\n</code></pre></div><h2 id=\\\"字符串-数值-和-布尔值的解构赋值\\\"><a href=\\\"#字符串-数值-和-布尔值的解构赋值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字符串, 数值 和 布尔值的解构赋值</h2><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">,</span> d<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">;</span>\\na <span class=\\\"token comment\\\">// &quot;h&quot;</span>\\nb <span class=\\\"token comment\\\">// &quot;e&quot;</span>\\nc <span class=\\\"token comment\\\">// &quot;l&quot;</span>\\nd <span class=\\\"token comment\\\">// &quot;l&quot;</span>\\ne <span class=\\\"token comment\\\">// &quot;o&quot;</span>\\n\\n<span class=\\\"token comment\\\">// length 是 String 对象的属性</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>length <span class=\\\"token punctuation\\\">:</span> len<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">;</span>\\nlen <span class=\\\"token comment\\\">// 5</span>\\n</code></pre></div><p>┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅</p><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p><blockquote><p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于 <code>undefined</code> 和 <code>null</code> 无法转为对象，所以对它们进行解构赋值，都会报错。</p></blockquote><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>toString<span class=\\\"token punctuation\\\">:</span> s<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">;</span>\\ns <span class=\\\"token operator\\\">===</span> Number<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>toString<span class=\\\"token punctuation\\\">:</span> s<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\ns <span class=\\\"token operator\\\">===</span> Boolean<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> prop<span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// TypeError</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> prop<span class=\\\"token punctuation\\\">:</span> y <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// TypeError</span>\\n</code></pre></div><h2 id=\\\"函数参数的解构赋值\\\"><a href=\\\"#函数参数的解构赋值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 函数参数的解构赋值</h2><p>函数的参数也可以使用解构赋值。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span>\\n</code></pre></div><p>┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅ ┅</p><p>函数参数的解构也可以使用默认值。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 为变量 x 和 y 指定默认值</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [3, 8]</span>\\n<span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [3, 0]</span>\\n<span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [0, 0]</span>\\n<span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [0, 0]</span>\\n\\n<span class=\\\"token comment\\\">// 为参数指定默认值</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [3, 8]</span>\\n<span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [3, undefined]</span>\\n<span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [undefined, undefined]</span>\\n<span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [0, 0]</span>\\n</code></pre></div><h2 id=\\\"圆括号问题\\\"><a href=\\\"#圆括号问题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 圆括号问题</h2><p>对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p><p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，<strong>只要有可能导致解构的歧义，就不得使用圆括号</strong>。</p><h3 id=\\\"不能使用圆括号的情况\\\"><a href=\\\"#不能使用圆括号的情况\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 不能使用圆括号的情况</h3><h4 id=\\\"变量声明语句\\\"><a href=\\\"#变量声明语句\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 变量声明语句</h4><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 全部报错</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">:</span> c<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span> c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> c<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> o<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> p<span class=\\\"token punctuation\\\">:</span> p <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> o<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> p<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n</code></pre></div><h4 id=\\\"函数参数\\\"><a href=\\\"#函数参数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 函数参数</h4><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 报错</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span>z<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> z<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 报错</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>z<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> x<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h4 id=\\\"赋值语句的模式\\\"><a href=\\\"#赋值语句的模式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 赋值语句的模式</h4><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 全部报错</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> p<span class=\\\"token punctuation\\\">:</span> a <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> p<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">42</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 报错</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> p<span class=\\\"token punctuation\\\">:</span> a <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> c <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"可以使用圆括号的情况\\\"><a href=\\\"#可以使用圆括号的情况\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 可以使用圆括号的情况</h3><p>可以使用圆括号的情况只有一种：<strong>赋值语句的非模式部分，可以使用圆括号</strong>。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 正确</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> p<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 正确</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span>parseInt<span class=\\\"token punctuation\\\">.</span>prop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 正确</span>\\n</code></pre></div><p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。</p><h2 id=\\\"用途\\\"><a href=\\\"#用途\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 用途</h2><h4 id=\\\"交换变量的值\\\"><a href=\\\"#交换变量的值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 交换变量的值</h4><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> y <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>y<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"从函数返回多个值\\\"><a href=\\\"#从函数返回多个值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 从函数返回多个值</h4><p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 返回一个数组</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 返回一个对象</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    bar<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">,</span> bar <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"函数参数的定义\\\"><a href=\\\"#函数参数的定义\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 函数参数的定义</h4><p>解构赋值可以方便地将一组参数与变量名对应起来。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 参数是一组有次序的值</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">,</span> z<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 参数是一组无次序的值</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">,</span> z<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>z<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"提取-json-数据\\\"><a href=\\\"#提取-json-数据\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 提取 JSON 数据</h4><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> jsonData <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">,</span>\\n  status<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;OK&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n  data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">867</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5309</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> id<span class=\\\"token punctuation\\\">,</span> status<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">:</span> number <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> jsonData<span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">,</span> status<span class=\\\"token punctuation\\\">,</span> number<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 42, &quot;OK&quot;, [867, 5309]</span>\\n</code></pre></div><h4 id=\\\"函数参数的默认值\\\"><a href=\\\"#函数参数的默认值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 函数参数的默认值</h4><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code>jQuery<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">ajax</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">async</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function-variable function\\\">beforeSend</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  cache <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function-variable function\\\">complete</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  crossDomain <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  global <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// ... more config</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ... do stuff</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"遍历-map-结构\\\"><a href=\\\"#遍历-map-结构\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 遍历 Map 结构</h4><p>任何部署了 Iterator 接口的对象，都可以用 <code>for...of</code> 循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> map <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'first'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'second'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'world'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">of</span> map<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">&quot; is &quot;</span> <span class=\\\"token operator\\\">+</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// first is hello</span>\\n<span class=\\\"token comment\\\">// second is world</span>\\n</code></pre></div><p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 获取键名</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">of</span> map<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 获取键值</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span>value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">of</span> map<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h4 id=\\\"加载模块的指定方法\\\"><a href=\\\"#加载模块的指定方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 加载模块的指定方法</h4><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> SourceMapConsumer<span class=\\\"token punctuation\\\">,</span> SourceNode <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;source-map&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}