{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/游戏开发/从0开始学习游戏开发/docs/x.md?vue&type=template&id=3eddd5ba","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/游戏开发/从0开始学习游戏开发/docs/x.md","mtime":1534084863188},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"游戏引擎\\\"><a href=\\\"#游戏引擎\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 游戏引擎?</h2><h3 id=\\\"什么是游戏引擎\\\"><a href=\\\"#什么是游戏引擎\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么是游戏引擎?</h3><ul><li><strong>在代码层面，游戏引擎是对绘图接口、操作系统、音频等接口进行的代码层面的封装</strong></li><li><strong>在工具层面，游戏引擎是一整套游戏内容的制作工具，方便你制作针对这个引擎的游戏内容</strong></li></ul><blockquote><p>游戏引擎是指一些已编写好的可编辑电脑游戏系统或者一些交互式实时图像应用程序的核心组件。这些系统为游戏设计者提供各种编写游戏所需的各种工具，其目的在于让游戏设计者能容易和快速地做出游戏程序而不用由零开始. 大多数游戏引擎包含以下系统：渲染引擎、物理引擎、碰撞检测系统、音效、脚本引擎、电脑动画、人工智能、网络引擎以及场景管理。 - 维基百科</p></blockquote><p>简单来说, 引擎可以干什么:</p><ol><li><strong>提供图形引擎</strong>: 平时所说一个游戏是 &quot;虚幻&quot;, &quot;寒霜&quot; 引擎做的, 就是广义的在指图形渲染.</li><li><strong>提供一条龙解决方案</strong>: 除了图形渲染, 引擎还提供对于: 音频, 键鼠操作, UI 界面, 地图编辑, 等等一系列与游戏开发相关的解决方案.  简单说, 游戏引擎是提供开发一个游戏所需的一整套解决方案.</li><li><strong>提供编程接口</strong>: 使用引擎提供的编程接口, 让代码编写变得简单</li></ol><h3 id=\\\"引擎用什么编写的\\\"><a href=\\\"#引擎用什么编写的\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 引擎用什么编写的?</h3><p>熟悉游戏开发逻辑, 如果出现问题, 可以帮助快速定位问题所在.</p><h4 id=\\\"c-c\\\"><a href=\\\"#c-c\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> C/C++</h4><p>在 Windows 或者 Linux 下开发的游戏, 99% 是使用 C/C++ 或者汇编语言编写的游戏引擎开发的.  原因是运行效率高.</p><h4 id=\\\"javascript\\\"><a href=\\\"#javascript\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> JavaScript</h4><p>HTML 游戏, 99% 使用的是 JavaScript 编写的游戏引擎.  Cocos2d, 白鹭 都是使用的 JavaScript 编写</p><h3 id=\\\"自行开发还是购买\\\"><a href=\\\"#自行开发还是购买\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 自行开发还是购买?</h3><p>在财力, 精力, 编程能力都允许的情况下, 自行开发的引擎更贴合项目需求. 但是购买商业引擎一般是多数开发者的首选项. 毕竟直接购买现成的游戏引擎, 省时省力.</p><p>然而商业引擎也会存在诸多问题:</p><ul><li>学会使用引擎只是学会个工具而已, 对个人能力提升帮助不大</li><li>如果日后更换引擎, 就要从头学起, 浪费精力时间.</li><li>引擎本身也会有 BUG, 有时会对游戏质量造成影响.</li></ul><h2 id=\\\"底层绘图接口\\\"><a href=\\\"#底层绘图接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 底层绘图接口</h2><h2 id=\\\"地图编辑器\\\"><a href=\\\"#地图编辑器\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 地图编辑器</h2><p>顾名思义, 地图编辑器是用来编辑游戏地图的.</p><p><img src=\\\"https://i.imgur.com/TEBNOMc.gif\\\" alt=\\\"wm3zfsjdtbjq\\\"></p><h3 id=\\\"为什么要了解地图编辑器编写过程\\\"><a href=\\\"#为什么要了解地图编辑器编写过程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么要了解地图编辑器编写过程?</h3><p>了解地图编辑器的编写过程有哪些好处:</p><ul><li><strong>更好地了解游戏引擎</strong>: 在编写地图编辑器的时候, 除了音乐模块可能不会被用到, 其余引擎提供的模块基本上都会被使用, 这是一个很好对引擎全面了解的机会</li><li><strong>优化开发流程</strong>: 在编写地图编辑器的时候, 你会开始思考, 资源载入读取等等这些基础问题, 这些问题在后面的游戏开发中也都会频繁涉及, 在开发之前, 把这些基础流程先梳理一遍, 可以提升后续的开发流畅度</li><li><strong>涉及 UI, 键鼠的使用</strong>: UI 点击, 键鼠操作, 在地图编辑的时候也是会涉及到的, 在这一阶段先把代码编写成熟, 到后续游戏开发时可以直接搬用.</li><li><strong>磨合团队</strong>: 因为在编写地图编辑器的时候, 会涉及到美术, 策划, 代码, 等几乎与游戏开发相关的所有人员, 讨论地图编辑器开发是一个很好的团队磨合机会.</li></ul><h3 id=\\\"为什么要做游戏-demo\\\"><a href=\\\"#为什么要做游戏-demo\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么要做游戏 Demo?</h3><p>为什么正式开发之前, 要先做一个 Demo 呢? 总结一下, 主要有下面几个原因:</p><ul><li><strong>游戏 Demo 完成的是核心框架</strong>: Demo 所做的工作是, 完成该游戏的核心内容框架. 也就是说游戏的总体逻辑和主要想呈现的内容. 最终成品会表现在画面, 操作细节, 等等方面与 Demo 有较大差异.</li><li><strong>测试 BUG</strong>: Demo 肩负的另一个任务就是 &quot;试水&quot;, 游戏在正式开发之前, 可以在 Demo 中测试程序代码是否可以跑起来, 游戏整体体验好不好, 如果有问题可以总结出来, 在正式版中做优化. 但如果上来就做正式版, 一旦出了问题, 可能就会陷入 &quot;无间补丁地狱&quot; 了</li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}