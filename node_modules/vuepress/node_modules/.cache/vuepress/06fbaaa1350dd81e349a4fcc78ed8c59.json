{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/‰∏äËØæÁ¨îËÆ∞/PRG556/labtest1.md?vue&type=template&id=552009dc","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/‰∏äËØæÁ¨îËÆ∞/PRG556/labtest1.md","mtime":1539873877733},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"lab-test\\\"><a href=\\\"#lab-test\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> LAB TEST</h1><h2 id=\\\"creating-and-using-servlets\\\"><a href=\\\"#creating-and-using-servlets\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Creating and using Servlets</h2><p>The <strong>URL Pattern</strong> indicates the web address that will direct the request to our Servlet.</p><p>üå∞</p><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doGet</span><span class=\\\"token punctuation\\\">(</span>HttpServletRequest request<span class=\\\"token punctuation\\\">,</span> HttpServletResponse response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> ServletException<span class=\\\"token punctuation\\\">,</span> IOException <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tresponse<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setContentType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;application/xhtml+xml&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tresponse<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setCharacterEncoding</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;UTF-8&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// set the character encoding BEFORE getting the PrintWriter object</span>\\n\\t\\tPrintWriter out <span class=\\\"token operator\\\">=</span> response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getWriter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;&lt;?xml version=\\\\&quot;1.0\\\\&quot; encoding=\\\\&quot;UTF-8\\\\&quot; ?&gt;&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;&lt;!DOCTYPE html PUBLIC \\\\&quot;-//W3C//DTD XHTML 1.1//EN\\\\&quot; \\\\&quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\\\\&quot;&gt;&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;&lt;html xmlns=\\\\&quot;http://www.w3.org/1999/xhtml\\\\&quot;&gt;&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;&lt;head&gt;&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;&lt;title&gt;Greeting Application&lt;/title&gt;&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;&lt;/head&gt;&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;&lt;body&gt;&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;&lt;p&gt;Hello &lt;em&gt;cruel&lt;/em&gt; world!&lt;/p&gt;&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;&lt;/body&gt;&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;&lt;/html&gt;&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>„Äé <code>out</code> „Äè is the PrintWriter object, is ways to produce the servlet output in Java</p><ul><li><strong><code>out.println</code></strong>: Ouptuts a String or primitive type to the PrintWriter's output stream <strong>followed by a new-line character</strong>.</li><li><strong><code>out.print</code></strong>: Outputs a String or primitive type to the PrintWriter's output stream <strong>without appending a new-line</strong> character.</li><li><strong><code>out.printf</code></strong>: Sends formatted output to the PrintWriter's output stream. This printf method works similar to the C printf function.</li></ul><h2 id=\\\"creating-and-using-filters\\\"><a href=\\\"#creating-and-using-filters\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Creating and using Filters</h2><p>For each filter whose url-pattern matches the requested url, that filter's <code>doFilter</code> method is called.\\nto continue on to the index.jspx page, the filter code simply calls <code>chain.doFilter()</code>. Note that the action attribute on the form specifies <code>action=&quot;index.jspx&quot;</code>.</p><p>üå∞</p><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doFilter</span><span class=\\\"token punctuation\\\">(</span>ServletRequest req<span class=\\\"token punctuation\\\">,</span> ServletResponse resp<span class=\\\"token punctuation\\\">,</span> FilterChain chain<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> IOException<span class=\\\"token punctuation\\\">,</span> ServletException\\n\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\tHttpServletRequest request <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>HttpServletRequest<span class=\\\"token punctuation\\\">)</span>req<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\n\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;POST&quot;</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getMethod</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// request.getMethod requires an HttpServletRequest object</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tString name <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tString gender <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;gender&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tString province <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;province&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tString love <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;love&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;gender&quot;</span><span class=\\\"token punctuation\\\">,</span> gender<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;province&quot;</span><span class=\\\"token punctuation\\\">,</span> province<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;love&quot;</span><span class=\\\"token punctuation\\\">,</span> love <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\tchain<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doFilter</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> resp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h3 id=\\\"filter-initialization-parameters\\\"><a href=\\\"#filter-initialization-parameters\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Filter Initialization Parameters</h3><p>Initialization parameters for the filter can be supplied by way of the <code>@WebFilter</code> annotation.</p><p>To access these parameters, use the filter's javax.servlet.FilterConfig object (passed in the filter's <code>init()</code> method). Then, use the object's <code>getInitParameter(parameter name)</code> method to get the specific parameter value.</p><p>The value returned is a <strong>String</strong>. If the parameter is not found, the value returned is <code>null</code>.</p><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@WebFilter</span><span class=\\\"token punctuation\\\">(</span>\\n\\t\\turlPatterns <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">&quot;/random.jspx&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> \\n\\t\\tinitParams <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> \\n\\t\\t\\t\\t<span class=\\\"token annotation punctuation\\\">@WebInitParam</span><span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;min-terms&quot;</span><span class=\\\"token punctuation\\\">,</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;3&quot;</span><span class=\\\"token punctuation\\\">,</span> description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;Minimum number of terms&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> \\n\\t\\t\\t\\t<span class=\\\"token annotation punctuation\\\">@WebInitParam</span><span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;max-terms&quot;</span><span class=\\\"token punctuation\\\">,</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;10&quot;</span><span class=\\\"token punctuation\\\">,</span> description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;Maximum number of terms&quot;</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span>FilterConfig fConfig<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> ServletException\\n\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">try</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">int</span> minTerms <span class=\\\"token operator\\\">=</span> Integer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>fConfig<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getInitParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;min-terms&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token comment\\\">//setMinTerms(minTerms); // Save min terms to class field</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Exception</span> e<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token comment\\\">// Do nothing, leave default value</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token keyword\\\">try</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">int</span> maxTerms <span class=\\\"token operator\\\">=</span> Integer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>fConfig<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getInitParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;max-terms&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token comment\\\">//setMaxTerms(maxTerms); // Save max terms to class field</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Exception</span> e<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token comment\\\">// Do nothing, leave default value</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h3 id=\\\"servlet-vs-filter\\\"><a href=\\\"#servlet-vs-filter\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Servlet vs Filter</h3><p>With a Servlet, the URL mapping indicates the URL that will capture the request.   For example, have a servlet that specifies its url pattern as /hello. Then when the browser requests <code>&lt;context-root&gt;/hello</code>, the request is directed to the Servlet. The servlet may then forward the request to a response page to display results (e.g. hello.jspx).</p><p>With a Filter, the URL mapping indicates the URL that will cause the request to be passed through the filter.  Similar to the Servlet example above, we might have a Filter that specifies its url pattern as <code>/hello.jspx</code>. Then when the browser requests <code>&lt;context-root&gt;/hello.jspx</code>, the request is first passed to the Filter. The Filter can generate a response and then (by calling chain.doFilter()), forward the request on to the intended destination, hello.jspx.</p><h2 id=\\\"comparing-objects\\\"><a href=\\\"#comparing-objects\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Comparing Objects</h2><p>The <code>equals()</code> method allows an object to compare on the basis of content rather than references.</p><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>string1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>string2<span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h2 id=\\\"response-redirection\\\"><a href=\\\"#response-redirection\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Response Redirection</h2><p>The HTTP provides a mechanism (response code 302) for the server to notify the client that the requested resource has moved to a new URL</p><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sendRedirect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;myfilterpage.jspx?value=10&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>üå∞</p><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doFilter</span><span class=\\\"token punctuation\\\">(</span>ServletRequest req<span class=\\\"token punctuation\\\">,</span> ServletResponse resp<span class=\\\"token punctuation\\\">,</span> FilterChain chain<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> IOException<span class=\\\"token punctuation\\\">,</span> ServletException\\n\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\tHttpServletResponse response <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>HttpServletResponse<span class=\\\"token punctuation\\\">)</span>resp<span class=\\\"token punctuation\\\">;</span>\\n\\t\\tresponse<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sendRedirect</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;fibonacci.jspx?fibTerms=%d&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getRandomTerms</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>There are some other useful headers that can be sent to the client. One such header is the auto-refresh header.</p><p>It is sometimes helpful to have a web page that refreshes itself after a specified period of time.</p><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHeader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;Refresh&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;time; URL=url&quot;</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h2 id=\\\"request-delegation\\\"><a href=\\\"#request-delegation\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Request Delegation</h2><p>Request delegation is accomplished through the <code>javax.servlet.RequestDispatcher</code> object. The request dispatcher object can be obtained from either the <code>javax.servlet.http.HttpServletRequest</code> object by calling the <code>getRequestDispatcher(String path)</code> (where path represents a resource in the web application) or from the <code>javax.servlet.ServletContext</code> object by calling the <code>getNamedDispatcher(String name)</code> (where name is the name of a servlet as defined in the @WebServlet annotation).</p>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://my.senecacollege.ca/webapps/blackboard/content/listContent.jsp?course_id=_577446_1&content_id=_8193159_1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"link\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<h2 id=\\\"random-numbers\\\"><a href=\\\"#random-numbers\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Random Numbers</h2><p>To generate random numbers, use a <code>java.util.Random</code> object. E.g.:</p><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code>Random rndVar<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">int</span> num<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">double</span> dNum<span class=\\\"token punctuation\\\">;</span>\\nrndVar <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nnum <span class=\\\"token operator\\\">=</span> rndVar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nextInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> 'A Random <span class=\\\"token keyword\\\">int</span> value\\nnum <span class=\\\"token operator\\\">=</span> rndVar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nextInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> 'A Random positive Integer between <span class=\\\"token number\\\">0</span> and <span class=\\\"token number\\\">9</span> inclusive\\ndNum <span class=\\\"token operator\\\">=</span> rndVar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nextDouble</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> 'A Random <span class=\\\"token keyword\\\">double</span> <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">0.0</span> and <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">1.0</span> \\n</code></pre></div><h2 id=\\\"creating-and-using-application-scoped-attributes-servlet\\\"><a href=\\\"#creating-and-using-application-scoped-attributes-servlet\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Creating and using application-scoped attributes (Servlet)</h2><p>The servlet context (through the <code>javax.servlet.ServletContext</code> object which is available through the <code>ServletRequest</code> object's <code>getServletContext()</code> method</p><p>provides the servlets and filters with access to resources, virtual directory translation, and an application scope to which objects can be bound (use the <code>setAttribute</code> and <code>getAttribute</code> methods).</p><p>All requests within the application share the same application scope. This creates a potential <strong>thread safety issue</strong>. Use synchronized statements or synchronized methods to avoid threading issues. E.g.</p><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doFilter</span><span class=\\\"token punctuation\\\">(</span>ServletRequest request<span class=\\\"token punctuation\\\">,</span> ServletResponse response<span class=\\\"token punctuation\\\">,</span> FilterChain chain<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> IOException<span class=\\\"token punctuation\\\">,</span> ServletException <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tServletContext servletContext <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getServletContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">synchronized</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// synchronization is required since application scope (ServletContext) is shared among all requests</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">int</span> visitorCount<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tInteger numVisits <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>Integer<span class=\\\"token punctuation\\\">)</span>servletContext<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;numVisits&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>numVisits <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\tvisitorCount <span class=\\\"token operator\\\">=</span> numVisits<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Integer is auto unboxed to int</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">else</span>\\n\\t\\t\\t\\tvisitorCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tvisitorCount<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tservletContext<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;numVisits&quot;</span><span class=\\\"token punctuation\\\">,</span> visitorCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// int is autoboxed to Integer</span>\\n\\t\\t\\tchain<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doFilter</span><span class=\\\"token punctuation\\\">(</span>request<span class=\\\"token punctuation\\\">,</span> response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>Application-wide initialization parameters are also available to the filter through the <code>getServletContext()</code> object's <code>getInitParameter()</code> method. Put application-wide initialization parameters in the <code>&lt;context-param&gt;</code> tag of the <code>web.xml</code> file.</p><h2 id=\\\"creating-and-using-request-scoped-attributes\\\"><a href=\\\"#creating-and-using-request-scoped-attributes\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Creating and using request-scoped attributes</h2><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doFilter</span><span class=\\\"token punctuation\\\">(</span>ServletRequest req<span class=\\\"token punctuation\\\">,</span> ServletResponse resp<span class=\\\"token punctuation\\\">,</span> FilterChain chain<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> IOException<span class=\\\"token punctuation\\\">,</span> ServletException\\n\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\tHttpServletRequest request <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>HttpServletRequest<span class=\\\"token punctuation\\\">)</span>req<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\n\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;POST&quot;</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getMethod</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// request.getMethod requires an HttpServletRequest object</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tString name <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tString gender <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;gender&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tString province <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;province&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tString love <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;love&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;gender&quot;</span><span class=\\\"token punctuation\\\">,</span> gender<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;province&quot;</span><span class=\\\"token punctuation\\\">,</span> province<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;love&quot;</span><span class=\\\"token punctuation\\\">,</span> love <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\tchain<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doFilter</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> resp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"creating-and-using-event-listeners\\\"><a href=\\\"#creating-and-using-event-listeners\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Creating and using Event Listeners</h2><p>Event listeners allow a web application to be notified when container-managed life cycle events occur.  For example, an application may need to be notified when a new request is started or when an attribute is created.</p><p>To create a listener class, the class must implement the appropriate listener interface. Then, the listener class must be identified as a listener using a <code>@WebListener</code> annotation.  Notice that the type of listener does not need to be specified. This information is determined by the interface that the class implements.</p><h2 id=\\\"passing-data-from-filter-to-jspx-document-using-attributes\\\"><a href=\\\"#passing-data-from-filter-to-jspx-document-using-attributes\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Passing data from filter to jspx document using attributes</h2><div class=\\\"language-java extra-class\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">doFilter</span><span class=\\\"token punctuation\\\">(</span>ServletRequest req<span class=\\\"token punctuation\\\">,</span> ServletResponse resp<span class=\\\"token punctuation\\\">,</span> FilterChain chain<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> IOException<span class=\\\"token punctuation\\\">,</span> ServletException\\n\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\tHttpServletRequest request <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>HttpServletRequest<span class=\\\"token punctuation\\\">)</span>req<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\n\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;POST&quot;</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getMethod</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// request.getMethod requires an HttpServletRequest object</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tString name <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tString gender <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;gender&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tString province <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;province&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\tString love <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getParameter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;love&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">!=</span> null <span class=\\\"token operator\\\">&amp;&amp;</span> name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;gender&quot;</span><span class=\\\"token punctuation\\\">,</span> gender<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;province&quot;</span><span class=\\\"token punctuation\\\">,</span> province<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\trequest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;love&quot;</span><span class=\\\"token punctuation\\\">,</span> love <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\tchain<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doFilter</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> resp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><div class=\\\"language-jsp extra-class\\\"><pre class=\\\"language-text\\\"><code>&lt;c:if test=&quot;${gender ne null and province ne null}&quot;&gt;You are a ${gender} living in ${province}\\n    &lt;c:choose&gt;\\n        &lt;c:when test=&quot;${love}&quot;&gt; and you love Seneca College.&lt;/c:when&gt;\\n        &lt;c:otherwise&gt;.&lt;/c:otherwise&gt;\\n\\t&lt;/c:choose&gt;\\n&lt;/c:if&gt;\\n</code></pre></div><h2 id=\\\"persisting-input-values\\\"><a href=\\\"#persisting-input-values\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Persisting input values</h2><p>We can initialize the form inputs to return the input data as default selections in the form thus persisting the input data.</p><div class=\\\"language-jsp extra-class\\\"><pre class=\\\"language-text\\\"><code>&lt;input type=&quot;text&quot; name=&quot;firstName&quot; value=&quot;${defaultFirstName}&quot; /&gt;\\n</code></pre></div><h2 id=\\\"using-jsp-el-expressions\\\"><a href=\\\"#using-jsp-el-expressions\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Using JSP EL expressions</h2><h2 id=\\\"jstl\\\"><a href=\\\"#jstl\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> JSTL</h2><h3 id=\\\"set\\\"><a href=\\\"#set\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> set</h3><p>The <code>set</code> tag exports a value to the variable specified in the <code>var</code> attribute. The value can be specified in the <code>value</code> attribute or in the tag's body.</p><div class=\\\"language-jsp extra-class\\\"><pre class=\\\"language-text\\\"><code>&lt;c:set var=&quot;nextage&quot; value=&quot;${age + 1}&quot; /&gt;\\n</code></pre></div><h3 id=\\\"fortokens\\\"><a href=\\\"#fortokens\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> forTokens</h3><p>The <code>forTokens</code> tag parses a String into tokens based on given delimiters (ÂÆöÁïåÁ¨¶) (specified by the <code>delims</code> attribute) and then iterates over those token. Specify the tokenized String using the <code>items</code> attribute and the current item is available through a variable named by the <code>var</code> attribute.</p><p>The <code>forTokens</code> tag also supports the following attributes:</p><ul><li><code>begin</code>: an int value that sets starting index value for the iteration. If not specified, the default value is <code>0</code>.</li><li><code>end</code>: an int value that sets the ending index value for the iteration. If not specified, the default value is the element number corresponding to the last element of <code>items</code></li><li><code>step</code>: an int value that sets the increment value for the iteration. If not specified, the default value is <code>1</code>.</li><li><code>varStatus</code>: used to contain the loop status.  ontains properties <code>first</code> to indicate if it is the first iteration through the loop, <code>last</code> to indicate if it is the last iteration through the loop, <code>index</code> for the current index value, and <code>count</code> for a count of the number of times through the loop.</li></ul><div class=\\\"language-jsp extra-class\\\"><pre class=\\\"language-text\\\"><code>&lt;p&gt;\\n   &lt;c:forTokens var=&quot;name&quot; items=&quot;${names}&quot; delims=&quot;/&quot; varStatus=&quot;status&quot;&gt;\\n      ${name}&lt;c:if test=&quot;${not status.last}&quot;&gt;, &lt;/c:if&gt;\\n   &lt;/c:forTokens&gt;\\n&lt;/p&gt;\\n</code></pre></div><p>üå∞</p><div class=\\\"language-jsp extra-class\\\"><pre class=\\\"language-text\\\"><code>&lt;form action=&quot;index.jspx&quot; method=&quot;post&quot;&gt;\\n\\t\\t&lt;fieldset id=&quot;gender&quot;&gt;\\n\\t\\t\\t&lt;legend&gt;Gender&lt;/legend&gt;\\n\\t\\t\\t&lt;c:forTokens var=&quot;genderitem&quot; items=&quot;Male/male,Female/female&quot; delims=&quot;,&quot;&gt;\\n\\t\\t\\t\\t&lt;c:set var=&quot;genderlabel&quot; value=&quot;${fn:split(genderitem, '/')[0]}&quot; /&gt;&lt;!-- E.g., splits Male/male on '/' into two element String array.  Element 0 is Male --&gt;\\n\\t\\t\\t\\t&lt;c:set var=&quot;gendervalue&quot; value=&quot;${fn:split(genderitem, '/')[1]}&quot; /&gt;&lt;!-- Element 1 is male --&gt;\\n\\t\\t\\t\\t&lt;!--  Radio buttons with the same name form a group --&gt;\\n\\t\\t\\t\\t&lt;label for=&quot;${gendervalue}&quot;&gt;${genderlabel}&lt;/label&gt;\\n\\t\\t\\t\\t&lt;c:choose&gt;\\n\\t\\t\\t\\t\\t&lt;c:when test=&quot;${gender eq null and gendervalue eq 'male' or gender eq gendervalue}&quot;&gt;&lt;input id=&quot;${gendervalue}&quot; name=&quot;gender&quot; type=&quot;radio&quot; checked=&quot;checked&quot; value=&quot;${gendervalue}&quot; /&gt;&lt;/c:when&gt;\\n\\t\\t\\t\\t\\t&lt;c:otherwise&gt;&lt;input id=&quot;${gendervalue}&quot; name=&quot;gender&quot; type=&quot;radio&quot; value=&quot;${gendervalue}&quot; /&gt;&lt;/c:otherwise&gt;\\n\\t\\t\\t\\t&lt;/c:choose&gt;\\n\\t\\t\\t&lt;/c:forTokens&gt;\\n\\t\\t&lt;/fieldset&gt;\\n\\t\\t&lt;div id=&quot;other&quot;&gt;\\n\\t\\t\\t&lt;div&gt;&lt;label for=&quot;name&quot;&gt;Name: &lt;/label&gt;&lt;/div&gt;\\n\\t\\t\\t&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;${fn:escapeXml(name)}&quot; /&gt;&lt;br /&gt;\\n\\t\\t\\t&lt;div&gt;&lt;label for=&quot;province&quot;&gt;Province: &lt;/label&gt;&lt;/div&gt;\\n\\t\\t\\t&lt;select id=&quot;province&quot; name=&quot;province&quot; size=&quot;1&quot;&gt;\\n\\t\\t\\t\\t&lt;c:forTokens var=&quot;provinceitem&quot; items=&quot;BC/British Columbia,AB/Alberta,SK/Saskatchewan,MB/Manitoba,ON/Ontario,QC/Quebec,NS/Nova Scotia,PE/Prince Edward Island,NB/New Brunswick,NL/Newfoundland and Labrador&quot; delims=&quot;,&quot;&gt;\\n\\t\\t\\t\\t\\t&lt;c:set var=&quot;provincevalue&quot; value=&quot;${fn:split(provinceitem, '/')[0]}&quot; /&gt;&lt;!-- E.g., splits BC/British Columbia on '/' into two element String array.  Element 0 is BC --&gt;\\n\\t\\t\\t\\t\\t&lt;c:set var=&quot;provincetext&quot; value=&quot;${fn:split(provinceitem, '/')[1]}&quot; /&gt;&lt;!-- Element 1 is British Columbia --&gt;\\n\\t\\t\\t\\t\\t&lt;c:choose&gt;\\n\\t\\t\\t\\t\\t\\t&lt;c:when test=&quot;${province eq null and provincevalue eq 'ON' or province eq provincevalue}&quot;&gt;&lt;option value=&quot;${provincevalue}&quot; selected=&quot;selected&quot;&gt;${provincetext}&lt;/option&gt;&lt;/c:when&gt;\\n\\t\\t\\t\\t\\t\\t&lt;c:otherwise&gt;&lt;option value=&quot;${provincevalue}&quot;&gt;${provincetext}&lt;/option&gt;&lt;/c:otherwise&gt;\\n\\t\\t\\t\\t\\t&lt;/c:choose&gt;\\n\\t\\t\\t\\t&lt;/c:forTokens&gt;\\n\\t\\t\\t&lt;/select&gt;&lt;br /&gt;\\n\\t\\t\\t&lt;c:choose&gt;\\n\\t\\t\\t\\t&lt;c:when test=&quot;${love eq null or love}&quot;&gt;&lt;input id=&quot;love&quot; type=&quot;checkbox&quot; name=&quot;love&quot; value=&quot;love&quot; checked=&quot;checked&quot; /&gt;&lt;/c:when&gt;\\n\\t\\t\\t\\t&lt;c:otherwise&gt;&lt;input id=&quot;love&quot; type=&quot;checkbox&quot; name=&quot;love&quot; value=&quot;love&quot; /&gt;&lt;/c:otherwise&gt;\\n\\t\\t\\t&lt;/c:choose&gt;\\n\\t\\t\\t&lt;label for=&quot;love&quot;&gt;I Love Seneca College&lt;/label&gt;\\n\\t\\t&lt;/div&gt;\\n\\t\\t&lt;input name=&quot;ok&quot; type=&quot;submit&quot; value=&quot;Who Am I&quot; /&gt;\\n\\t&lt;/form&gt;\\n</code></pre></div><h3 id=\\\"foreach\\\"><a href=\\\"#foreach\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> forEach</h3><div class=\\\"language-jsp extra-class\\\"><pre class=\\\"language-text\\\"><code>&lt;c:choose&gt;\\n   &lt;c:when test=&quot;${empty customernames}&quot;&gt;&lt;p&gt;You have no customers.&lt;/p&gt;&lt;/c:when&gt;\\n   &lt;c:otherwise&gt;\\n      &lt;ul&gt;\\n         &lt;c:forEach var=&quot;name&quot; items=&quot;${customernames}&quot;&gt;\\n            &lt;li&gt;${name}&lt;/li&gt;\\n         &lt;/c:forEach&gt;\\n      &lt;/ul&gt;\\n   &lt;/c:otherwise&gt;\\n&lt;/c:choose&gt;\\n</code></pre></div><h3 id=\\\"if\\\"><a href=\\\"#if\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> if</h3><div class=\\\"language-jsp extra-class\\\"><pre class=\\\"language-text\\\"><code>You have ${messagescount} message&lt;c:if test=&quot;${messagescount ne 1}&quot;&gt;s&lt;/c:if&gt;\\n</code></pre></div><h2 id=\\\"using-web-libraries\\\"><a href=\\\"#using-web-libraries\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Using web libraries</h2><p>The WEB-INF/lib folder is a special folder. Any library files found in that folder are automatically accessible to the project code. You can use the class from the package as you would any other class.</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}