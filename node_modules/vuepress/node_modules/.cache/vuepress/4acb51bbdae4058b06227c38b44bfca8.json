{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/Express/基础知识/基本指南.md?vue&type=template&id=36aaccc0","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/Express/基础知识/基本指南.md","mtime":1532355244593},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"基本指南\\\"><a href=\\\"#基本指南\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基本指南</h1><h2 id=\\\"什么是-express\\\"><a href=\\\"#什么是-express\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么是 Express ?</h2><p>Node.js 基于 Chrome 的 V8引擎，使 JavaScript 可以脱离于浏览器，在服务器上运行。因为有了 Node.js, 让前端\\b开发人员也\\b可以\\b去写后端代码.</p><p>因为 Node.js 只提供一些底层功能，开发者需要在此基础上编写很多冗长的代码。</p><p>Express 作为一个\\b架构与 Node.js 之上，以中间件, 路由, 模板引擎为核心, 提供了很多简单易用的 API 和 一系列强大的特性的轻量 Web 应用框架.</p><p>Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。</p><p>Express 之于 Node.js，就像 jQuery 之于 JavaScript;</p><h3 id=\\\"一个-node-js-程序\\\"><a href=\\\"#一个-node-js-程序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 一个 Node.js 程序</h3><p>假如创建一个 Node.js 服务器, 这整个程序就是一个 JavaScript 函数。这整个程序所做的事情就是接收请求，然后根据请求的内容去返回相应响应。比如说浏览器请求主页，它就会返回一个 HTML 文件。</p><p>在不用 Express 的情况下，过程就像\\b下图：</p><p><img src=\\\"https://i.imgur.com/pSx1DBJ.png\\\" alt=\\\"Screen Shot 2018-07-09 at 11.43.22 AM\\\"></p><p>JavaScript 函数接收请求，在这里\\b被称作 request handler。</p><p>Node.js's HTTP server 处理 客户端 与 函数 之间的连接，所以我不用去管什么网络协议问题。</p><p>在函数之中，它接收两个参数，请求对象 和 响应对象。</p><p>\\bNode.js 程序简单来说就是处理 请求 和 响应。\\b没有很复杂，但是因为原生提供的功能比较底层，所以代码量很大。使用框架可以让编写更简洁。</p><p><img src=\\\"https://i.imgur.com/g9ccPiM.png\\\" alt=\\\"Screen Shot 2018-07-09 at 11.52.16 AM\\\"></p><p>不用x像\\b原生代码里写一个\\b巨大的 request handler。Express 把它根据请求内容拆分成很多小函数，有的处理所有的请求，有的只处理 GET 请求，有的只处理针对一个\\b特定 URL 的请求，等等。</p><h3 id=\\\"一个-express-程序\\\"><a href=\\\"#一个-express-程序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 一个 Express 程序</h3><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 引入模块</span>\\n<span class=\\\"token keyword\\\">var</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'express'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 建立 express app</span>\\n<span class=\\\"token keyword\\\">var</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;Hello World!&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;监听3000端口&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h3 id=\\\"express-的-小-理念\\\"><a href=\\\"#express-的-小-理念\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Express 的 &quot;小&quot; 理念</h3><p>Express 框架并不会给你的代码限制在一个固定刻板的结构内.</p><p>因为模块化机制, 程序一般都是以 Express 框架为主体, 结合各种外部模块, 去实现具体功能.</p><p>但提供了灵活性的\\b同时, 这也使 Express 只提供了最基本的功能, 很多时候, 我们需要去找适合项目的第三方模块.</p><h2 id=\\\"express-核心\\\"><a href=\\\"#express-核心\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Express 核心</h2><p>一直都在说, Express 让 Node.js 编写变的简单, 但是具体是怎么做到的呢?</p><p>这主要是依靠于 Express 的两个核心特性:</p><ul><li>Middleware</li><li>Routing</li></ul><h3 id=\\\"中间件\\\"><a href=\\\"#中间件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 中间件</h3><p>\\b在原生的 Node Web 程序里, 服务器接收客户端发来的请求, 然后经过请求处理函数( request handler )处理后, 返回\\b给客户端一个响应.</p><p>这个请求处理函数往往随着需求的增加而增大, 最后难以管理. 在 Express 里, 大函数被\\b拆分成了多个小函数, 每个函数只处理一小部分任务, 这些小函数就被称作 <strong>中间件</strong></p><p>\\b中间件再根据\\b执行的\\b先后顺序构成 中间件链条.</p><h3 id=\\\"路由\\\"><a href=\\\"#路由\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由\\b</h3><p>不同于中间件什么请求都处理，路由根据 客户端发送过来的 URL 或者 HTTP\\b 方法 来做出相应的处理.</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}