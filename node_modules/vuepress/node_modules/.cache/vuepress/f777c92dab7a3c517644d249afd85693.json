{"remainingRequest":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/核心模块.md?vue&type=template&id=1405e432","dependencies":[{"path":"/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/核心模块.md","mtime":1531781702853},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1530932815982},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1530932815981},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1530932816121}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"核心模块\"><a class=\"header-anchor\" href=\"#核心模块\" aria-hidden=\"true\">#</a> 核心模块</h1>\n<p>核心模块是 Node.js 的心脏，它由一些精简而高效的库组成，为 Node.js 提供了基本的 API。</p>\n<h2 id=\"event-模块\"><a class=\"header-anchor\" href=\"#event-模块\" aria-hidden=\"true\">#</a> Event 模块</h2>\n<p><a href=\"http://nodejs.cn/api/events.html\" target=\"_blank\" rel=\"noopener noreferrer\">Events 文档<OutboundLink/></a></p>\n<p>Node 是\b事件驱动的, events 是 Node 最重要的模块.</p>\n<h3 id=\"事件发射器-eventemitter\"><a class=\"header-anchor\" href=\"#事件发射器-eventemitter\" aria-hidden=\"true\">#</a> 事件发射器 EventEmitter</h3>\n<p>events 模块只提供了一个对象: <code>events.EventEmitter</code>。</p>\n<p>EventEmitter 的核心就 是 事件发射 与 事件监听器 功能的封装。</p>\n<p>EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。</p>\n<p>对于每个事件，EventEmitter 支持若干个事件监听器。当事件发射时，注册到这个事件的 事件监听器 被依次调用，事件参数 作为 回调函数参数 传递。</p>\n<p>例子:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 引入 events 模块</span>\n<span class=\"token keyword\">var</span> events <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建 eventEmitter 对象</span>\n<span class=\"token keyword\">var</span> emitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">events<span class=\"token punctuation\">.</span>EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someEvent'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listener1'</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someEvent'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listener2'</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someEvent'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Garrik'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>结果是:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>listner1 Garrik 1997\nlistner2 Garrik 1997\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>emitter</code> 为事件 <code>someEvent</code> 注册了两个事件监听器，然后发射了 <code>someEvent</code> 事件。运行结果中可以看到两个事件监听器回调函数被先后调用。</p>\n<h3 id=\"监听器的-this\"><a class=\"header-anchor\" href=\"#监听器的-this\" aria-hidden=\"true\">#</a> 监听器的 this</h3>\n<p>当一个普通的监听器函数被 EventEmitter 调用时，标准的 <code>this</code> 关键词会被设置指向监听器所附加的 EventEmitter。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someEvent'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this 指向 event</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someEvent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>可以使用 ES6 的箭头函数作为监听器。但是这样 <code>this</code> 关键词就不再指向 EventEmitter 实例</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>event<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someEvent'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this 指向 event 所处作用域</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"eventemitter-常用的-api\"><a class=\"header-anchor\" href=\"#eventemitter-常用的-api\" aria-hidden=\"true\">#</a> EventEmitter 常用的 API</h3>\n<h4 id=\"eventemitter-on-event-listener\"><a class=\"header-anchor\" href=\"#eventemitter-on-event-listener\" aria-hidden=\"true\">#</a> EventEmitter.on(event, listener)</h4>\n<p>为指定事件注册一个监听器，接受一个字符串 <code>event</code> 和一个回调函数 <code>listener。</code></p>\n<p><code>emitter.addListener(eventName, listener)</code> 是它的别名</p>\n<h4 id=\"eventemitter-emit-event-arg1-arg2\"><a class=\"header-anchor\" href=\"#eventemitter-emit-event-arg1-arg2\" aria-hidden=\"true\">#</a> EventEmitter.emit(event, [arg1], [arg2], [...])</h4>\n<p>发射 <code>event</code> 事件，传递若干可选参数到事件监听器的参数表。</p>\n<h4 id=\"eventemitter-once-event-listener\"><a class=\"header-anchor\" href=\"#eventemitter-once-event-listener\" aria-hidden=\"true\">#</a> EventEmitter.once(event, listener)</h4>\n<p>为指定事件注册一个单次监听器，即监听器最多只会触发一次，触发后立刻解除该监听器。</p>\n<h4 id=\"eventemitter-removelistener-event-listener\"><a class=\"header-anchor\" href=\"#eventemitter-removelistener-event-listener\" aria-hidden=\"true\">#</a> EventEmitter.removeListener(event, listener)</h4>\n<p>移除指定事件的某个监听器, <code>listener</code> 必须是该事件已经注册过的监听器。</p>\n<h4 id=\"eventemitter-removealllisteners-event\"><a class=\"header-anchor\" href=\"#eventemitter-removealllisteners-event\" aria-hidden=\"true\">#</a> EventEmitter.removeAllListeners([event])</h4>\n<p>移除所有事件的所有监听器， 如果指定 <code>event</code>，则移除指定事件的所有监听器。</p>\n<p><code>EventEmitter.off(eventName, listener)</code> 的别名</p>\n<h4 id=\"eventemitter-eventnames\"><a class=\"header-anchor\" href=\"#eventemitter-eventnames\" aria-hidden=\"true\">#</a> EventEmitter.eventNames()</h4>\n<p>返回一个列出触发器已注册监听器的事件的数组</p>\n<h4 id=\"eventemitter-listenercount-eventname\"><a class=\"header-anchor\" href=\"#eventemitter-listenercount-eventname\" aria-hidden=\"true\">#</a> EventEmitter.listenerCount(eventName)</h4>\n<p>返回正在监听指定事件的监听器的数量。</p>\n<h3 id=\"error-事件\"><a class=\"header-anchor\" href=\"#error-事件\" aria-hidden=\"true\">#</a> Error 事件</h3>\n<p>EventEmitter 定义了一个特殊的事件 error. 在遇到异常的时候通常会发射 error 事件。当 error 被发射时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，抛出错误、打印堆栈跟踪、且退出 Node.js 进程。</p>\n<p>我们一般要为会发射 error 事件注册至少一个监听器，避免遇到错误后整个程序崩溃。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> myEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有错误'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'whoops!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印: 有错误</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"fs-文件模块\"><a class=\"header-anchor\" href=\"#fs-文件模块\" aria-hidden=\"true\">#</a> Fs 文件模块</h2>\n<p><a href=\"http://nodejs.cn/api/fs.html#fs_file_system\" target=\"_blank\" rel=\"noopener noreferrer\">fs 文档<OutboundLink/></a></p>\n<p>fs 模块是文件操作的封装，它提供了文件的读取、写入、更名、删除、遍历目录、链接等类似标准 POSIX 函数的方式与文件系统进行交互</p>\n<p>fs 模块中所有的操作都提供了异步的和 同步的两个版本</p>\n<p>异步形式的最后一个参数都是完成时回调函数。 传给回调函数的参数取决于具体方法，但回调函数的第一个参数都会保留给异常。\n如果操作成功完成，则第一个参数会是 <code>null</code> 或 <code>undefined</code></p>\n<p>当使用同步操作时，任何异常都会被立即抛出，可以使用 <code>try/catch</code> 来处理异常，或让异常向上冒泡。</p>\n<p>注意，异步的方法不能保证执行顺序。</p>\n<p>大部分 fs 操作接受字符串、Buffer、或 使用 file: 协议的 URL 对象 作为文件路径。</p>\n<h3 id=\"常用操作\"><a class=\"header-anchor\" href=\"#常用操作\" aria-hidden=\"true\">#</a> \b常用操作</h3>\n<h4 id=\"fs-readfile\"><a class=\"header-anchor\" href=\"#fs-readfile\" aria-hidden=\"true\">#</a> fs.readFile</h4>\n<p><code>fs.readFile(filename,[encoding],[callback(err,data)])</code>\n是最简单的读取 文件的函数。</p>\n<p>它接受一个必选参数 filename，表示要读取的文件名。第二个参数 encoding 是可选的，表示文件的字符编码。callback 是回调函数</p>\n<p>如果指定了 encoding，data 是一个解析后的字符 串，否则 data 将会是以 Buffer 形式表示的二进制数据。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"fs-open\"><a class=\"header-anchor\" href=\"#fs-open\" aria-hidden=\"true\">#</a> fs.open</h4>\n<p><code>fs.open(path, flags, [mode], [callback(err, fd)])</code>\n是 POSIX open 函数的封装</p>\n<p>它接受两个必选参数，path 为文件的路径， flags 可以是以下值:</p>\n<ul>\n<li>r :以读取模式打开文件。</li>\n<li>r+ :以读写模式打开文件。</li>\n<li>w :以写入模式打开文件，如果文件不存在则创建。</li>\n<li>w+ :以读写模式打开文件，如果文件不存在则创建。</li>\n<li>a :以追加模式打开文件，如果文件不存在则创建。</li>\n<li>a+ :以读取追加模式打开文件，如果文件不存在则创建。</li>\n</ul>\n<p>mode 参数用于创建文件时给文件指定权限，默认是 0666 (读 + 写)</p>\n<h2 id=\"path-模块\"><a class=\"header-anchor\" href=\"#path-模块\" aria-hidden=\"true\">#</a> PATH 模块</h2>\n<p><a href=\"http://nodejs.cn/api/path.html\" target=\"_blank\" rel=\"noopener noreferrer\">Path 文档<OutboundLink/></a></p>\n<p><code>path</code> 模块提供了一些工具函数，用于处理文件与目录的路径。</p>\n<p><code>path</code> 模块的默认操作会根据 Node.js 应用程序运行的操作系统的不同而变化。 比如，当运行在 Windows 操作系统上时，<code>path</code> 模块会认为使用的是 Windows 风格的路径。在 Linux 系统就是 POSIX 标准\b风格路径。</p>\n<p>要想在任何操作系统上处理 POSIX 文件路径时获得一致的结果，可以使用 <code>path.posix</code>：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 在 Windows 和 Mac 下 返回一样</span>\npath<span class=\"token punctuation\">.</span>posix<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp/myfile.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回: 'myfile.html'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"常用操作-2\"><a class=\"header-anchor\" href=\"#常用操作-2\" aria-hidden=\"true\">#</a> 常用操作</h3>\n<h4 id=\"path-basename-path-ext\"><a class=\"header-anchor\" href=\"#path-basename-path-ext\" aria-hidden=\"true\">#</a> path.basename(path[, ext])</h4>\n<p>返回一个 <code>path</code> 的最后一部分</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar/baz/asdf/quux.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回: 'quux.html'</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar/baz/asdf/quux.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回: 'quux'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"path-dirname-path\"><a class=\"header-anchor\" href=\"#path-dirname-path\" aria-hidden=\"true\">#</a> path.dirname(path)</h4>\n<p>返回一个 <code>path</code> 的目录名</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar/baz/asdf/quux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回: '/foo/bar/baz/asdf'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"path-join-paths\"><a class=\"header-anchor\" href=\"#path-join-paths\" aria-hidden=\"true\">#</a> path.join([...paths])</h4>\n<p>使用平台特定的分隔符把全部给定的 <code>path</code> 片段连接到一起，并规范化生成的路径。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz/asdf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回: '/foo/bar/baz/asdf'</span>\n\npath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 抛出 'TypeError: Path must be a string. Received {}'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"path-parse-path\"><a class=\"header-anchor\" href=\"#path-parse-path\" aria-hidden=\"true\">#</a> path.parse(path)</h4>\n<p>返回一个对象，对象的属性表示 <code>path</code> 的元素。</p>\n<p>返回的对象有以下属性：</p>\n<ul>\n<li>dir <string></li>\n<li>root <string></li>\n<li>base <string></li>\n<li>name <string></li>\n<li>ext <string></li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>path<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/home/user/dir/file.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回:</span>\n<span class=\"token comment\">// { root: '/',</span>\n<span class=\"token comment\">//   dir: '/home/user/dir',</span>\n<span class=\"token comment\">//   base: 'file.txt',</span>\n<span class=\"token comment\">//   ext: '.txt',</span>\n<span class=\"token comment\">//   name: 'file' }</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"url-模块\"><a class=\"header-anchor\" href=\"#url-模块\" aria-hidden=\"true\">#</a> URL 模块</h2>\n<p><a href=\"http://nodejs.cn/api/url.html\" target=\"_blank\" rel=\"noopener noreferrer\">URL 文档<OutboundLink/></a></p>\n<p>url 模块提供了一些实用函数，用于 URL 处理与解析。</p>\n<p>URL 字符串是具有结构的字符串，包含多个意义不同的组成部分。URL 字符串可以被解析为一个 URL 对象，其属性对应于字符串的各组成部分。</p>\n<p>url 模块提供了两套 API 来处理 URL 字符串：</p>\n<ul>\n<li>一个是 Node.js 特有的 API，是旧版本的遗留；</li>\n<li>另一个则是实现了 WHATWG URL Standard 的 API ，该标准也在各种浏览器中被使用。</li>\n</ul>\n<blockquote>\n<p>新的应用程序应当使用 WHATWG API。</p>\n</blockquote>\n<p>下图中，网址 <code>'http://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</code> 上方是由遗留的 <code>url.parse()</code> 返回的对象的属性。下方的则是<code>WHATWG URL</code>对象的属性。</p>\n<p><img src=\"https://i.imgur.com/0uUzBxZ.png\" alt=\"Screen Shot 2018-07-15 at 5.11.20 PM\"></p>\n<p>利用WHATWG API解析一个URL字符串:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myURL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>通过Node.js提供的API解析一个URL:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myURL <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"whatwg-url\"><a class=\"header-anchor\" href=\"#whatwg-url\" aria-hidden=\"true\">#</a> WHATWG URL</h3>\n<p>根据 WHATWG URL 标准, 实现的 URL 类. 解析出来的 URL 对象的所有属性都是在类的原型上实现为 getter 和 setter，而不是作为对象本身的数据属性。因此，在 URL 对象的任何属性上使用 delete 关键字没有任何效果，但仍返回 true。</p>\n<h4 id=\"new-url-input-base\"><a class=\"header-anchor\" href=\"#new-url-input-base\" aria-hidden=\"true\">#</a> new URL(input[, base])</h4>\n<ul>\n<li><code>input &lt;string&gt;</code> : 要解析的输入 URL</li>\n<li><code>base &lt;string&gt; | &lt;URL&gt;</code> : 如果 <code>input</code> 是相对 URL，则为要解析的基本 URL。</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myURL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://example.org/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// https://example.org/foo</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Unicode 字符将被使用 Punycode 算法自动转换为 ASCII:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myURL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://你好你好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// https://xn--6qqa088eba/</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"url-tostring\"><a class=\"header-anchor\" href=\"#url-tostring\" aria-hidden=\"true\">#</a> url.toString()</h4>\n<p>在 URL 对象上调用 <code>toString()</code> 方法将返回序列化的 URL。返回值与 <code>url.href</code> 和 <code>url.toJSON()</code> 的相同。</p>\n<h3 id=\"legacy-url\"><a class=\"header-anchor\" href=\"#legacy-url\" aria-hidden=\"true\">#</a> Legacy URL</h3>\n<p>旧版本的 URL 对象属性可以用 delete.</p>\n<h4 id=\"url-format-urlobject\"><a class=\"header-anchor\" href=\"#url-format-urlobject\" aria-hidden=\"true\">#</a> url.format(urlObject)</h4>\n<p><code>url.format()</code> 方法返回一个从 <code>urlObject</code> 格式化后的 URL 字符串。</p>\n<h4 id=\"url-parse-urlstring-parsequerystring-slashesdenotehost\"><a class=\"header-anchor\" href=\"#url-parse-urlstring-parsequerystring-slashesdenotehost\" aria-hidden=\"true\">#</a> url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</h4>\n<p><code>url.parse()</code> 方法会解析一个 URL 字符串并返回一个 URL 对象。</p>\n<ul>\n<li><code>urlString &lt;string&gt;</code> : 要解析的 URL 字符串。</li>\n<li><code>parseQueryString &lt;boolean&gt;</code> 如果为 <code>true</code>，则 <code>query</code> 属性总会通过 querystring 模块的 <code>parse()</code> : 方法生成一个对象。 如果为 <code>false</code>，则返回的 URL 对象上的 <code>query</code> 属性会是一个未解析、未解码的字符串。 默认为 <code>false</code>。</li>\n<li><code>slashesDenoteHost &lt;boolean&gt;</code> : 如果为 <code>true</code>，则 <code>//</code> 之后至下一个 <code>/</code> 之前的字符串会被解析作为 <code>host</code>。 例如，<code>//foo/bar</code> 会被解析为 <code>{host: 'foo', pathname: '/bar'}</code> 而不是 <code>{pathname: '//foo/bar'}</code>。 默认为 <code>false</code>。</li>\n</ul>\n<h2 id=\"net-模块\"><a class=\"header-anchor\" href=\"#net-模块\" aria-hidden=\"true\">#</a> Net 模块</h2>\n<p><a href=\"http://nodejs.cn/api/net.html\" target=\"_blank\" rel=\"noopener noreferrer\">net 文档<OutboundLink/></a></p>\n<p>提供了创建基于 stream流 的 TCP 或 IPC 服务器 和 客户端 的异步网络 API。</p>\n<h3 id=\"开启-tcp-或-ipc-服务\"><a class=\"header-anchor\" href=\"#开启-tcp-或-ipc-服务\" aria-hidden=\"true\">#</a> 开启 TCP 或 IPC 服务</h3>\n<p>先看一个使用实例:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// server.js</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server connected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server disconnected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        socket<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\r\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'监听 3000 端口'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"net-server-实例事件\"><a class=\"header-anchor\" href=\"#net-server-实例事件\" aria-hidden=\"true\">#</a> net.Server 实例事件</h3>\n<p>NET 模块是继承 EventEmitter 的, 绑定了很多事件.</p>\n<h4 id=\"close-事件\"><a class=\"header-anchor\" href=\"#close-事件\" aria-hidden=\"true\">#</a> 'close' 事件</h4>\n<p>当 server 关闭的时候触发, 所有的连接结束才会触发这个事件</p>\n<h4 id=\"connection-事件\"><a class=\"header-anchor\" href=\"#connection-事件\" aria-hidden=\"true\">#</a> 'connection' 事件</h4>\n<p>当一个新的 connection 建立的时候触发, 返回 <code>&lt;net.Socket&gt;</code> 实例对象</p>\n<h4 id=\"error-事件-2\"><a class=\"header-anchor\" href=\"#error-事件-2\" aria-hidden=\"true\">#</a> 'error' 事件</h4>\n<p>当错误出现的时候触发, 'close' 事件不会在这个事件触发后继续触发 除非是手动调用</p>\n<h4 id=\"listening-事件\"><a class=\"header-anchor\" href=\"#listening-事件\" aria-hidden=\"true\">#</a> 'listening' 事件</h4>\n<p>当服务被绑定后调用 <code>server.listen()</code>.</p>\n<h3 id=\"常用操作-3\"><a class=\"header-anchor\" href=\"#常用操作-3\" aria-hidden=\"true\">#</a> 常用操作</h3>\n<h4 id=\"net-createserver-options-connectionlistener\"><a class=\"header-anchor\" href=\"#net-createserver-options-connectionlistener\" aria-hidden=\"true\">#</a> net.createServer([options][, connectionListener])</h4>\n<p>用于创建一个 TCP 或 IPC 服务, 返回 <code>&lt;net.Server&gt;</code> 对象.</p>\n<ul>\n<li><code>options &lt;Object&gt;</code> ==(以后再说)==\n<ul>\n<li><code>allowHalfOpen &lt;boolean&gt;</code> : 表示是否允许一个半开的TCP连接。 默认值: <code>false</code></li>\n<li><code>pauseOnConnect &lt;boolean&gt;</code> : 一旦来了连接，是否暂停套接字。 默认值: <code>false</code></li>\n</ul>\n</li>\n<li><code>connectionListener &lt;Function&gt;</code> : 为'connection' 事件自动设置一个监听器。</li>\n</ul>\n<h4 id=\"server-listen-port-host-backlog-callback\"><a class=\"header-anchor\" href=\"#server-listen-port-host-backlog-callback\" aria-hidden=\"true\">#</a> server.listen([port[, host[, backlog]]][, callback])</h4>\n<ul>\n<li><code>port &lt;number&gt;</code> 端口</li>\n<li><code>host &lt;string&gt;</code> 主机</li>\n<li><code>backlog &lt;number&gt; server.listen()</code> 最大连接数</li>\n<li><code>callback &lt;Function&gt; server.listen()</code> 监听函数</li>\n<li><code>Returns: &lt;net.Server&gt;</code></li>\n</ul>\n<p>为 'connections' 事件 启动一个 server 监听. 一个 <code>net.Server</code> 可以是一个 TCP 或者 一个 IPC server，这取决于它监听什么。</p>\n<h3 id=\"创建-socket-与-server-通信\"><a class=\"header-anchor\" href=\"#创建-socket-与-server-通信\" aria-hidden=\"true\">#</a> 创建 Socket 与 \bServer 通信</h3>\n<p><code>net.Socket</code> 可以被用户创建并直接与 server 通信。</p>\n<p>当一个连接被接收时，它也能被 Node.js 创建并传递给用户。通过监听在一个 <code>net.Server</code> 上的'connection' 事件触发而获得的，用户可以使用它来与客户端通信。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// client.js</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> client <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>port<span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'client connected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'world!\\r\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'client disconnected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"net-socket-实例事件\"><a class=\"header-anchor\" href=\"#net-socket-实例事件\" aria-hidden=\"true\">#</a> net.Socket 实例事件</h3>\n<h4 id=\"close-事件-2\"><a class=\"header-anchor\" href=\"#close-事件-2\" aria-hidden=\"true\">#</a> 'close' 事件</h4>\n<p>一旦 socket 完全关闭就发出该事件。</p>\n<h4 id=\"connect-事件\"><a class=\"header-anchor\" href=\"#connect-事件\" aria-hidden=\"true\">#</a> 'connect' 事件</h4>\n<p>当一个 socket 连接成功建立的时候触发该事件。</p>\n<h4 id=\"data-事件\"><a class=\"header-anchor\" href=\"#data-事件\" aria-hidden=\"true\">#</a> 'data' 事件</h4>\n<p>当接收到数据的时触发该事件。data 参数是一个 Buffer 或 String。数据编码由 <code>socket.setEncoding()</code> 设置。</p>\n<h4 id=\"drain-事件\"><a class=\"header-anchor\" href=\"#drain-事件\" aria-hidden=\"true\">#</a> 'drain' 事件</h4>\n<p>当写入缓冲区变为空时触发。可以用来做上传节流。</p>\n<h4 id=\"end-事件\"><a class=\"header-anchor\" href=\"#end-事件\" aria-hidden=\"true\">#</a> 'end' 事件</h4>\n<p>当 socket 的另一端发送一个 FIN 包的时候触发，从而结束 socket 的可读端。</p>\n<h4 id=\"error-事件-3\"><a class=\"header-anchor\" href=\"#error-事件-3\" aria-hidden=\"true\">#</a> 'error' 事件</h4>\n<p>当错误发生时触发。'close' 事件也会紧接着该事件被触发。</p>\n<h4 id=\"lookup-事件\"><a class=\"header-anchor\" href=\"#lookup-事件\" aria-hidden=\"true\">#</a> 'lookup' 事件</h4>\n<p>在找到主机之后创建连接之前触发。</p>\n<h3 id=\"常用操作-4\"><a class=\"header-anchor\" href=\"#常用操作-4\" aria-hidden=\"true\">#</a> 常用操作</h3>\n<h4 id=\"socket-connect-options-connectlistener\"><a class=\"header-anchor\" href=\"#socket-connect-options-connectlistener\" aria-hidden=\"true\">#</a> socket.connect(options[, connectListener])</h4>\n<p>在给定的套接字上启动一个连接。</p>\n<blockquote>\n<p>IP 地址加上主机上的端口号作为 TCP 连接的端点，这种端点就叫做套接字（socket）或插口。</p>\n</blockquote>\n<p>该方法是异步的。当连接建立了的时候，'connect' 事件将会被触发。如果连接过程中有问题，'error' 事件将会代替 'connect' 事件被触发，并将错误信息传递给 'error' 监听器。</p>\n<p>返回  <code>&lt;net.Socket&gt;</code> socket 自身。</p>\n<p>常用 options 有：(其余的看文档吧)</p>\n<ul>\n<li><code>port &lt;number&gt;</code> 必须。Socket 连接的端口。</li>\n<li><code>host &lt;string&gt;</code> Socket 连接的主机。默认是 'localhost'</li>\n</ul>\n<h4 id=\"net-createconnection-options-connectlistener\"><a class=\"header-anchor\" href=\"#net-createconnection-options-connectlistener\" aria-hidden=\"true\">#</a> net.createConnection(options[, connectListener])</h4>\n<p>一个用于创建 net.Socket 的工厂函数，立即使用 <code>socket.connect()</code> 初始化链接，然后返回启动连接的 net.Socket。</p>\n<p>当连接建立之后，在返回的 socket 上将触发一个 'connect' 事件。</p>\n<p><code>net.connect()</code> 是 <code>net.createConnection()</code> 的别名</p>\n<h4 id=\"socket-write-data-encoding-callback\"><a class=\"header-anchor\" href=\"#socket-write-data-encoding-callback\" aria-hidden=\"true\">#</a> socket.write(data[, encoding][, callback])</h4>\n<p>在 socket 上发送数据。第二个参数制定了字符串的编码 - 默认是 UTF8 编码。</p>\n<p>如果全部数据都成功刷新到内核的缓冲则返回 true。如果全部或部分数据在排队，则返回 false。</p>\n<p>当缓冲再次空闲的时候将触发 'drain' 事件。</p>\n<h4 id=\"socket-end-data-encoding\"><a class=\"header-anchor\" href=\"#socket-end-data-encoding\" aria-hidden=\"true\">#</a> socket.end([data][, encoding])</h4>\n<p>半关闭 socket。例如发送一个 FIN 包。服务端仍可以发送数据。</p>\n<p>Returns: <code>&lt;net.Socket&gt;</code> Socket 本身。</p>\n<p>如果指定了 data，则相当于调用 <code>socket.write(data, encoding)</code> 之后再调用 <code>socket.end()</code>。</p>\n<h2 id=\"http-模块\"><a class=\"header-anchor\" href=\"#http-模块\" aria-hidden=\"true\">#</a> HTTP 模块</h2>\n<p><a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html\" target=\"_blank\" rel=\"noopener noreferrer\">\bHTTP 文档<OutboundLink/></a></p>\n<p>在 Node 标准库提供了 http 模块, 可以让 HTTP 协议 应用起来更简易.</p>\n<p>模块中封装了一个高效的 HTTP 服务器对象 和 一个简易的 HTTP 客户端.\n<code>http.Server</code> 是一个基于事件的 HTTP 服务器.\n<code>http.request</code> 则是一个 HTTP 客户端工具，用于向 HTTP 服务器发起请求.</p>\n<h3 id=\"http-incomingmessage\"><a class=\"header-anchor\" href=\"#http-incomingmessage\" aria-hidden=\"true\">#</a> http.IncomingMessage</h3>\n<p>是 HTTP 请求的信息. 由\nhttp.Server 或 http.ClientRequest 创建，作为 request 或 response 事件的第一个参数传递. 通常简称 request 或 req.</p>\n<h4 id=\"常用属性\"><a class=\"header-anchor\" href=\"#常用属性\" aria-hidden=\"true\">#</a> 常用属性</h4>\n<ul>\n<li><code>message.headers</code> :\n请求头或响应头的对象。</li>\n<li><code>message.method</code> :\n(仅在 http.Server 返回的请求中有效。) 返回一个字符串，表示请求的方法。 该属性只读。 例如：'GET'、'DELETE'。</li>\n<li><code>message.url</code> :\n(仅在 http.Server 返回的请求中有效。) 返回请求的 URL 字符串</li>\n</ul>\n<h3 id=\"http-serverresponse\"><a class=\"header-anchor\" href=\"#http-serverresponse\" aria-hidden=\"true\">#</a> http.ServerResponse</h3>\n<p>http.ServerResponse 是返回给客户端的信息，在 HTTP 服务器内部 (http.Server) 被创建, 决定了用户最终能看到的结果。作为 request 或 response 事件的第二个参数传递. 通常简称  response 或 res.</p>\n<h4 id=\"response-writehead-statuscode-statusmessage-headers\"><a class=\"header-anchor\" href=\"#response-writehead-statuscode-statusmessage-headers\" aria-hidden=\"true\">#</a> response.writeHead(statusCode[, statusMessage][, headers])</h4>\n<p>发送一个响应头给请求。 状态码是一个三位数的 HTTP 状态码，如 404。 最后一个参数 headers 是响应头。 第二个参数 statusMessage 是可选的状态描述。</p>\n<p>该方法在消息中只能被调用一次</p>\n<h4 id=\"response-write-chunk-encoding-callback\"><a class=\"header-anchor\" href=\"#response-write-chunk-encoding-callback\" aria-hidden=\"true\">#</a> response.write(chunk[, encoding][, callback])</h4>\n<p>方法会发送一块响应主体。 它可被多次调用，以便提供连续的响应主体片段。</p>\n<p>chunk 可以是一个字符串或一个 buffer。 如果 chunk 是一个字符串，则第二个参数指定如何将它编码成一个字节流。</p>\n<p>encoding 默认为 'utf8'。 当数据块被刷新时，callback 会被调用。</p>\n<h4 id=\"response-end-data-encoding-callback\"><a class=\"header-anchor\" href=\"#response-end-data-encoding-callback\" aria-hidden=\"true\">#</a> response.end([data][, encoding][, callback])</h4>\n<p>该方法会通知服务器，所有响应头和响应主体都已被发送，即服务器将其视为已完成。 每次响应都必须调用 <code>response.end()</code> 方法。</p>\n<p>如果指定了 data，则相当于调用 <code>response.write(data, encoding)</code> 之后再调用 <code>response.end(callback)</code>。</p>\n<p>如果指定了 callback，则当响应流结束时被调用。</p>\n<h3 id=\"http-服务器\"><a class=\"header-anchor\" href=\"#http-服务器\" aria-hidden=\"true\">#</a> HTTP 服务器</h3>\n<p><a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_class_http_server\" target=\"_blank\" rel=\"noopener noreferrer\">http.Server 文档<OutboundLink/></a></p>\n<p>http.Server 是 http 模块中的 HTTP 服务器对象. 用 Node.js 做的所有基于 HTTP 协议的系统都是基于 http.Server 实现的.</p>\n<p>它提供了 一套封装级别很低的 API，仅仅是流控制和简单的消息解析，所有的高层功能都要通过它们接口来实现。</p>\n<h4 id=\"http-createserver-options-requestlistener\"><a class=\"header-anchor\" href=\"#http-createserver-options-requestlistener\" aria-hidden=\"true\">#</a> http.createServer([options][, requestListener])</h4>\n<p><code>http.createServer</code> 方法创建一个 http.Server 实例. 这个函数接受一个 HTTP 请求处理函数 (requestListner) 作为参数, 返回一个 http.Server 实例. requestListener \b作为 'request' 事件监听函数。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 引入 http 模块</span>\n<span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建实例</span>\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am Garrik'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在 3000 端口监听</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在上面的代码中, 按照 HTTP 协议编写了 响应头部. 然后编写了 响应\b体. 然后通过 <code>res.end</code> 结束并发送. 调用 <code>listen</code> 函数去监听服务器的 3000 端口. 当有客户端访问 3000 端口, 触发 request 事件, 监听函数被调用, res 作为响应, \b传递回客户端.</p>\n<h3 id=\"server-常用事件\"><a class=\"header-anchor\" href=\"#server-常用事件\" aria-hidden=\"true\">#</a> Server 常用事件</h3>\n<p>首先 http.Server 是一个<strong>基于事件</strong>的 HTTP 服务器. 所有的请求都被封装为独立的事件， 开发者只需要对它的事件编写响应函数即可实现 HTTP 服务器的所有功能。</p>\n<p>事件都继承自 EventEmitter，常用的几个有:</p>\n<ul>\n<li>\n<p><strong><code>request</code></strong>:\n当收到客户端发来的请求时, 该事件触发.\n发送两个参数 req 和 res, ，分别是 <code>http.IncomingMessage</code> 和 <code>http.ServerResponse</code> 的实例，表示请求和响应信息。</p>\n</li>\n<li>\n<p><strong><code>connection</code></strong>:\n当 TCP 连接建立时，该事件被触发，提供一个参数 socket，为 <code>net.Socket</code> 的实例。\nconnection 事件的粒度要大于 request，因为客户端在 Keep-Alive 模式下可能会在同一个连接内发送多次请求。(粒度大意思就是事件被触发频率高, 个人理解.)</p>\n</li>\n<li>\n<p><strong><code>close</code></strong>:\n当服务器关闭时，该事件被触发。注意不是在用户连接断开时。</p>\n</li>\n</ul>\n<h3 id=\"http-客户端\"><a class=\"header-anchor\" href=\"#http-客户端\" aria-hidden=\"true\">#</a> HTTP 客户端</h3>\n<p><a href=\"http://nodejs.cn/api/http.html#http_class_http_clientrequest\" target=\"_blank\" rel=\"noopener noreferrer\">http.ClientRequest 文档<OutboundLink/></a></p>\n<p>==下回再说==</p>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\" aria-hidden=\"true\">#</a> 参考</h2>\n<ul>\n<li><a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档<OutboundLink/></a></li>\n<li><a href=\"http://www.runoob.com/nodejs/nodejs-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程<OutboundLink/></a></li>\n</ul>\n</div>\n",null]}