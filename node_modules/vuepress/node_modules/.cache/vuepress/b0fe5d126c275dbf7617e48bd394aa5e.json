{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/基础知识/DOM.md?vue&type=template&id=6a48cfc4","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/基础知识/DOM.md","mtime":1545354607164},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._m(0),_c('p',[_vm._v(\"DOM（文档对象模型）是针对HTML和XML文档的一个API（应用程序编程接口）, 将文档描绘成一个层次化的节点树, 并且允许开发者去操纵这些节点.  各家浏览器按照 DOM 标准实现了这套 API, 允许 JavaScript 去操纵这些节点.\")]),_c('p',[_vm._v(\"1998年10月 DOM 1 级规范成为 W3C 的推荐标准, 之后又有 DOM 2 级, DOM 3 级标准.\")]),_c('p',[_c('a',{attrs:{\"href\":\"https://www.w3.org/DOM/DOMTR#dom1\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"DOM 标准\"),_c('OutboundLink')],1)]),_c('p',[_vm._v(\"A Web page is a document.  The Document Object Model (DOM) represents that same document so it can be manipulated.  The DOM is an object-oriented representation of the web page, which can be modified with a scripting language such as JavaScript.\")]),_vm._m(1),_c('p',[_vm._v(\"DOM 可以将任何 HTML 或 XML 文档描绘成一个由多层节点构成的结构。节点分为 12 种不同的类型，每种类型分别表示文档中不同的信息及（或）标记。节点之间的关系构成了层次, 在一个特定节点做为根节点的包含下, 所有的节点构成树形结构.\")]),_vm._m(2),_c('p',[_vm._v(\"每一段标记都可以通过树中的一个节点来表示. 共有 12 种节点类型，这些类型都继承自一个基类型。DOM1级定义了一个 Node 接口，在 JavaScript 中作为 Node 类实现, 所有节点类型都继承自 Node 类型，因此所有节点类型都共享着相同的基本属性和方法。\")]),_c('p',[_vm._v(\"每个节点都有一个 \"),_c('code',[_vm._v(\"nodeType\")]),_vm._v(\" 属性，用于表明节点的类型。节点类型由在 Node 类中定义的数值常量来表示，具体请查阅\"),_c('a',{attrs:{\"href\":\"http://www.w3school.com.cn/jsref/prop_node_nodetype.asp\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"文档\"),_c('OutboundLink')],1)]),_vm._m(3),_vm._m(4),_vm._m(5),_vm._m(6),_vm._m(7),_c('p',[_c('a',{attrs:{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document#Methods\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"MDN 文档\"),_c('OutboundLink')],1)]),_vm._m(8),_vm._m(9),_vm._m(10),_vm._m(11),_vm._m(12),_vm._m(13),_vm._m(14),_vm._m(15),_vm._m(16),_c('p',[_vm._v(\"所有这些上述信息都存在于请求的 HTTP 头部，只不过是通过这些属性让我们能够在 JavaScript 中访问它们而已\")]),_vm._m(17),_c('p',[_vm._v(\"在网页开发中, 最常见的 DOM 操作就要数取得特定的某个或某组元素的引用，然后再执行一些操作了。\\nDocument 类型为此提供了两个方法：\")]),_vm._m(18),_vm._m(19),_vm._m(20),_vm._m(21),_vm._m(22),_c('p',[_c('a',{attrs:{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"MDN 文档\"),_c('OutboundLink')],1)]),_vm._m(23),_vm._m(24),_vm._m(25),_vm._m(26),_c('p',[_vm._v(\"所有 HTML 元素都由 HTMLElement 类型表示，不是直接通过这个类型，也是通过它的子类型来表示。 HTMLElement 类型直接继承自 Element 并添加了一些属性。添加的这些属性分别对应于每个 HTML 元素中都存在的下列标准特性:\")]),_vm._m(27),_c('p',[_vm._v(\"上述这些属性都可以用来取得或修改元素对应的特性值。\")]),_vm._m(28),_c('p',[_vm._v(\"每个元素都有一或多个特性，这些特性的用途是给出相应元素或其内容的附加信息。操作特性的DOM方法主要有三个，分别是\")]),_vm._m(29),_vm._m(30),_vm._m(31),_vm._m(32),_vm._m(33),_vm._m(34),_vm._m(35),_vm._m(36),_vm._m(37),_vm._m(38),_vm._m(39),_vm._m(40),_vm._m(41),_vm._m(42),_vm._m(43),_vm._m(44),_c('p',[_vm._v(\"文本节点由 Text 类型表示，包含的是可以照字面解释的纯文本内容。\")]),_vm._m(45),_vm._m(46),_vm._m(47),_vm._m(48),_c('p',[_vm._v(\"Comment类型与Text类型继承自相同的基类\")]),_vm._m(49),_c('p',[_vm._v(\"CDATASection类型只针对基于XML的文档，表示的是CDATA区域。\")]),_vm._m(50),_vm._m(51),_vm._m(52),_vm._m(53),_vm._m(54),_vm._m(55),_c('p',[_vm._v(\"在所有节点类型中，只有 DocumentFragment 在文档中没有对应的标记。作为一个不存在的父节点, 用来 \\\"包裹\\\" 其他节点.\")]),_vm._m(56),_vm._m(57),_vm._m(58),_c('p',[_vm._v(\"元素的特性在DOM中以Attr类型来表示。尽管它们也是节点，但特性却不被认为是DOM文档树的一部分。\")])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h1',{attrs:{\"id\":\"dom\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#dom\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" DOM\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"节点层次\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#节点层次\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 节点层次\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在 HTML 中, 文档节点是每个文档的根节点。\"),_c('code',[_vm._v(\"<html>\")]),_vm._v(\"元素，我们称之为文档元素。文档元素是文档的最外层元素，文档中的其他所有元素都包含在文档元素中。每个文档只能有一个文档元素。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"文档中所有的节点之间都存在这样或那样的关系。节点间的各种关系可以用传统的家族关系来描述，相当于把文档树比喻成家谱。每个节点都有一个 \"),_c('code',[_vm._v(\"childNodes\")]),_vm._v(\" 属性，其中保存着一个 NodeList 对象。NodeList 是一种类数组对象，用于保存一组有序的节点, 可以通过 \"),_c('code',[_vm._v(\"[]\")]),_vm._v(\" 语法来访问 NodeList 的值. 但注意它并不是 Array 的实例。NodeList 对象是基于 DOM 结构动态执行查询的结果，因此 DOM 结构的变化能够自动反映在 NodeList 对象中。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"每个节点都有一个 \"),_c('code',[_vm._v(\"parentNode\")]),_vm._v(\" 属性，该属性指向文档树中的父节点。包含在 \"),_c('code',[_vm._v(\"childNodes\")]),_vm._v(\" 列表中的所有节点都具有相同的父节点，因此它们的 \"),_c('code',[_vm._v(\"parentNode\")]),_vm._v(\" 属性都指向同一个节点。包含在 \"),_c('code',[_vm._v(\"childNodes\")]),_vm._v(\" 列表中的每个节点相互之间都是同胞节点。通过使用列表中每个节点的 \"),_c('code',[_vm._v(\"previousSibling\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"nextSibling\")]),_vm._v(\" 属性，可以访问同一列表中的其他节点。父节点的 \"),_c('code',[_vm._v(\"firstChild\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"lastChild\")]),_vm._v(\" 属性分别指向其 \"),_c('code',[_vm._v(\"childNodes\")]),_vm._v(\" 列表中的第一个和最后一个节点。所有节点都有的最后一个属性是 \"),_c('code',[_vm._v(\"ownerDocument\")]),_vm._v(\" ，该属性指向表示整个文档的文档节点。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"danger custom-block\"},[_c('p',{staticClass:\"custom-block-title\"},[_vm._v(\"WARNING\")]),_c('p',[_vm._v(\"并不是每种节点都有子节点。本章后面将会讨论不同节点类型之间的差异!\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"节点类型\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#节点类型\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 节点类型\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"document-类型\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#document-类型\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Document 类型\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"nodeType\")]),_vm._v(\" 的值为 9；\")]),_c('li',[_c('code',[_vm._v(\"nodeName\")]),_vm._v(\" 的值为 \\\"#document\\\"；\")]),_c('li',[_c('code',[_vm._v(\"nodeValue\")]),_vm._v(\" 的值为 \"),_c('code',[_vm._v(\"null\")]),_vm._v(\"；\")]),_c('li',[_c('code',[_vm._v(\"parentNode\")]),_vm._v(\" 的值为 \"),_c('code',[_vm._v(\"null\")]),_vm._v(\"；\")]),_c('li',[_c('code',[_vm._v(\"ownerDocument\")]),_vm._v(\" 的值为 \"),_c('code',[_vm._v(\"null\")]),_vm._v(\"；\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"JavaScript通过 Document 类型表示文档。在浏览器中，\"),_c('code',[_vm._v(\"document\")]),_vm._v(\" 对象是 \"),_c('code',[_vm._v(\"HTMLDocument\")]),_vm._v(\"（继承自\"),_c('code',[_vm._v(\"Document\")]),_vm._v(\"类型）的一个实例.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"文档的子节点\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#文档的子节点\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 文档的子节点\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"DOM 标准规定 Document 节点的子节点可以是 DocumentType、Element、ProcessingInstruction 或 Comment.  其内置的 \"),_c('code',[_vm._v(\"documentElement\")]),_vm._v(\" 属性始终指向 HTML 页面中的 \"),_c('code',[_vm._v(\"<html>\")]),_vm._v(\" 元素。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"作为 HTMLDocument 的实例，\"),_c('code',[_vm._v(\"document\")]),_vm._v(\" 对象还有一个 \"),_c('code',[_vm._v(\"body\")]),_vm._v(\" 属性，直接指向 \"),_c('code',[_vm._v(\"<body>\")]),_vm._v(\" 元素\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"document.doctype\")]),_vm._v(\" 返回当前文档的文档类型定义, 通常将 \"),_c('code',[_vm._v(\"<!DOCTYPE>\")]),_vm._v(\" 标签看成一个与文档其他部分不同的实体\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"文档信息\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#文档信息\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 文档信息\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"作为 HTMLDocument 的一个实例，\"),_c('code',[_vm._v(\"document\")]),_vm._v(\" 对象还有一些标准的 Document 对象所没有的属性。这些属性提供了 \"),_c('code',[_vm._v(\"document\")]),_vm._v(\" 对象所表现的网页的一些信息:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"title\")]),_vm._v(\": 包含着 \"),_c('code',[_vm._v(\"<title>\")]),_vm._v(\" 元素中的文本\")]),_c('li',[_c('code',[_vm._v(\"URL\")]),_vm._v(\": 包含页面完整的URL（即地址栏中显示的URL）\")]),_c('li',[_c('code',[_vm._v(\"domain\")]),_vm._v(\": 页面的域名\")]),_c('li',[_c('code',[_vm._v(\"referrer\")]),_vm._v(\": 保存着链接到当前页面的那个页面的 URL\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"查找元素\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#查找元素\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 查找元素\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"getElementById()\")]),_vm._v(\": 接收取得的元素的 ID。如果找到相应的元素则返回该元素\")]),_c('li',[_c('code',[_vm._v(\"getElementsByTagName()\")]),_vm._v(\": 接受一要取得元素的标签名，而返回的是包含零或多个元素的 NodeList, 在HTML文档中，这个方法会返回一个 HTMLCollection 对象\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"HTMLCollection 对象中的项可以使用 \"),_c('code',[_vm._v(\"[]\")]),_vm._v(\" 语法来取得, 还有一个方法，叫做 \"),_c('code',[_vm._v(\"namedItem()\")]),_vm._v(\"，使用这个方法可以通过元素的 \"),_c('code',[_vm._v(\"name\")]),_vm._v(\" 特性取得集合中的项。对命名的项也可以使用方括号语法来访问, 如下面代码:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-html extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-html\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token tag\"}},[_c('span',{attrs:{\"class\":\"token tag\"}},[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"<\")]),_vm._v(\"img\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token attr-name\"}},[_vm._v(\"src\")]),_c('span',{attrs:{\"class\":\"token attr-value\"}},[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"=\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\"\")]),_vm._v(\"myimage.gif\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\"\")])]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token attr-name\"}},[_vm._v(\"name\")]),_c('span',{attrs:{\"class\":\"token attr-value\"}},[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"=\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\"\")]),_vm._v(\"myImage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\"\")])]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\">\")])]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" images \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" document\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"getElementsByTagName\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"img\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" myImage \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" images\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"namedItem\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"myImage\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 或者\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" myImage \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" images\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"myImage\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"element-类型\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#element-类型\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Element 类型\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"nodeType\")]),_vm._v(\" 的值为 1；\")]),_c('li',[_c('code',[_vm._v(\"nodeName\")]),_vm._v(\" 的值为元素的标签名；\")]),_c('li',[_c('code',[_vm._v(\"nodeValue\")]),_vm._v(\" 的值为 \"),_c('code',[_vm._v(\"null\")]),_vm._v(\"；\")]),_c('li',[_c('code',[_vm._v(\"parentNode\")]),_vm._v(\" 的值为 Document 或 Element；\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"Element\")]),_vm._v(\" 类型用于表现XML或HTML元素，提供了对元素标签名、子节点及特性的访问。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"要访问元素的标签名，可以使用 \"),_c('code',[_vm._v(\"nodeName\")]),_vm._v(\" 属性，也可以使用 \"),_c('code',[_vm._v(\"tagName\")]),_vm._v(\" 属性, 在HTML中，标签名始终都以全部大写表示；比如一个 \"),_c('code',[_vm._v(\"<div>\")]),_vm._v(\" 元素的 \"),_c('code',[_vm._v(\"tagName\")]),_vm._v(\" 为 \\\"DIV\\\"\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"html元素\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#html元素\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" HTML元素\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"id\")]),_vm._v(\"，元素在文档中的唯一标识符。\")]),_c('li',[_c('code',[_vm._v(\"title\")]),_vm._v(\"，有关元素的附加说明信息，一般通过工具提示条显示出来。\")]),_c('li',[_c('code',[_vm._v(\"classNam\")]),_vm._v(\"e，与元素的 \"),_c('code',[_vm._v(\"class\")]),_vm._v(\" 特性对应，即为元素指定的CSS类。没有将这个属性命名为class，是因为 class 是 ECMAScript 的保留字\")]),_c('li',[_c('code',[_vm._v(\"lang\")]),_vm._v(\"，元素内容的语言代码，很少使用。\")]),_c('li',[_c('code',[_vm._v(\"dir\")]),_vm._v(\"，语言的方向，值为\\\"ltr\\\"（left-to-right，从左至右）或\\\"rtl\\\"（right-to-left，从右至左），也很少使用。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"取得特性\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#取得特性\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 取得特性\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"getAttribute()\")])]),_c('li',[_c('code',[_vm._v(\"setAttribute()\")]),_vm._v(\": 接受两个参数：要设置的特性名 和 值\")]),_c('li',[_c('code',[_vm._v(\"removeAttribute()\")]),_vm._v(\": 彻底删除元素的特性。调用这个方法不仅会清除特性的值，而且也会从元素中完全删除特性\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"传递给 \"),_c('code',[_vm._v(\"getAttribute()\")]),_vm._v(\" 的特性名与实际的特性名相同。因此要想得到 \"),_c('code',[_vm._v(\"class\")]),_vm._v(\" 特性值，应该传入\\\"class\\\"而不是\\\"className\\\"\\n通过 \"),_c('code',[_vm._v(\"getAttribute()\")]),_vm._v(\" 方法也可以取得自定义特性, 根据HTML5规范，自定义特性应该加上 \"),_c('code',[_vm._v(\"data-\")]),_vm._v(\" 前缀以便验证。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-html extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-html\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token tag\"}},[_c('span',{attrs:{\"class\":\"token tag\"}},[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"<\")]),_vm._v(\"div\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token attr-name\"}},[_vm._v(\"id\")]),_c('span',{attrs:{\"class\":\"token attr-value\"}},[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"=\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\"\")]),_vm._v(\"myDiv\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\"\")])]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token attr-name\"}},[_vm._v(\"my_special_attribute\")]),_c('span',{attrs:{\"class\":\"token attr-value\"}},[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"=\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\"\")]),_vm._v(\"hello!\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"\\\"\")])]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\">\")])]),_c('span',{attrs:{\"class\":\"token tag\"}},[_c('span',{attrs:{\"class\":\"token tag\"}},[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"</\")]),_vm._v(\"div\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\">\")])]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"var\")]),_vm._v(\" value \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" div\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"getAttribute\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"my_special_attribute\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"任何元素的所有公认的（非自定义的）特性，也都可以通过 DOM 元素本身的属性来访问。有两类特殊的特性，它们虽然有对应的属性名，但属性的值与通过 \"),_c('code',[_vm._v(\"getAttribute()\")]),_vm._v(\" 返回的值并不相同。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"style\")]),_vm._v(\", 用于通过CSS为元素指定样式。在通过\"),_c('code',[_vm._v(\"getAttribute()\")]),_vm._v(\"访问时，返回的\"),_c('code',[_vm._v(\"style\")]),_vm._v(\"特性值中包含的是CSS文本，而通过属性来访问它则会返回一个对象。\")]),_c('li',[_vm._v(\"事件处理程序, 例如\"),_c('code',[_vm._v(\"onclick\")]),_vm._v(\".  通过\"),_c('code',[_vm._v(\"getAttribute()\")]),_vm._v(\"访问，则会返回相应代码的字符串。而在访问\"),_c('code',[_vm._v(\"onclick\")]),_vm._v(\"属性时，则会返回一个JavaScript函数\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"由于存在这些差别，在通过 JavaScript 以编程方式操作 DOM 时，开发人员经常不使用 \"),_c('code',[_vm._v(\"getAttribute()\")]),_vm._v(\"，而是只使用对象的属性。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"attributes-属性\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#attributes-属性\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_c('code',[_vm._v(\"attributes\")]),_vm._v(\" 属性\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"attributes\")]),_vm._v(\" 属性中包含一个 NamedNodeMap，与 NodeList 类似，也是一个“动态”的集合。元素的每一个特性都由一个 Attr 节点表示, 每个节点都保存在 NamedNodeMap 对象中。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"attributes\")]),_vm._v(\" 属性中包含一系列节点，每个节点的 \"),_c('code',[_vm._v(\"nodeName\")]),_vm._v(\" 就是特性的名称，而节点的 \"),_c('code',[_vm._v(\"nodeValue\")]),_vm._v(\" 就是特性的值。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"一般来说，由于前面介绍的 \"),_c('code',[_vm._v(\"attributes\")]),_vm._v(\" 的方法不够方便，因此开发人员更多的会使用\"),_c('code',[_vm._v(\"getAttribute()\")]),_vm._v(\"、\"),_c('code',[_vm._v(\"removeAttribute()\")]),_vm._v(\"和\"),_c('code',[_vm._v(\"setAttribute()\")]),_vm._v(\"方法。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"创建元素\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#创建元素\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 创建元素\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用\"),_c('code',[_vm._v(\"document.createElement()\")]),_vm._v(\"方法可以创建新元素。这个方法只接受一个参数，即要创建元素的标签名。这个标签名在HTML文档中不区分大小写\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"要把新元素添加到文档树，可以使用\"),_c('code',[_vm._v(\"appendChild()\")]),_vm._v(\"、\"),_c('code',[_vm._v(\"insertBefore()\")]),_vm._v(\"或\"),_c('code',[_vm._v(\"replaceChild()\")]),_vm._v(\"方法。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"text-类型\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#text-类型\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Text 类型\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"nodeType\")]),_vm._v(\" 的值为 3；\")]),_c('li',[_c('code',[_vm._v(\"nodeName\")]),_vm._v(\" 的值为\\\"#text\\\"；\")]),_c('li',[_c('code',[_vm._v(\"nodeValue\")]),_vm._v(\" 的值为节点所包含的文本；\")]),_c('li',[_c('code',[_vm._v(\"parentNode\")]),_vm._v(\" 是一个 Element；\")]),_c('li',[_vm._v(\"没有子节点。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"可以通过 \"),_c('code',[_vm._v(\"nodeValue\")]),_vm._v(\" 属性或 \"),_c('code',[_vm._v(\"data\")]),_vm._v(\" 属性访问Text节点中包含的文本, 使用下列方法可以操作节点中的文本。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"appendData(text)\")]),_vm._v(\"：将text添加到节点的末尾。\")]),_c('li',[_c('code',[_vm._v(\"deleteData(offset, count)\")]),_vm._v(\"：从offset指定的位置开始删除count个字符。\")]),_c('li',[_c('code',[_vm._v(\"insertData(offset, text)\")]),_vm._v(\"：在offset指定的位置插入text。\")]),_c('li',[_c('code',[_vm._v(\"replaceData(offset, count, text)\")]),_vm._v(\"：用text替换从offset指定的位置开始到offset+ count为止处的文本。\")]),_c('li',[_c('code',[_vm._v(\"splitText(offset)\")]),_vm._v(\"：从offset指定的位置将当前文本节点分成两个文本节点。\")]),_c('li',[_c('code',[_vm._v(\"substringData(offset, count)\")]),_vm._v(\"：提取从offset指定的位置开始到offset+count为止处的字符串。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"commnet-类型\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#commnet-类型\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Commnet 类型\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"nodeType\")]),_vm._v(\" 的值为 8；\")]),_c('li',[_c('code',[_vm._v(\"nodeName\")]),_vm._v(\" 的值为\\\"#comment\\\"；\")]),_c('li',[_c('code',[_vm._v(\"nodeValue\")]),_vm._v(\" 的值为注释的内容；\")]),_c('li',[_c('code',[_vm._v(\"parentNode\")]),_vm._v(\" 可能是Document或Element；\")]),_c('li',[_vm._v(\"没有子节点。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"cdatasection-类型\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#cdatasection-类型\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" CDATASection 类型\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"documenttype-类型\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#documenttype-类型\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" DocumentType 类型\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"nodeType\")]),_vm._v(\" 的值为 10；\")]),_c('li',[_c('code',[_vm._v(\"nodeName\")]),_vm._v(\" 的值为doctype的名称；\")]),_c('li',[_c('code',[_vm._v(\"nodeValue\")]),_vm._v(\" 的值 \"),_c('code',[_vm._v(\"null\")])]),_c('li',[_c('code',[_vm._v(\"parentNode\")]),_vm._v(\" 是 Document\")]),_c('li',[_vm._v(\"没有子节点。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"DocumentType包含着与文档的 \"),_c('code',[_vm._v(\"doctype\")]),_vm._v(\" 有关的所有信息，它具有下列特征：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在DOM1级中，DocumentType 对象不能动态创建，而只能通过解析文档代码的方式来创建。支持它的浏览器会把 DocumentType 对象保存在 \"),_c('code',[_vm._v(\"document.doctype\")]),_vm._v(\" 中\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"documentfragment-类型\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#documentfragment-类型\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" DocumentFragment 类型\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"nodeType\")]),_vm._v(\" 的值为 11；\")]),_c('li',[_c('code',[_vm._v(\"nodeName\")]),_vm._v(\" 的值为\\\"#document-fragment\\\"；\")]),_c('li',[_c('code',[_vm._v(\"nodeValue\")]),_vm._v(\" 的值 \"),_c('code',[_vm._v(\"null\")])]),_c('li',[_c('code',[_vm._v(\"parentNode\")]),_vm._v(\" 是 \"),_c('code',[_vm._v(\"null\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"document.createDocumentFragment()\")]),_vm._v(\" 创建.  在将文档片段作为添加到文档树时，实际上只会将文档片段的所有子节点添加到相应位置上；文档片段本身永远不会成为文档树的一部分。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"attr-类型\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#attr-类型\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Attr 类型\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"nodeType\")]),_vm._v(\" 的值为 2；\")]),_c('li',[_c('code',[_vm._v(\"nodeName\")]),_vm._v(\" 的值是特性的名称；\")]),_c('li',[_c('code',[_vm._v(\"nodeValue\")]),_vm._v(\" 的值是特性的值；\")]),_c('li',[_c('code',[_vm._v(\"parentNode\")]),_vm._v(\" 是 \"),_c('code',[_vm._v(\"null\")])])])}]\n\nexport { render, staticRenderFns }"]}