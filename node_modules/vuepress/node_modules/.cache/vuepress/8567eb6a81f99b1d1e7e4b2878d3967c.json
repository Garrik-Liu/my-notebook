{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/javascript/基础知识/对象.md?vue&type=template&id=da3a6a12","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/javascript/基础知识/对象.md","mtime":1533480483718},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"对象\\\"><a href=\\\"#对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 对象</h1><p>ECMA-262 把对象定义为：“无序属性的集合，其属性可以包含基本值、对象或者函数。” 对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。每个对象都是基于一个引用类型创建的</p><p>对象创建方法可以有:</p><p>使用 <code>new</code> 操作符后跟一个构造函数来创建:</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\nperson<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;Nicholas&quot;</span><span class=\\\"token punctuation\\\">;</span>\\nperson<span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">29</span><span class=\\\"token punctuation\\\">;</span> \\nperson<span class=\\\"token punctuation\\\">.</span>job <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;Software Engineer&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n\\nperson<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">sayName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>使用对象字面量创建:</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;Nicholas&quot;</span><span class=\\\"token punctuation\\\">,</span> \\n    age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">29</span><span class=\\\"token punctuation\\\">,</span>\\n    job<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;Software Engineer&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    sayName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h2 id=\\\"属性类型\\\"><a href=\\\"#属性类型\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性类型</h2><p>JS 定义只有内部才用的特性（attribute），描述了属性（property）的各种特征。(特性用来描述属性) 这些特性是为了实现 JavaScript 引擎用的，因此在 JavaScript 中不能直接访问它们。为了表示特性是内部值，特性放在两对儿方括号中 <code>[[]]</code>，例如[[Enumerable]]</p><p>ECMAScript中有两种属性：数据属性 和 访问器属性。</p><h3 id=\\\"数据属性\\\"><a href=\\\"#数据属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数据属性</h3><p>数据属性包含一个数据值的位置。在这个位置可以读取和写入值。数据属性有 4 个描述其行为的特性。</p><ul><li><p><code>[[Configurable]]</code>：表示能否通过 <code>delete</code> 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 <code>true</code>。</p></li><li><p><code>[[Enumerable]]</code>：表示能否通过 <code>for-in</code> 循环返回 (遍历) 属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 <code>true</code>。</p></li><li><p><code>[[Writable]]</code>：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为 <code>true</code>。</p></li><li><p><code>[[Value]]</code>：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为 <code>undefined</code>。</p></li></ul><p>要修改属性默认的特性，必须使用 <code>Object.defineProperty()</code> 方法. 这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中，描述符（descriptor）对象的属性必须是：<code>configurable</code>、<code>enumerable</code>、<code>writable</code> 和 <code>value</code>。设置其中的一或多个值，可以修改对应的特性值。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nperson<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;Greg&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\">//&quot;Greg&quot;</span>\\n\\n<span class=\\\"token comment\\\">// name 属性值改成 &quot;Nicholas&quot;, 并且设置为不可修改属性值</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    writable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;Nicholas&quot;</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\">//&quot;Nicholas&quot;</span>\\nperson<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;Greg&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\">//&quot;Nicholas&quot;</span>\\n</code></pre></div><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    configurable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;Nicholas&quot;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//抛出错误</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    configurable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;Nicholas&quot;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>一旦把属性定义为不可配置 <code>configurable: false</code> 的，就不能再把它变回可配置了。此时，再调用 <code>Object.defineProperty()</code> 方法修改除 <code>writable</code> 之外的特性，都会导致错误.</p><p>在调用<code>Object.defineProperty()</code>方法时，如果不指定，<code>configurable</code>、<code>enumerable</code> 和 <code>writable</code> 特性的默认值都是 <code>false</code>。</p><h3 id=\\\"访问器属性\\\"><a href=\\\"#访问器属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 访问器属性</h3><p>访问器属性不包含数据值；它们包含一对 <code>getter</code> 和 <code>setter</code> 函数（不是必需的）</p><ul><li>在读取访问器属性时，会调用 <code>getter</code> 函数，这个函数负责返回有效的值；</li><li>在写入访问器属性时，会调用 <code>setter</code> 函数并传入新值，这个函数负责决定如何处理数据。</li></ul><p>访问器属性有如下4个特性。</p><ul><li><p><code>[[Configurable]]</code>：表示能否通过 <code>delete</code> 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为 <code>true</code>。</p></li><li><p><code>[[Enumerable]]</code>：表示能否通过 <code>for-in</code> 循环返回属性。对于直接在对象上定义的属性，这个特性的默认值为 <code>true</code>。</p></li><li><p><code>[[Get]]</code>：在读取属性时调用的函数。默认值为 <code>undefined</code>。</p></li><li><p><code>[[Set]]</code>：在写入属性时调用的函数。默认值为 <code>undefined</code>。</p></li></ul><p>访问器属性不能直接定义，必须使用 <code>Object.defineProperty()</code> 来定义。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> book <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 加 下划线 (&quot;_&quot;) 表示只能通过对象方法访问的属性</span>\\n    _year<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2004</span><span class=\\\"token punctuation\\\">,</span> \\n    edition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>book<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;year&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_year<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>newValue <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">2004</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_year <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>edition <span class=\\\"token operator\\\">+=</span> newValue <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">2004</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nbook<span class=\\\"token punctuation\\\">.</span>year <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2005</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>book<span class=\\\"token punctuation\\\">.</span>edition<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">//2</span>\\n</code></pre></div><p>使用访问器属性，设置一个属性的值会导致其他属性发生变化。</p><p>只指定 <code>getter</code> 意味着属性是不能写，尝试写入属性会被忽略。在严格模式下，尝试写入只指定了 <code>getter</code> 函数的属性会抛出错误。类似地，只指定 <code>setter</code> 函数的属性也不能读，否则在非严格模式下会返回 <code>undefined</code>，而在严格模式下会抛出错误。</p><h3 id=\\\"修改多个属性的特性\\\"><a href=\\\"#修改多个属性的特性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 修改多个属性的特性</h3><p>使用 <code>Object.defineProperties()</code> 方法, 可以通过一个描述符定义多个属性的特性\\n方法接收两个对象参数：</p><ul><li>第一个对象是要添加和修改其属性的对象</li><li>第二个对象的属性与第一个对象中要添加或修改的属性一一对应</li></ul><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> book <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 代码在 book 对象上定义了两个数据属性（_year和edition）和一个访问器属性（year）</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperties</span><span class=\\\"token punctuation\\\">(</span>book<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    _year<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        writable<span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n        value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2004</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    edition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        writable<span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n        value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    year<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_year<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n        <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>newValue <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">2004</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_year <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>edition <span class=\\\"token operator\\\">+=</span> newValue <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">2004</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"读取属性的特性\\\"><a href=\\\"#读取属性的特性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 读取属性的特性</h3><p><code>Object.getOwnPropertyDescriptor()</code> 方法，可以取得给定属性的描述符, 方法接收两个参数：属性所在的对象 和 要读取其描述符的属性名称。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> book <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperties</span><span class=\\\"token punctuation\\\">(</span>book<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    _year<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> \\n        value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2004</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    edition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    year<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_year<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n        <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>newValue <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">2004</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_year <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>edition <span class=\\\"token operator\\\">+=</span> newValue <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">2004</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> descriptor <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOwnPropertyDescriptor</span><span class=\\\"token punctuation\\\">(</span>book<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;_year&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>descriptor<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>         <span class=\\\"token comment\\\">//2004</span>\\n<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>descriptor<span class=\\\"token punctuation\\\">.</span>configurable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//false</span>\\n<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> descriptor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\">//&quot;undefined&quot;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> descriptor <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOwnPropertyDescriptor</span><span class=\\\"token punctuation\\\">(</span>book<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;year&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>descriptor<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>        <span class=\\\"token comment\\\">//undefined</span>\\n<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>descriptor<span class=\\\"token punctuation\\\">.</span>enumerable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">//false</span>\\n<span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> descriptor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">//&quot;function&quot;</span>\\n</code></pre></div><h2 id=\\\"创建对象\\\"><a href=\\\"#创建对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 创建对象</h2><h2 id=\\\"继承\\\"><a href=\\\"#继承\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 继承</h2>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}