{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/浏览器/基础知识.md?vue&type=template&id=5071ea8a","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/浏览器/基础知识.md","mtime":1539748427188},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"基础知识\"><a class=\"header-anchor\" href=\"#基础知识\" aria-hidden=\"true\">#</a> 基础知识</h1>\n<h2 id=\"浏览器结构\"><a class=\"header-anchor\" href=\"#浏览器结构\" aria-hidden=\"true\">#</a> 浏览器结构</h2>\n<p>🤔  浏览器从输入一个网址到展现页面内容这个过程里, 发生了什么?</p>\n<ul>\n<li>在用户输入一个网址之后, 浏览器开启一个线程处理这个请求.</li>\n<li></li>\n<li>用 DNS 解析地址, 获取 IP 地址.  之后与目标服务器建立连接.</li>\n<li>进行 HTTP 协议对话, 浏览器向服务器发送请求报文</li>\n<li>Web 服务器处理请求</li>\n<li>服务器向浏览器返回响应报文</li>\n<li>浏览器开始下载 HTML 文档</li>\n<li>浏览器解析 HTML 文档结构, 建立 DOM 树, 并下载 HTML 文件内标记请求的 MIME 类型文件</li>\n<li>页面解析渲染 DOM, CSS 根据规则解析, 并结合 DOM 树进行页面内容布局和绘制.  JavaScript 根据 DOM API 操作 DOM, 执行相关的事件绑定函数.</li>\n</ul>\n<p>一般认为, 浏览器由七部分构成:</p>\n<ul>\n<li>『 <strong>用户界面</strong> 』: 可见的软件界面. 地址栏, 书签, 前进后退, 等用户可见, 可操作的界面.</li>\n<li>『 <strong>网络模块</strong> 』: 用以开启网络线程, 发送请求或下载资源的模块</li>\n<li>『 <strong>浏览器引擎</strong> 』: 用以在用户界面和渲染引擎之间传送指令, 或者在客户端本地缓存中读取数据</li>\n<li>『 <strong>渲染引擎</strong> 』: 解析 DOM 文档 和 CSS 规则, 让样式显示在页面中.  平时所说的 &quot;浏览器内核&quot; 就是指渲染引擎</li>\n<li>『 <strong>UI 后端</strong> 』: 绘制基本的浏览器窗口内控件 ❓</li>\n<li>『 <strong>JavaScript 解释器</strong> 』: 用以解释和执行 JavaScript 代码, 例如 V8 引擎</li>\n<li>『 <strong>持久化数据储存</strong> 』: cookie, localStorage 等客户端储存技术</li>\n</ul>\n<p><img src=\"https://i.imgur.com/M67aWS3.png\" alt=\"Screen Shot 2018-10-16 at 11.00.48 PM\"></p>\n<h2 id=\"渲染引擎简介\"><a class=\"header-anchor\" href=\"#渲染引擎简介\" aria-hidden=\"true\">#</a> 渲染引擎简介</h2>\n<p>渲染引擎在浏览器中主要用于解析 HTML 文档 和 CSS 文档.  将 CSS 样式应用到 HTML 元素上.  并将 HTML 渲染到浏览器窗口以显示具体内容.</p>\n<p>具体步骤:</p>\n<ol>\n<li>解析 HTML 构建 DOM 树</li>\n<li>构建渲染树</li>\n<li>渲染树布局阶段</li>\n<li>绘制渲染树</li>\n</ol>\n<p>渲染引擎会先将 HTML 文档解析成由多个 &quot;DOM 元素对象节点&quot; 构成的具有上下级关系的 &quot;DOM 树&quot; 结构.</p>\n<p>然后根据 DOM 树的节点顺序提取应用于对应节点的 CSS 规则, 计算 DOM 树的样式数据, 生成一个带 样式描述的 &quot;DOM 渲染树&quot;</p>\n<p>之后根据 DOM 渲染树的节点在页面中的尺寸和位置, 将各个节点放置在页面的对应位置上.  这个阶段主要是元素的 &quot;布局属性&quot; (<code>margin</code>, <code>padding</code>, <code>position</code>) 生效.</p>\n<p>最后再将 DOM 渲染树各个节点的颜色, 字体大小, 等等样式应用于上.  这个阶段主要是元素的 &quot;显示样式&quot; 生效.</p>\n<p><img src=\"https://i.imgur.com/dzV6BCA.png\" alt=\"Screen Shot 2018-10-16 at 11.00.37 PM\"></p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">提示</p>\n<p>页面生成后, 如果页面元素位置发生改变, 就要重新从 &quot;布局阶段&quot; 开始渲染.  这个叫做 『 页面重排 』\n从 &quot;绘制阶段&quot; 开始, 也就是只有 &quot;显示样式&quot; 改变, 叫做 『 页面重绘 』</p>\n<p>渲染引擎对 DOM 树的解析和输出是逐行进行的.  页面中的 <code>&lt;script&gt;</code> 标签会阻塞渲染</p>\n</div>\n<h2 id=\"数据持久化储存技术\"><a class=\"header-anchor\" href=\"#数据持久化储存技术\" aria-hidden=\"true\">#</a> 数据持久化储存技术</h2>\n<p>因为是应用在浏览器上的, 也可以简称为 『 浏览器缓存 』</p>\n<p>&quot;浏览器缓存&quot; 是用于本地保存数据并进行快速读取以避免重复资源请求的传输机制的统称.</p>\n<p>常用的缓存机制以下 9 种:</p>\n<ul>\n<li>『 <strong>HTTP 文件缓存</strong> 』: 基于 HTTP 协议的文件缓存机制.  根据 HTTP 响应头信息来判断是否从服务器获取文件, 还是读取本地缓存</li>\n<li>『 <strong>LocalStorage</strong> 』: HTML5 的本地缓存方案, 用于\b保存体积较大的数据</li>\n<li>『 <strong>SessionStorage</strong> 』: 和 LocalStorage 功能类似, 但是在浏览器关闭时 SessionStorage 会自动清空</li>\n<li>『 <strong>indexDB</strong> 』: 和 WEB SQL 类似</li>\n<li>『 <strong>WEB SQL</strong> 』: 用以储存较大量数据的缓存机制</li>\n<li>『 <strong>Cookie</strong> 』: Cookie 信息会随 HTTP 请求发到服务器</li>\n<li>『 <strong>CacheStorage</strong> 』: 在未来可代替 Application Cache</li>\n<li>『 <strong>Application Cache</strong> 』: 用于缓存静态资源文件</li>\n<li>『 <strong>Flash 缓存</strong> 』: 没啥用</li>\n</ul>\n<p>现如今, \b还是 HTTP 缓存, localStorage, Cookie 更常用, 其他的了解就好.</p>\n</div>\n",null]}