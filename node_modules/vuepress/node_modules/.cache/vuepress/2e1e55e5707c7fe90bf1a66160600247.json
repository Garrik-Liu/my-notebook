{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/NodeJs/基础知识/EJS介绍.md?vue&type=template&id=69202ba9","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/NodeJs/基础知识/EJS介绍.md","mtime":1532190285893},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"ejs-介绍\\\"><a href=\\\"#ejs-介绍\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EJS 介绍</h1>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://ejs.bootcss.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"EJS 文档\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<p>EJS 是一套的模板语言, 是 &quot;Embedded JavaScript&quot; 的缩写, 通过在 HTML 文件内嵌入 JavaScript 代码来进行 HTML 模板渲染。(用 JS 生成 HTML)</p><p>因为 EJS 支持直接在标签内书写简单、直白的 JavaScript 代码。所以可以让你在不破坏 HTML 文档结构的情况下, 使用 JS.  显著减少学习成本.</p><h2 id=\\\"后端用法\\\"><a href=\\\"#后端用法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 后端用法</h2><p>先安装:</p><div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code>$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> ejs\\n</code></pre></div><p>在服务器代码上:</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 三种使用方法:</span>\\n\\n<span class=\\\"token comment\\\">// data: 要传进去的数据, str: HTML 字符串</span>\\n\\n<span class=\\\"token comment\\\">// 1. </span>\\n<span class=\\\"token keyword\\\">let</span> template <span class=\\\"token operator\\\">=</span> ejs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compile</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">template</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 2.</span>\\nejs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 3. filename 是文件名(路径), </span>\\nejs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderFile</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>\\b\\n例子:</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> ejs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ejs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;Hello World&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\bejs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'views/index.ejs'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    msg<span class=\\\"token punctuation\\\">:</span> data\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'text/html'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h3 id=\\\"配置选项-option\\\"><a href=\\\"#配置选项-option\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 配置选项 option:</h3><ul><li><code>cache</code> 缓存编译后的函数，需要提供 <code>filename</code></li><li><code>filename</code> 被 <code>cache</code> 参数用做键值，同时也用于 include 语句</li><li><code>context</code> 函数执行时的上下文环境</li><li><code>compileDebug</code> 当为 <code>false</code> 时不编译调试语句</li><li><code>client</code> 返回独立的编译后的函数</li><li><code>delimiter</code> 放在角括号中的字符，用于标记标签的开与闭</li><li><code>debug</code> 将生成的函数体输出</li><li><code>_with</code> 是否使用 <code>with() {}</code> 结构。如果为 <code>false</code>，所有局部数据将存储在 <code>locals</code> 对象上。</li><li><code>localsName</code> 如果不使用 <code>with</code><code>，localsName</code> 将作为存储局部变量的对象的名称。默认名称是 <code>locals</code></li><li><code>rmWhitespace</code> 删除所有可安全删除的空白字符，包括开始与结尾处的空格。对于所有标签来说，它提供了一个更安全版本的 <code>-%&gt;</code> (在一行的中间并不会剔除标签后面的换行符)。</li><li><code>escape</code> 为 <code>&lt;%=</code> 结构设置对应的转义（escape）函数。它被用于输出结果以及在生成的客户端函数中通过 <code>.toString()</code> 输出。(默认转义 XML)。</li></ul><h2 id=\\\"前端用法\\\"><a href=\\\"#前端用法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端用法</h2><p>\\bEJS 模板文件 用 <code>.ejs</code> 作为后缀名.</p><p>例子:</p><div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">&gt;</span></span>&lt;%= title %&gt;<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    \\n    <span class=\\\"token comment\\\">&lt;!-- 如果 hello \\b传进来了, 则在 &lt;p&gt; 标签中显示 --&gt;</span>\\n    &lt;% if(hello) { %&gt;\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>&lt;%= hello %&gt;<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    &lt;% } %&gt;\\n    \\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><p>模板中, <code>&lt;% %&gt;</code> 括起来的内容都会被编译成 Javascript, <code>&lt;%= %&gt;</code> 将括起来的变量名中的数据渲染到模板.</p><h3 id=\\\"标签含义\\\"><a href=\\\"#标签含义\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 标签含义:</h3><ul><li><code>&lt;%</code> '脚本' 标签，用于流程控制，无输出。</li><li><code>&lt;%_</code> 删除其前面的空格符</li><li><code>&lt;%=</code> 输出数据到模板（输出是转义 HTML 标签）</li><li><code>&lt;%-</code> 输出非转义的数据到模板</li><li><code>&lt;%#</code> 注释标签，不执行、不输出内容</li><li><code>&lt;%%</code> 输出字符串 '&lt;%'</li><li><code>%&gt;</code> 一般结束标签</li><li><code>-%&gt;</code> 删除紧随其后的换行符</li><li><code>_%&gt;</code> 将结束标签后面的空格符删除</li></ul><p>用 <code>&lt;%=...%&gt;</code> 输出变量，变量若包含 '&lt;' '&gt;' '&amp;'等字符会被转义, 如果不希望变量值的内容被转义，那就这么用 <code>&lt;%-... %&gt;</code> 输出变量</p><h3 id=\\\"包含-include\\\"><a href=\\\"#包含-include\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 包含 include:</h3><p>通过 <code>include</code> 指令将相对于模板路径中的模板片段包含进来。</p><p>例如，如果存在 <code>&quot;./views/users.ejs&quot;</code> 和 <code>&quot;./views/user/show.ejs&quot;</code> 两个模板文件，你可以通过 <code>&lt;%- include('user/show'); %&gt;</code> 代码包含后者。</p><p>你可能需要能够输出<strong>原始内容</strong>的标签 (&lt;%-) 用于 <code>include</code> 指令，避免对输出的 HTML 代码做转义处理。</p><div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n  &lt;% users.forEach(function(user){ %&gt;\\n    &lt;%- include('user/show', {user: user}); %&gt;\\n  &lt;% }); %&gt;\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><h3 id=\\\"实例代码\\\"><a href=\\\"#实例代码\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实例代码:</h3><h4 id=\\\"for\\\"><a href=\\\"#for\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> for:</h4><div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code>&lt;% for(var i = 0; i &lt; list.length; i++) { %&gt;\\n  &lt;% var user = list[i]; %&gt;\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>tr</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>td</span><span class=\\\"token punctuation\\\">&gt;</span></span>&lt;%= user.name %&gt;<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>td</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>td</span><span class=\\\"token punctuation\\\">&gt;</span></span>&lt;%= user.age %&gt;<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>td</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>tr</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n&lt;% } %&gt;\\n</code></pre></div><h4 id=\\\"if\\\"><a href=\\\"#if\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> if:</h4><div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code>&lt;% if(hello) { %&gt;\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>&lt;%= hello %&gt;<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n&lt;% } %&gt;\\n</code></pre></div><div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code>&lt;% if (x === 1) { %&gt;\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>Hello world!<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n&lt;% } else if (x === 2) { %&gt;\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>Hi earth!<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n&lt;% } else { %&gt;\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>Hey terra!<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n&lt;% } %&gt;\\n</code></pre></div><h4 id=\\\"swith\\\"><a href=\\\"#swith\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> swith:</h4><div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code>&lt;% switch (role) { %&gt;\\n&lt;% case 'Admin' : %&gt;\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>Super Admin<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    &lt;% break; %&gt;\\n\\n&lt;% case 'eventAdmin' : %&gt;\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>Event Admin<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    &lt;% break; %&gt;\\n\\n&lt;% case 'subAdmin' : %&gt;\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>Sub Admin<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    &lt;% break; %&gt;\\n\\n&lt;% } %&gt;\\n</code></pre></div>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}