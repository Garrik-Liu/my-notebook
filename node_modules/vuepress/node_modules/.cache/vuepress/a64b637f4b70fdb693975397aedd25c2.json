{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/计算机通用/ols/files/final.md?vue&type=template&id=01aabe39","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/计算机通用/ols/files/final.md","mtime":1534429519799},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"final\"><a class=\"header-anchor\" href=\"#final\" aria-hidden=\"true\">#</a> Final</h1>\n<h2 id=\"database-overview\"><a class=\"header-anchor\" href=\"#database-overview\" aria-hidden=\"true\">#</a> Database Overview</h2>\n<ul>\n<li><strong>Database</strong>: A Database consists of a collection of Tables and other database objects.</li>\n<li><strong>Table</strong>: A Table consists of rows and columns.</li>\n<li><strong>Table constraints</strong>:\n<ul>\n<li><strong>Unique</strong>: All of the values in these columns must not be exactly duplicated in another row of the table.</li>\n<li><strong>Check</strong>: The value in these column must meet the specified check criteria before they are accepted (data validation).</li>\n<li><strong>Foreign Key</strong>: See Referential Integrity.</li>\n<li><strong>Primary Key</strong>: A primary key is used to uniquely identify each row of the table.</li>\n</ul>\n</li>\n<li><strong>Column</strong>: A Column is defined with a specific data type and size (how the size is specified is database-dependent).</li>\n<li><strong>Column constraints</strong>:\n<ul>\n<li><strong>Not Null</strong>: Column is required.</li>\n<li><strong>Unique</strong>: A duplicate value is not allowed in this column.</li>\n<li><strong>Check</strong>: The value in this column must meet the specified check criteria before it is accepted (data validation).</li>\n<li><strong>Foreign Key</strong>: See Referential Integrity.</li>\n<li><strong>Primary Key</strong>: A primary key is used to uniquely identify each row of the table.</li>\n</ul>\n</li>\n<li><strong>Database Integrity</strong>: The Database Server ensures that no type, size, check, not null, unique, or primary key constraints are violated.</li>\n<li><strong>Referential Integrity</strong>: The Database Server ensures that every foreign key value is either Null or matches a value in its related primary key.</li>\n<li><strong>Null</strong>: Null means no value.</li>\n</ul>\n<h2 id=\"create-table-statements\"><a class=\"header-anchor\" href=\"#create-table-statements\" aria-hidden=\"true\">#</a> CREATE TABLE STATEMENTS</h2>\n<p>Each column must have a defined <strong>data type</strong>:</p>\n<ul>\n<li>VARCHAR2 - Variable length text</li>\n<li>CHAR - Fixed length text</li>\n<li>NVARCHAR2 - Variable length text with UNICODE characters</li>\n<li>NCHAR - Fixed length text with UNICODE characters</li>\n<li>NUMBER - Fixed precision number (specify number of digits and number of decimal places)</li>\n<li>BINARY_FLOAT - Floating point number</li>\n<li>BINARY_DOUBLE - Double-precision floating point number</li>\n<li>DATE - Date/Time value</li>\n<li>TIMESTAMP - Date/Time value with fractional seconds precision</li>\n<li>INTERVAL - Year to Month or Day to Second interval</li>\n<li>BLOB - Binary Large Object (use for zip files, images, excel spreadsheets, etc.)</li>\n<li>BFILE - Binary File reference</li>\n<li>CLOB - Character Large Object</li>\n<li>NCLOB - Character Large Object with UNICODE characters</li>\n</ul>\n<p><strong>Constraints</strong> are used to enforce business rules within the database:</p>\n<ul>\n<li>PRIMARY KEY</li>\n<li>FOREIGN KEY</li>\n<li>CHECK: data must be checked</li>\n<li>NOT NULL: An amount must be specified</li>\n<li>UNIQUE: must not be same</li>\n</ul>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> salgrade<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> emp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> dept<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> dept\n<span class=\"token punctuation\">(</span>\n\tdeptno NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">CONSTRAINT</span> dept_deptno_nn <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> \n\t\t<span class=\"token keyword\">CONSTRAINT</span> dept_deptno_pk <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n\tdname VARCHAR2<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tloc VARCHAR2<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> emp\n<span class=\"token punctuation\">(</span>\n\tempno NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">CONSTRAINT</span> emp_empno <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> \n\t\t<span class=\"token keyword\">CONSTRAINT</span> emp_empno_pk <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n\tename VARCHAR2<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tjob VARCHAR2<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tmgr NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\thiredate <span class=\"token keyword\">DATE</span><span class=\"token punctuation\">,</span>\n\tsal NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tcomm NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tdeptno NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">CONSTRAINT</span> emp_deptno_fk <span class=\"token keyword\">REFERENCES</span> dept <span class=\"token punctuation\">(</span>deptno<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> salgrade\n<span class=\"token punctuation\">(</span>\n\tgrade NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">CONSTRAINT</span> salgrade_grade_nn <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> \n\t\t<span class=\"token keyword\">CONSTRAINT</span> salgrade_grade_pk <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n\tlosal NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\thisal NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">CONSTRAINT</span> salgrade_losal_hisal_cc <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span>losal <span class=\"token operator\">&lt;=</span> hisal<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"alter-table-statements\"><a class=\"header-anchor\" href=\"#alter-table-statements\" aria-hidden=\"true\">#</a> ALTER TABLE STATEMENTS</h2>\n<p>ALTER TABLE statement allows three types of alterations: additions, modifications, and deletions.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> table_name <span class=\"token punctuation\">[</span><span class=\"token keyword\">ADD</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">MODIFY</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">DROP</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Adding a column:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> customers <span class=\"token keyword\">ADD</span>\n<span class=\"token punctuation\">(</span>\n    sex <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">CONSTRAINT</span> cust_sex_nn <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Adding a table constraint:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> customers <span class=\"token keyword\">ADD</span> \n    <span class=\"token keyword\">CONSTRAINT</span> cust_sex_cc <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span>sex <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Alert a column's data type:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> customers <span class=\"token keyword\">MODIFY</span>\n    <span class=\"token punctuation\">(</span>last_name VARCHAR2<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Changing a column's default value :</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> customers <span class=\"token keyword\">MODIFY</span>\n    <span class=\"token punctuation\">(</span>phone <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'&lt;NONE>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Deleting a table column:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> customers <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">COLUMN</span> sex<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Deleting a constraint:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> customers <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">CONSTRAINT</span> cust_last_name_nn<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Adding a <strong>not null</strong> column constraint:\nif a NOT NULL constraint is being added, then the column value for all of the rows of that table must already be NOT NULL. If a NULL value exists in one of the columns values, the constraint cannot be added.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> customers <span class=\"token keyword\">MODIFY</span> <span class=\"token punctuation\">(</span>last_name <span class=\"token keyword\">CONSTRAINT</span> cust_last_name_nn <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"disabling-constraints\"><a class=\"header-anchor\" href=\"#disabling-constraints\" aria-hidden=\"true\">#</a> Disabling Constraints</h2>\n<p>In order to do some manipulations of the data in the database, it is necessary to <strong>temporarily</strong> relax one or more constraints. Then, after the manipulations are complete, the constraint is restored. This can be achieved by disabling the constraint (rather than dropping it).</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token comment\">/* disable */</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> table_name <span class=\"token keyword\">DISABLE</span> <span class=\"token keyword\">CONSTRAINT</span> constraint_name<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* enable */</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> table_name <span class=\"token keyword\">ENABLE</span> <span class=\"token keyword\">CONSTRAINT</span> constraint_name<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"droping-tables\"><a class=\"header-anchor\" href=\"#droping-tables\" aria-hidden=\"true\">#</a> DROPing tables</h2>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> customers<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Table cannot be dropped if there are foreign keys that refer to it.\nall of the foreign keys can also be dropped at the same time by adding the phrase <code>CASCADE CONSTRAINTS</code></p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> customers <span class=\"token keyword\">CASCADE</span> CONSTRAINTS<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"database-design\"><a class=\"header-anchor\" href=\"#database-design\" aria-hidden=\"true\">#</a> Database Design</h2>\n<h3 id=\"entities-and-attributes\"><a class=\"header-anchor\" href=\"#entities-and-attributes\" aria-hidden=\"true\">#</a> Entities and Attributes</h3>\n<ul>\n<li><strong>Entities</strong> are people, places, objects, or concepts. will become a table in the database design.</li>\n<li>An <strong>attribute</strong> of an entity will become a column of the table in the database design.</li>\n<li>An <strong>instance</strong> of an entity will become a row of the table in the database.</li>\n<li>Each instance is separate and distinctly identifiable from all other instances of that type of entity. The unique identifier is called the <strong>key</strong>.</li>\n</ul>\n<p>Design steps:</p>\n<ol>\n<li>determine what entities are required.</li>\n<li>determine the required attributes of the entities.</li>\n<li>Determine the functional dependencies of the attributes</li>\n<li>Determine entity relationships</li>\n<li>Translate entities and attributes into Tables and Columns.</li>\n<li>Determine data types, field sizes, primary keys, foreign keys, and other constraints.</li>\n<li>Normalize the design.</li>\n</ol>\n<h3 id=\"functional-dependencies\"><a class=\"header-anchor\" href=\"#functional-dependencies\" aria-hidden=\"true\">#</a> Functional Dependencies</h3>\n<p>A functional dependency is a relationship of one attribute or field in a record to another.\ndefine a field or a set of fields as an anchor from which one can always find a single value for another field.</p>\n<p>To show the functional dependency (FD), we use the notation:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code># Employee Number defines Name\nEmployee Number → Name\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"attributes-types\"><a class=\"header-anchor\" href=\"#attributes-types\" aria-hidden=\"true\">#</a> Attributes Types</h3>\n<ul>\n<li><strong>Simple Attribute</strong>: A simple attribute is one that cannot be broken down or subdivided.</li>\n<li><strong>Composite Attribute</strong>: A composite attribute is one that can be decomposed into separate but related attributes.</li>\n<li><strong>Multi-Valued Attribute</strong>: A multi-valued attribute may take on more than one value for a given instance of an entity.</li>\n<li><strong>Derived Attribute</strong>: Derived attributes are ones that can be calculated from other data in the database.</li>\n<li><strong>Candidate Key</strong>: If an attribute can be thought of as a unique identifier for an entity,</li>\n</ul>\n<p><img src=\"https://i.imgur.com/NruYCay.png\" alt=\"Screen Shot 2018-08-15 at 7.20.58 PM\"></p>\n<h3 id=\"entity-relationship\"><a class=\"header-anchor\" href=\"#entity-relationship\" aria-hidden=\"true\">#</a> Entity-Relationship</h3>\n<p>A relationship is a link or association between entities. Relationships are usually denoted by verb phrases.</p>\n<ul>\n<li><strong>One-to-One (1:1)</strong>:  an instance of an entity is related to one instance of another entity.</li>\n<li><strong>Many-to-One (M:1)</strong>: an instance of one entity is related to an instance of another entity. But an instance of the other entity is related to many instances of the first entity.</li>\n<li><strong>One-to-Many (1:M)</strong>: an instance of an entity is related to many instances of another entity. But an instance of the other entity is related to only one instance of the first entity.</li>\n<li><strong>Many-to-Many (M:N)</strong>: an instance of an entity is related to many instances of another entity and an instance of the other entity is related to many instances of the first entity.</li>\n</ul>\n<h3 id=\"participation\"><a class=\"header-anchor\" href=\"#participation\" aria-hidden=\"true\">#</a> Participation</h3>\n<p>Another aspect of the relationship indicates whether an entity must participate in the relationship or may participate in the relationship.</p>\n<ul>\n<li><strong>Full</strong> participation means that the entity must participate in the relationship</li>\n<li><strong>partial</strong> participation indicates that the entity may participate in the relationship.</li>\n</ul>\n<p><img src=\"https://i.imgur.com/Xx8r4IK.png\" alt=\"Screen Shot 2018-08-15 at 7.29.31 PM\"></p>\n<h3 id=\"mapping\"><a class=\"header-anchor\" href=\"#mapping\" aria-hidden=\"true\">#</a> Mapping</h3>\n<ul>\n<li><strong>For each M:N relationship</strong>, create a new table with the primary keys of each of the two owner entities that are being related in the M:N relationship.</li>\n<li><strong>For each 1:1 relationship</strong>, include the primary key of one entity as a foreign key of the other entity according to one of the rules below.</li>\n<li><strong>For each 1:M relationship</strong>: 懒得写</li>\n</ul>\n<h3 id=\"normalization\"><a class=\"header-anchor\" href=\"#normalization\" aria-hidden=\"true\">#</a> Normalization</h3>\n<ul>\n<li>\n<p><strong>First Normal Form</strong>: The first normal form (<strong>1NF</strong>) requires that data in tables be two-dimensional — that there be no repeating groups in the rows.</p>\n</li>\n<li>\n<p><strong>Second Normal Form</strong>: The second normal form (<strong>2NF</strong>) requires that data in tables depends on the whole key of the table. Partial dependencies are not allowed.</p>\n</li>\n<li>\n<p><strong>Third Normal Form</strong>: The third normal form (<strong>3NF</strong>) requires that the data in tables depends on the primary key of the table. Eliminate columns that don't depend on the key at all.</p>\n</li>\n</ul>\n<h2 id=\"data-manipulation-language-dml-statements\"><a class=\"header-anchor\" href=\"#data-manipulation-language-dml-statements\" aria-hidden=\"true\">#</a> Data Manipulation Language (DML) Statements</h2>\n<h3 id=\"insert\"><a class=\"header-anchor\" href=\"#insert\" aria-hidden=\"true\">#</a> INSERT</h3>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> donations <span class=\"token punctuation\">(</span>receipt_no<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Kevin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dunn'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* DEFAULT */</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> donations <span class=\"token punctuation\">(</span>receipt_no<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Kevin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dunn'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* null */</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> donations <span class=\"token punctuation\">(</span>receipt_no<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dunn'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* date */</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> card_accounts <span class=\"token punctuation\">(</span>card_number<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> middle_initial<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> valid_date<span class=\"token punctuation\">,</span> expiry_date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">55555555</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cathy'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Puck'</span><span class=\"token punctuation\">,</span> TO_DATE<span class=\"token punctuation\">(</span><span class=\"token string\">'11-NOV-2005'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DD-MON-YYYY'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TO_DATE<span class=\"token punctuation\">(</span><span class=\"token string\">'10-NOV-2006'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DD-MON-YYYY'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* interval */</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> events <span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">,</span> next_event<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>TO_DSINTERVAL<span class=\"token punctuation\">(</span><span class=\"token string\">'0 02:30:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TO_YMINTERVAL<span class=\"token punctuation\">(</span><span class=\"token string\">'1-6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Subqueries */</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> donations <span class=\"token punctuation\">(</span>receipt_no<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2540</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> first_name <span class=\"token keyword\">FROM</span> donations <span class=\"token keyword\">WHERE</span> receipt_no <span class=\"token operator\">=</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> last_name <span class=\"token keyword\">FROM</span> donations <span class=\"token keyword\">WHERE</span> receipt_no <span class=\"token operator\">=</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* INSERT SELECT */</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> donations <span class=\"token punctuation\">(</span>receipt_no<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">2540</span><span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token keyword\">FROM</span> donations <span class=\"token keyword\">WHERE</span> receipt_no <span class=\"token operator\">=</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"update\"><a class=\"header-anchor\" href=\"#update\" aria-hidden=\"true\">#</a> UPDATE</h3>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">UPDATE</span> donations <span class=\"token keyword\">SET</span> last_name <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">880</span> <span class=\"token keyword\">WHERE</span> receipt_no <span class=\"token operator\">=</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UPDATE</span> donations <span class=\"token keyword\">SET</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Dunn'</span><span class=\"token punctuation\">,</span> amount <span class=\"token operator\">=</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">WHERE</span> receipt_no <span class=\"token operator\">=</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"delete\"><a class=\"header-anchor\" href=\"#delete\" aria-hidden=\"true\">#</a> DELETE</h3>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> donations <span class=\"token keyword\">WHERE</span> receipt_no <span class=\"token operator\">=</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>foreign key can be defined with the phrase ON DELETE CASCADE or ON DELETE SET NULL.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code>receipt_no NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">CONSTRAINT</span> receipt_no_fk <span class=\"token keyword\">REFERENCES</span> donations<span class=\"token punctuation\">(</span>receipt_no<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">CASCADE</span>\n\nreceipt_no NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">CONSTRAINT</span> receipt_no_fk <span class=\"token keyword\">REFERENCES</span> donations<span class=\"token punctuation\">(</span>receipt_no<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">SET</span> <span class=\"token boolean\">NULL</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"sequences\"><a class=\"header-anchor\" href=\"#sequences\" aria-hidden=\"true\">#</a> SEQUENCES</h2>\n<p>A sequence is a database object that can be used to create unique <strong>surrogate key values</strong>.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> SEQUENCE receipt_no_sequence\n   <span class=\"token keyword\">START</span> <span class=\"token keyword\">WITH</span> <span class=\"token number\">1290</span>\n   INCREMENT <span class=\"token keyword\">BY</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li><code>NEXTVAL</code> used To retrieve the next value</li>\n<li><code>CURRVAL</code>  to get the last generated sequence value</li>\n</ul>\n<p>This is useful when inserting foreign key values when the primary key value was generated with the sequence.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> SEQUENCE make_id_sequence\n   <span class=\"token keyword\">START</span> <span class=\"token keyword\">WITH</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> makes <span class=\"token punctuation\">(</span>make_id<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>make_id_sequence<span class=\"token punctuation\">.</span>NEXTVAL<span class=\"token punctuation\">,</span> <span class=\"token string\">'Infinity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> models <span class=\"token punctuation\">(</span>make_id<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>make_id_sequence<span class=\"token punctuation\">.</span>CURRVAL<span class=\"token punctuation\">,</span> <span class=\"token string\">'G35 Sedan'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> makes <span class=\"token punctuation\">(</span>make_id<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>make_id_sequence<span class=\"token punctuation\">.</span>NEXTVAL<span class=\"token punctuation\">,</span> <span class=\"token string\">'Jaguar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> models <span class=\"token punctuation\">(</span>make_id<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>make_id_sequence<span class=\"token punctuation\">.</span>CURRVAL<span class=\"token punctuation\">,</span> <span class=\"token string\">'2005 XJR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> makes <span class=\"token punctuation\">(</span>make_id<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>make_id_sequence<span class=\"token punctuation\">.</span>NEXTVAL<span class=\"token punctuation\">,</span> <span class=\"token string\">'Lexus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> models <span class=\"token punctuation\">(</span>make_id<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>make_id_sequence<span class=\"token punctuation\">.</span>CURRVAL<span class=\"token punctuation\">,</span> <span class=\"token string\">'GS 300 AWD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> models <span class=\"token punctuation\">(</span>make_id<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>make_id_sequence<span class=\"token punctuation\">.</span>CURRVAL<span class=\"token punctuation\">,</span> <span class=\"token string\">'LS 430'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> makes <span class=\"token punctuation\">(</span>make_id<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>make_id_sequence<span class=\"token punctuation\">.</span>NEXTVAL<span class=\"token punctuation\">,</span> <span class=\"token string\">'Mercedes Benz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>DELETE</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">DROP</span> SEQUENCE receipt_no_sequence<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"transaction-processing\"><a class=\"header-anchor\" href=\"#transaction-processing\" aria-hidden=\"true\">#</a> Transaction Processing</h2>\n<p>A transaction is defined as <strong>a logical unit of work</strong>  —  a set of database changes to one or more tables that accomplish a defined task.</p>\n<p>A transaction begins after:</p>\n<ul>\n<li>a <strong>COMMIT</strong> statement,</li>\n<li>a <strong>ROLLBACK</strong> statement,</li>\n<li>an initial database connection.</li>\n</ul>\n<p>A transaction ends when :</p>\n<ul>\n<li>A <strong>COMMIT</strong> statement is processed</li>\n<li>A <strong>ROLLBACK</strong> statement is processed</li>\n<li>The database connection is terminated</li>\n</ul>\n<p>Example:\ntransfering <code>$200</code> from your savings account to your chequing account through an ATM. You insert your card, select transfer, specify from savings and to chequing, specify the amount as <code>$200</code> and press OK.</p>\n<p>To complete the transaction, the system must deduct <code>$200</code> from your savings account balance and add <code>$200</code> to your chequing account balance. The transaction is only complete when both steps have been performed — that is, both operations comprise a single logical unit of work.</p>\n<h3 id=\"rollback\"><a class=\"header-anchor\" href=\"#rollback\" aria-hidden=\"true\">#</a> ROLLBACK</h3>\n<p>In the above example, the ATM software might issue an UPDATE statement to deduct an amount of <code>$200</code> from your savings account and then issue another UPDATE statement to add an amount of <code>$200</code> to your chequing account.</p>\n<p>If before the second UPDATE statement was issued, the CANCEL button was pressed (on the ATM). To cancel the operation, the ATM must not only abandon the second UPDATE statement, but also undo the changes caused by the first UPDATE statement.</p>\n<p>The <strong>ROLLBACK</strong> statement will undo any other statements since the connection was established or since the last committed transaction</p>\n<h3 id=\"commit\"><a class=\"header-anchor\" href=\"#commit\" aria-hidden=\"true\">#</a> COMMIT</h3>\n<p>In the above example, the ATM software might issue an UPDATE statement to deduct an amount of <code>$200</code> from your savings account and then issue another UPDATE statement to add an amount of <code>$200</code> to your chequing account.</p>\n<p>A <strong>COMMIT</strong> statement would finalize the transaction so that it cannot be undone.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">SET</span> balance <span class=\"token operator\">=</span> balance <span class=\"token operator\">-</span> <span class=\"token number\">200</span> <span class=\"token keyword\">WHERE</span> account_no <span class=\"token operator\">=</span> <span class=\"token number\">12345678</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UPDATE</span> account <span class=\"token keyword\">SET</span> balance <span class=\"token operator\">=</span> balance <span class=\"token operator\">+</span> <span class=\"token number\">200</span> <span class=\"token keyword\">WHERE</span> account_no <span class=\"token operator\">=</span> <span class=\"token number\">98765432</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"savepoints\"><a class=\"header-anchor\" href=\"#savepoints\" aria-hidden=\"true\">#</a> Savepoints</h3>\n<p>If a transaction (which is a logical unit of work) is actually made up of smaller sub-transactions each of which is also a logical unit of work, each sub-transaction can be noted by specifying a savepoint</p>\n<p>Then, if part of the transaction must be undone, it could be undone to a specified savepoint</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SAVEPOINT</span> savepoint_name<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">ROLLBACK</span> <span class=\"token keyword\">TO</span> savepoint_name<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code> try\n<span class=\"token punctuation\">{</span>\n    cmd<span class=\"token punctuation\">.</span>CommandText <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE account SET balance = balance + :amount WHERE account_no = :accountNo\"</span><span class=\"token punctuation\">;</span>\n    cmd<span class=\"token punctuation\">.</span>Parameters<span class=\"token punctuation\">[</span><span class=\"token string\">\":accountNo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> toAccountNo<span class=\"token punctuation\">;</span>\n    cmd<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteNonQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cmd<span class=\"token punctuation\">.</span>CommandText <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE account SET balance = balance - :amount WHERE account_no = :accountNo\"</span><span class=\"token punctuation\">;</span>\n    cmd<span class=\"token punctuation\">.</span>Parameters<span class=\"token punctuation\">[</span><span class=\"token string\">\":accountNo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> fromAccountNo<span class=\"token punctuation\">;</span>\n    cmd<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteNonQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    trans<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Commit changes</span>\n<span class=\"token punctuation\">}</span>\ncatch <span class=\"token punctuation\">(</span>Exception ex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    trans<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Rollback any changes</span>\n    throw ex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Re-throw the exception</span>\n<span class=\"token punctuation\">}</span>\nfinally\n<span class=\"token punctuation\">{</span>\n    conn<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"selecting-data\"><a class=\"header-anchor\" href=\"#selecting-data\" aria-hidden=\"true\">#</a> SELECTing Data</h2>\n<h3 id=\"limiting-rows\"><a class=\"header-anchor\" href=\"#limiting-rows\" aria-hidden=\"true\">#</a> Limiting Rows</h3>\n<p>The <strong>ROWNUM</strong> pseudo column can be used to limit the number of rows returned by the SELECT statement.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> sal <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">WHERE</span> ROWNUM <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> sal <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"case-expressions\"><a class=\"header-anchor\" href=\"#case-expressions\" aria-hidden=\"true\">#</a> CASE Expressions</h3>\n<p><strong>CASE expression WHEN value THEN…</strong></p>\n<p>Display each employee's name and job (being politically correct in stating the job description).</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> ename<span class=\"token punctuation\">,</span> \n<span class=\"token keyword\">CASE</span> job \n<span class=\"token keyword\">WHEN</span> <span class=\"token string\">'SALESMAN'</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'SALESPERSON'</span> \n<span class=\"token keyword\">ELSE</span> job \n<span class=\"token keyword\">END</span> \n<span class=\"token keyword\">AS</span> job \n<span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Display the employee name, salary, and department number for all employees in department 10 whose salary is more than 3000, employees in department 20 whose salary is &gt; 900, and employees in department 30 whose salary is greater than 2000.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> ename<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> deptno <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> sal <span class=\"token operator\">></span> \n<span class=\"token keyword\">CASE</span> deptno \n<span class=\"token keyword\">WHEN</span> <span class=\"token number\">10</span> <span class=\"token keyword\">THEN</span> <span class=\"token number\">3000</span> \n<span class=\"token keyword\">WHEN</span> <span class=\"token number\">20</span> <span class=\"token keyword\">THEN</span> <span class=\"token number\">900</span> \n<span class=\"token keyword\">WHEN</span> <span class=\"token number\">30</span> <span class=\"token keyword\">THEN</span> <span class=\"token number\">2000</span> \n<span class=\"token keyword\">END</span> \n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> deptno <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">,</span> sal <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>CASE WHEN expression THEN…</strong></p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> ename<span class=\"token punctuation\">,</span> comm<span class=\"token punctuation\">,</span> \n<span class=\"token keyword\">CASE</span> <span class=\"token keyword\">WHEN</span> comm <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'NO COMMISSION'</span> <span class=\"token keyword\">WHEN</span> comm <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'NOT EARNED'</span> \n<span class=\"token keyword\">ELSE</span> <span class=\"token string\">'COMMISSION PAID'</span> \n<span class=\"token keyword\">END</span> \n<span class=\"token keyword\">AS</span> COMM_STATUS <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"grouping\"><a class=\"header-anchor\" href=\"#grouping\" aria-hidden=\"true\">#</a> Grouping</h3>\n<h4 id=\"distinct-rows\"><a class=\"header-anchor\" href=\"#distinct-rows\" aria-hidden=\"true\">#</a> Distinct Rows</h4>\n<p>the DISTINCT keyword can be used to ensure that each row returned is unique.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> job<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"group-by-clause\"><a class=\"header-anchor\" href=\"#group-by-clause\" aria-hidden=\"true\">#</a> Group By Clause</h4>\n<p>The GROUP BY clause tells the database server to group rows based on the distinct values that exist for the specified columns.</p>\n<p>Display the job for each job group</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> job<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Display the average salary per job type</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> avg_sal <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> job<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Display the job and average salary per job type</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> job<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> avg_sal <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> job<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Display the number of employees per manager</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_emps <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> mgr<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"subgrouping\"><a class=\"header-anchor\" href=\"#subgrouping\" aria-hidden=\"true\">#</a> Subgrouping</h4>\n<p>A group can be further broken down into sub-groups by specifying more than one group in the GROUP BY clause.</p>\n<p>Display the manager and job for each job and each manager with employees with that job (i.e., per manager per job)</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> mgr<span class=\"token punctuation\">,</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> job<span class=\"token punctuation\">,</span> mgr<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Display the manager, job, and min and max salary per manager per job</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> mgr<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> min_sal<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> max_sal<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> avg_sal <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> job<span class=\"token punctuation\">,</span> mgr<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Display the manager, job, and number of employees per manager per job</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> mgr<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_emps <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> job<span class=\"token punctuation\">,</span> mgr<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"the-having-clause\"><a class=\"header-anchor\" href=\"#the-having-clause\" aria-hidden=\"true\">#</a> The HAVING Clause</h4>\n<p>The HAVING clause is like a WHERE clause that applies to the group or to a group function</p>\n<p>While the WHERE clause applies its condition to every row to determine if that row should be included, the HAVING clause is applied to the group of rows to determine if that group should be included.</p>\n<p>Display the job for each job group eliminating the MANAGER job group</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> job <span class=\"token keyword\">HAVING</span> job <span class=\"token operator\">!=</span> <span class=\"token string\">'MANAGER'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Display the job and average salary per job where the average salary per job is over 1200</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> job<span class=\"token punctuation\">,</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> avg_sal <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> job <span class=\"token keyword\">HAVING</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1200</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Display the job and average of salaries over 1200 per job</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> job<span class=\"token punctuation\">,</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> avg_sal <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> sal <span class=\"token operator\">></span> <span class=\"token number\">1200</span> <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> job<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"joins\"><a class=\"header-anchor\" href=\"#joins\" aria-hidden=\"true\">#</a> Joins</h3>\n<p>A <code>JOIN</code> clause is used to combine rows from two or more tables, based on a related column between them.</p>\n<ul>\n<li><strong>INNER JOIN</strong>: Returns records that have matching values in both tables</li>\n<li><strong>LEFT JOIN</strong>: Return all records from the left table, and the matched records from the right table</li>\n<li><strong>RIGHT JOIN</strong>: Return all records from the right table, and the matched records from the left table</li>\n<li><strong>FULL (OUTER) JOIN</strong>: Return all records when there is a match in either left or right table</li>\n</ul>\n<p><img src=\"https://i.imgur.com/JAWya3N.png\" alt=\"img\"></p>\n<h4 id=\"inner-join\"><a class=\"header-anchor\" href=\"#inner-join\" aria-hidden=\"true\">#</a> inner join</h4>\n<p>Display the employee number, name, job, salary, and salary grade for each employee</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> grade \n<span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> salgrade \n<span class=\"token keyword\">ON</span> sal <span class=\"token operator\">BETWEEN</span> losal <span class=\"token operator\">and</span> hisal \n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> sal <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"left-join\"><a class=\"header-anchor\" href=\"#left-join\" aria-hidden=\"true\">#</a> left join</h4>\n<p>select all customers, and any orders they might have</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> Customers<span class=\"token punctuation\">.</span>CustomerName<span class=\"token punctuation\">,</span> Orders<span class=\"token punctuation\">.</span>OrderID\n<span class=\"token keyword\">FROM</span> Customers <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> Orders \n<span class=\"token keyword\">ON</span> Customers<span class=\"token punctuation\">.</span>CustomerID <span class=\"token operator\">=</span> Orders<span class=\"token punctuation\">.</span>CustomerID\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Customers<span class=\"token punctuation\">.</span>CustomerName<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"right-join\"><a class=\"header-anchor\" href=\"#right-join\" aria-hidden=\"true\">#</a> right join</h4>\n<p>Return all employees, and any orders they might have placed:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> Orders<span class=\"token punctuation\">.</span>OrderID<span class=\"token punctuation\">,</span> Employees<span class=\"token punctuation\">.</span>LastName<span class=\"token punctuation\">,</span> Employees<span class=\"token punctuation\">.</span>FirstName\n<span class=\"token keyword\">FROM</span> Orders <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> Employees \n<span class=\"token keyword\">ON</span> Orders<span class=\"token punctuation\">.</span>EmployeeID <span class=\"token operator\">=</span> Employees<span class=\"token punctuation\">.</span>EmployeeID\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Orders<span class=\"token punctuation\">.</span>OrderID<span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"cursor-expressions\"><a class=\"header-anchor\" href=\"#cursor-expressions\" aria-hidden=\"true\">#</a> CURSOR Expressions</h3>\n<h3 id=\"using-set-operators\"><a class=\"header-anchor\" href=\"#using-set-operators\" aria-hidden=\"true\">#</a> Using SET operators</h3>\n<h4 id=\"union\"><a class=\"header-anchor\" href=\"#union\" aria-hidden=\"true\">#</a> UNION</h4>\n<p><code>UNION</code> operator combines the two sets of rows (from two SELECT statements) into a single row set.</p>\n<p>E.g: Display the employee number, name, salary and/or commission for each employee</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> <span class=\"token string\">'SAL'</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> sal <span class=\"token keyword\">AS</span> amount <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> <span class=\"token string\">'COMM'</span><span class=\"token punctuation\">,</span> comm <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> comm <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/SH2MqSS.png\" alt=\"Screen Shot 2018-08-06 at 11.50.58 PM\"></p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> <span class=\"token string\">'SAL'</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> sal <span class=\"token keyword\">AS</span> amount <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> <span class=\"token string\">'COMM'</span><span class=\"token punctuation\">,</span> comm <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> comm <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/EQlNFyL.png\" alt=\"Screen Shot 2018-08-06 at 11.53.48 PM\"></p>\n<h4 id=\"union-all\"><a class=\"header-anchor\" href=\"#union-all\" aria-hidden=\"true\">#</a> UNION ALL</h4>\n<p>When two sets of rows are UNIONed together, the <code>UNION</code> operator eliminates duplicate rows. To keep the duplicate rows, use the <code>UNION ALL</code> operator instead of the <code>UNION</code> operator.</p>\n<p>E.g: Display all of the different salary and commission amounts\n(This example has duplicate rows eliminated:)</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> sal <span class=\"token keyword\">AS</span> amount <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> comm <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> comm <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> amount\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/ni69CBy.png\" alt=\"Screen Shot 2018-08-06 at 11.56.10 PM\"></p>\n<p>E.g: Display all of the salary and commission amounts\n(This example keeps duplicate rows:)</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> sal <span class=\"token keyword\">AS</span> amount <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n<span class=\"token keyword\">SELECT</span> comm <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> comm <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> amount\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/rp9LWQS.png\" alt=\"Screen Shot 2018-08-06 at 11.55.55 PM\"></p>\n<h4 id=\"intersect\"><a class=\"header-anchor\" href=\"#intersect\" aria-hidden=\"true\">#</a> INTERSECT</h4>\n<p>The <code>INTERSECT</code> operator returns the rows that are common between two sets of rows.</p>\n<p>E.g: Display the employee number of all of the employees who earn 3000 or less and are managers</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> mgr <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">INTERSECT</span>\n<span class=\"token keyword\">SELECT</span> empno <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> sal <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3000</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> mgr<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/HRUk8bv.png\" alt=\"Screen Shot 2018-08-06 at 11.58.48 PM\"></p>\n<h4 id=\"minus\"><a class=\"header-anchor\" href=\"#minus\" aria-hidden=\"true\">#</a> MINUS</h4>\n<p>The <code>MINUS</code> operator returns the rows in the first set of rows that do not exist in the second set of rows. The MINUS operator is sometimes called the difference operator.</p>\n<p>E.g: Display the employee number of all employees who are not managers</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno <span class=\"token keyword\">FROM</span> emp\nMINUS\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> mgr <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"subqueries\"><a class=\"header-anchor\" href=\"#subqueries\" aria-hidden=\"true\">#</a> Subqueries</h3>\n<p>A subquery allows the results of one SELECT statement to be used in another DML statement.</p>\n<p>When used in a DML statement, a subquery must be enclosed in parentheses. The number of rows returned by a subquery must match the number of values that the function or operator expects. The <code>ORDER BY</code> clause cannot used within a subquery</p>\n<p>E.g: get the employee number, name, job, and salary of all employees that make more than the lowest paid salesman.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> sal <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">WHERE</span> sal <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> job <span class=\"token operator\">=</span> <span class=\"token string\">'SALESMAN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"using-subqueries-with-in-not-in\"><a class=\"header-anchor\" href=\"#using-subqueries-with-in-not-in\" aria-hidden=\"true\">#</a> Using Subqueries with IN, NOT IN</h4>\n<p>Using <code>IN</code> in a subquery allows a column or expression to be compared to a set of values returned from the subquery.</p>\n<p>E.g:  Get employee numbers of all of the managers of the clerks and analysts.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> mgr <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">where</span> job <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CLERK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ANALYST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"nested-subqueries\"><a class=\"header-anchor\" href=\"#nested-subqueries\" aria-hidden=\"true\">#</a> Nested Subqueries</h4>\n<p>A nested subquery is a subquery within a subquery.</p>\n<p>E.g: get the employee information for the managers with the most employees.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> empno <span class=\"token operator\">IN</span>\n<span class=\"token punctuation\">(</span>\n   <span class=\"token keyword\">SELECT</span> mgr <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> mgr <span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n   <span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> mgr\n   <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"correlated-subqueries\"><a class=\"header-anchor\" href=\"#correlated-subqueries\" aria-hidden=\"true\">#</a> Correlated Subqueries</h4>\n<p>Correlated subqueries reference information from the main query. Since a correlated subquery is dependent on row data from the main query, this subquery must be re-evaluated for each row of the main query.</p>\n<p>E.g: lists the employee number, name, job, and department name of all employees who do not work in the same department as their managers (but do have managers!)</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> dname \n<span class=\"token keyword\">FROM</span> emp employees <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> dept \n<span class=\"token keyword\">ON</span> employees<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>deptno\n<span class=\"token keyword\">WHERE</span> mgr <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token operator\">AND</span> employees<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">!=</span>\n<span class=\"token punctuation\">(</span>\n   <span class=\"token keyword\">SELECT</span> deptno <span class=\"token keyword\">FROM</span> emp managers <span class=\"token keyword\">WHERE</span> employees<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">=</span> managers<span class=\"token punctuation\">.</span>empno\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"subquery-virtual-columns\"><a class=\"header-anchor\" href=\"#subquery-virtual-columns\" aria-hidden=\"true\">#</a> Subquery Virtual Columns</h4>\n<p>A subquery can appear as a virtual column expression. This is a form of correlated subquery; that is, the subquery must execute for every row of the query. The subquery must return a single row and column.</p>\n<p>E.g: list each employee along with the name of the employee's department.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> ename<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> dname <span class=\"token keyword\">FROM</span> dept <span class=\"token keyword\">WHERE</span> dept<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> emp<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> dname <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g:  list the name and the number of employees in each department.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> dname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_emps <span class=\"token keyword\">FROM</span> dept<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"subquery-virtual-tables\"><a class=\"header-anchor\" href=\"#subquery-virtual-tables\" aria-hidden=\"true\">#</a> Subquery Virtual Tables</h4>\n<p>A subquery can appear as a virtual table in the <code>FROM</code> clause of a <code>SELECT</code> statement. The virtual table can appear as part of a table join. The columns produced by the virtual table become valid columns to SELECT in the query.</p>\n<p>E.g: list the employee name, salary, and salary grade for each employee that is salary grade 3 or higher.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> ename<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> grade \n<span class=\"token keyword\">FROM</span> \n<span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> salgrade \n<span class=\"token keyword\">ON</span> sal <span class=\"token operator\">BETWEEN</span> losal <span class=\"token operator\">AND</span> hisal<span class=\"token punctuation\">)</span> empsalgrade \n<span class=\"token keyword\">WHERE</span> grade <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g: list the name of all employees along with the number of employees in the department in which the employee resides ordered from the departments with the most employees to the department with the least employees, sub sorted alphabetically by employee name.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> ename<span class=\"token punctuation\">,</span> num_emps\n<span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> \n<span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> deptno<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp emp2 \n<span class=\"token keyword\">WHERE</span> emp2<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_emps <span class=\"token keyword\">FROM</span> dept<span class=\"token punctuation\">)</span> empcount \n<span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> empcount<span class=\"token punctuation\">.</span>deptno\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> num_emps <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">,</span> ename <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"exists\"><a class=\"header-anchor\" href=\"#exists\" aria-hidden=\"true\">#</a> EXISTS</h4>\n<p>The EXISTS operator operates on a subquery and returns the boolean value TRUE</p>\n<p>Construct a query that lists all employees who have at least one other employee in the same department with the same manager they have.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> mgr <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">EXISTS</span>\n<span class=\"token punctuation\">(</span>\n   <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp empcompare\n   <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">=</span> empcompare<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">AND</span>\n   emp<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> empcompare<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">AND</span>\n   emp<span class=\"token punctuation\">.</span>empno <span class=\"token operator\">!=</span> empcompare<span class=\"token punctuation\">.</span>empno\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"views\"><a class=\"header-anchor\" href=\"#views\" aria-hidden=\"true\">#</a> Views</h2>\n<p>a view is a virtual table based on the result-set of an SQL statement.</p>\n<h3 id=\"create-views\"><a class=\"header-anchor\" href=\"#create-views\" aria-hidden=\"true\">#</a> Create Views</h3>\n<p>The syntax for creating a view is :</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">VIEW</span> view_name <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>column1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> columnN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">AS</span> select_statement<span class=\"token punctuation\">.</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Use the <code>OR REPLACE</code> option to recreate a view.</p>\n<p>E.g:  Construct a view that lists the name of all clerks along with their employee number and salary.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> clerks_analysts <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> job <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CLERK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ANALYST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g: Construct a view that lists all employees who have at least one other employee in the same department with the same manager they have AND who earn more than their managers.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> same_dept_big_money <span class=\"token punctuation\">(</span>empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> mgr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> mgr <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">EXISTS</span>\n<span class=\"token punctuation\">(</span>\n   <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp empcompare\n   <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">=</span> empcompare<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">AND</span>\n   emp<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> empcompare<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">AND</span>\n   emp<span class=\"token punctuation\">.</span>empno <span class=\"token operator\">!=</span> empcompare<span class=\"token punctuation\">.</span>empno\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">INTERSECT</span>\n<span class=\"token keyword\">SELECT</span> e1<span class=\"token punctuation\">.</span>empno<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>ename<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>mgr\n<span class=\"token keyword\">FROM</span> emp e1<span class=\"token punctuation\">,</span> emp e2\n<span class=\"token keyword\">WHERE</span> e2<span class=\"token punctuation\">.</span>empno <span class=\"token operator\">=</span> e1<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">AND</span> e1<span class=\"token punctuation\">.</span>sal <span class=\"token operator\">></span> e2<span class=\"token punctuation\">.</span>sal<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-views\"><a class=\"header-anchor\" href=\"#using-views\" aria-hidden=\"true\">#</a> Using Views</h3>\n<h4 id=\"delete-2\"><a class=\"header-anchor\" href=\"#delete-2\" aria-hidden=\"true\">#</a> Delete</h4>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> view_name<span class=\"token punctuation\">.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"modifying-data-behind-a-view\"><a class=\"header-anchor\" href=\"#modifying-data-behind-a-view\" aria-hidden=\"true\">#</a> Modifying Data behind a view</h3>\n<p>Creating a view differs from creating a table from a subquery in that a table is static and will not reflect changes in the tables on which it is based. A view will always reflect the current data.</p>\n<h3 id=\"modifying-data-through-a-view\"><a class=\"header-anchor\" href=\"#modifying-data-through-a-view\" aria-hidden=\"true\">#</a> Modifying Data through a view</h3>\n<p>Data can be modified through a view under three conditions.</p>\n<ul>\n<li>The view is based on a single table (or more precisely, the modification only affects a single key-preserved table).</li>\n<li>The select statement does not have a <code>DISTINCT</code> clause, aggregates, or a <code>GROUP BY</code> clause.</li>\n<li>The columns to be updated are not virtual columns — that is, they are based on real columns, not expressions.</li>\n</ul>\n<h3 id=\"restriction-when-updating-through-a-view\"><a class=\"header-anchor\" href=\"#restriction-when-updating-through-a-view\" aria-hidden=\"true\">#</a> Restriction when updating through a view</h3>\n<h4 id=\"creating-a-read-only-view\"><a class=\"header-anchor\" href=\"#creating-a-read-only-view\" aria-hidden=\"true\">#</a> Creating a Read-Only View</h4>\n<p>A view that would otherwise be updatable can be made non-updatable by adding the clause <code>WITH READ ONLY</code> to its create statement.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">VIEW</span> clerks_analysts <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> job <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CLERK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ANALYST'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WITH</span> <span class=\"token keyword\">READ</span> ONLY<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"using-the-with-check-option\"><a class=\"header-anchor\" href=\"#using-the-with-check-option\" aria-hidden=\"true\">#</a> Using the WITH CHECK OPTION</h4>\n<p>A view that includes a filter condition can prevent any updates to a row that will result in the row being excluded from the view.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> clerks_analysts <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> job <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CLERK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ANALYST'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WITH</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"privileges\"><a class=\"header-anchor\" href=\"#privileges\" aria-hidden=\"true\">#</a> Privileges</h2>\n<p>Privileges allow a user to grant another user authority to access and/or create, modify, or delete database objects within the user's workspace.</p>\n<p>There are two types of privileges:</p>\n<ul>\n<li><strong>System privileges</strong> allow the user to grant to another user the ability to create or destroy database objects in the user's workspace. E.g. CREATE TABLE privilege, DROP TABLE privilege. System privileges also include database administrator privileges such as CREATE USER privilege. A user must be database administrator to grant a database administration privilege to another user.</li>\n<li><strong>Object privileges</strong> allow the user to grant to another user the ability to access or modify a database object in the user's workspace. E.g. SELECT privilege, INSERT privilege, ALTER privilege. Object privileges must specify the object on which the privileges are being granted.</li>\n</ul>\n<p><img src=\"https://i.imgur.com/DBdRD4w.png\" alt=\"Screen Shot 2018-08-07 at 4.14.32 AM\"></p>\n<h3 id=\"granting-privileges\"><a class=\"header-anchor\" href=\"#granting-privileges\" aria-hidden=\"true\">#</a> Granting Privileges</h3>\n<p>Done By DBA</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">SESSION</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">TO</span> username<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Grant System Privileges:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">TO</span> username <span class=\"token keyword\">WITH</span> ADMIN <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"revoking-privileges\"><a class=\"header-anchor\" href=\"#revoking-privileges\" aria-hidden=\"true\">#</a> Revoking Privileges</h3>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">FROM</span> username<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"creating-roles\"><a class=\"header-anchor\" href=\"#creating-roles\" aria-hidden=\"true\">#</a> Creating Roles</h3>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> ROLE role_name<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-roles\"><a class=\"header-anchor\" href=\"#using-roles\" aria-hidden=\"true\">#</a> Using Roles</h3>\n<p>Assign a role to a user</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">GRANT</span> role_name <span class=\"token keyword\">TO</span> user_name\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"granting-and-revoking-privliges-on-database-objects\"><a class=\"header-anchor\" href=\"#granting-and-revoking-privliges-on-database-objects\" aria-hidden=\"true\">#</a> Granting and Revoking Privliges on Database Objects</h3>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">GRANT</span> privilege1<span class=\"token punctuation\">,</span> privilege2<span class=\"token punctuation\">,</span> …\n<span class=\"token keyword\">ON</span> object_name\n<span class=\"token keyword\">TO</span> user1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">REVOKE</span> privilege1<span class=\"token punctuation\">,</span> privilege2<span class=\"token punctuation\">,</span> …\n<span class=\"token keyword\">ON</span> object_name\n<span class=\"token keyword\">FROM</span> user1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"pl-sql\"><a class=\"header-anchor\" href=\"#pl-sql\" aria-hidden=\"true\">#</a> PL/SQL</h2>\n<p><router-link to=\"./PL_SQL.html\">GO TO PL/SQL</router-link></p>\n<h2 id=\"subversion-repository\"><a class=\"header-anchor\" href=\"#subversion-repository\" aria-hidden=\"true\">#</a> Subversion Repository</h2>\n</div>\n",null]}