{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/git/git攻略.md?vue&type=template&id=8e18e3e8","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/git/git攻略.md","mtime":1549109614393},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"git-攻略\"><a class=\"header-anchor\" href=\"#git-攻略\" aria-hidden=\"true\">#</a> Git 攻略</h1>\n<blockquote>\n<p><strong>摘要</strong>: 本文讲解 Git 是什么, 有什么用, 如何用 Git 进行版本控制, 以及\b\b\b大厂的版本管理策略.</p>\n</blockquote>\n<h2 id=\"git-干什么的\"><a class=\"header-anchor\" href=\"#git-干什么的\" aria-hidden=\"true\">#</a> Git 干什么的?</h2>\n<p><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Git 官网<OutboundLink/></a></p>\n<p><strong>Git 是一个开源的分布式版本控制系统。</strong></p>\n<p>版本控制是一种用来 &quot;记录文件内容变化，并且允许将来查阅特定版本修订情况的系统&quot;.  当编写文件时使用「版本控制系統」可以清楚的記錄每個檔案是誰在什麼時候加進來、什麼時候被修改或刪除。Git 是目前业界最流行的版本控制系統.</p>\n<p>Git 是分布式的, 相比于集中式的最大区别在于每一个客户端都是一个独立的节点，在各自的节点上都有独立的一份完整的版本库。一个人修改了文件，这时只要把修改过的文件发送给别人，别人就也都能看的到了。这样做不但提高了效率，而且即使一个人的电脑出问题了，也可以直接从其他人那里克隆一份。分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活.</p>\n<h2 id=\"开始使用-git\"><a class=\"header-anchor\" href=\"#开始使用-git\" aria-hidden=\"true\">#</a> 开始使用 Git</h2>\n<h3 id=\"初始化仓库\"><a class=\"header-anchor\" href=\"#初始化仓库\" aria-hidden=\"true\">#</a> 初始化仓库</h3>\n<p>在一个目录下使用 <code>git init</code> 指令初始化這個目錄，主要目的是要讓 Git 開始對這個目錄進行版本控制。這個指令會在這個目錄裡建立了一個 <code>.git</code> 隐藏目录.  目录是 Git 来跟踪管理版本库的, 它将默认记录项目目录中任何文件的改动。如果把这个子目录删除了，这里面记录的文件版本就都没有了.</p>\n<h3 id=\"记录每次更新到仓库\"><a class=\"header-anchor\" href=\"#记录每次更新到仓库\" aria-hidden=\"true\">#</a> 记录每次更新到仓库</h3>\n<h4 id=\"检查当前文件状态\"><a class=\"header-anchor\" href=\"#检查当前文件状态\" aria-hidden=\"true\">#</a> 检查当前文件状态</h4>\n<p>在一个空目录下执行 <code>git init</code>.  之后使用命令 <code>git status</code> 来查看这个目录的状态.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> status\nOn branch master\n\nInitial commit\n\nnothing to commit <span class=\"token punctuation\">(</span>create/copy files and use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>表示目录中没有东西可以提交.</p>\n<h4 id=\"跟踪新文件\"><a class=\"header-anchor\" href=\"#跟踪新文件\" aria-hidden=\"true\">#</a> 跟踪新文件</h4>\n<p>在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 <code>git status</code> 命令，你将看到一个新的未跟踪文件：</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>On branch master\nUntracked files:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to include <span class=\"token keyword\">in</span> what will be committed<span class=\"token punctuation\">)</span>\n\n    readme.md\n\nnothing added to commit but untracked files present <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在状态报告中可以看到新建的 README 文件出现在 Untracked files 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件.</p>\n<p>现在用 <code>git add</code> 跟踪 <code>readme.md</code> 文件.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>On branch master\n\nNo commits yet\n\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git rm --cached &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n\tnew file:   readme.md\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>只要在 Changes to be committed 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。</p>\n<h4 id=\"暂存已修改文件\"><a class=\"header-anchor\" href=\"#暂存已修改文件\" aria-hidden=\"true\">#</a> 暂存已修改文件</h4>\n<p>现在修改一下之前被跟踪的 <code>readme.md</code> 文件.  然后再执行 <code>git status</code></p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>On branch master\n\nNo commits yet\n\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git rm --cached &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n\tnew file:   readme.md\n\nChanges not staged <span class=\"token keyword\">for</span> commit:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to update what will be committed<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file>...\"</span> to discard changes <span class=\"token keyword\">in</span> working directory<span class=\"token punctuation\">)</span>\n\n\tmodified:   readme.md\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>readme.md</code> 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 <code>git add</code> 命令。这个命令将可以理解为 “<strong>添加内容到下一次提交中</strong>” 而不是 “将一个文件添加到项目中” 要更加合适。</p>\n<p>添加完后, 在执行 <code>git status</code></p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>On branch master\n\nNo commits yet\n\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git rm --cached &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n\tnew file:   readme.md\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>表示已暂存，下次提交时就会一并记录到仓库。</p>\n<h4 id=\"状态简览\"><a class=\"header-anchor\" href=\"#状态简览\" aria-hidden=\"true\">#</a> 状态简览</h4>\n<p><code>git status</code> 命令的输出十分详细，但其用语有些繁琐。 如果你使用 <code>git status -s</code> 命令或 <code>git status --short</code> 命令，你将得到一种更为紧凑的格式输出。</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> status -s\n M README\nMM Rakefile\nA  lib/git.rb\nM  lib/simplegit.rb\n?? LICENSE.txt\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>新添加的未跟踪文件前面有 <code>??</code> 标记，</li>\n<li>新添加到暂存区中的文件前面有 <code>A</code> 标记，</li>\n<li>修改过的文件前面有 <code>M</code> 标记\n<ul>\n<li>出现在右边的 <code>M</code> 表示该文件被修改了但是还没放入暂存区</li>\n<li>出现在靠左边的 <code>M</code> 表示该文件被修改了并放入了暂存区。</li>\n</ul>\n</li>\n</ul>\n<p>向 <code>Rakefile</code> 文件前面有两个 <code>MM</code>, 表示在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。</p>\n<h4 id=\"忽略文件\"><a class=\"header-anchor\" href=\"#忽略文件\" aria-hidden=\"true\">#</a> 忽略文件</h4>\n<p>有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。我们可以创建一个名为 <code>.gitignore</code> 的文件，列出要忽略的文件模式。</p>\n<p>比如:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>*.<span class=\"token punctuation\">[</span>oa<span class=\"token punctuation\">]</span>\n*~\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件.</p>\n<p>要养成一开始就设置好 <code>.gitignore</code> 文件的习惯，以免将来误提交无用的文件.</p>\n<p><code>.gitignore</code> 的格式规范如下：</p>\n<ul>\n<li>所有空行或者以 <code>＃</code> 开头的行都会被 Git 忽略。</li>\n<li>可以使用标准的 <code>glob</code> 模式匹配。</li>\n<li>匹配模式可以以（<code>/</code>）开头防止递归。</li>\n<li>匹配模式可以以（<code>/</code>）结尾指定目录。</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</li>\n</ul>\n<p><code>glob</code> 模式是指 shell 所使用的简化了的正则表达式:</p>\n<ul>\n<li>星号（<code>*</code>）匹配零个或多个任意字符;</li>\n<li><code>[abc]</code> 匹配任何一个列在方括号中的字符;</li>\n<li>问号（<code>?</code>）只匹配一个任意字符;</li>\n<li>如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code> 表示匹配所有 0 到 9 的数字）;</li>\n<li>使用两个星号（<code>*</code>) 表示匹配任意中间目录，比如<code>a/**/z</code> 可以匹配 a/z, a/b/z 或 <code>a/b/c/z</code>等。</li>\n</ul>\n<p>下面有些例子:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token comment\"># no .a files</span>\n*.a\n\n<span class=\"token comment\"># but do track lib.a, even though you're ignoring .a files above</span>\n<span class=\"token operator\">!</span>lib.a\n\n<span class=\"token comment\"># only ignore the TODO file in the current directory, not subdir/TODO</span>\n/TODO\n\n<span class=\"token comment\"># ignore all files in the build/ directory</span>\nbuild/\n\n<span class=\"token comment\"># ignore doc/notes.txt, but not doc/server/arch.txt</span>\ndoc/*.txt\n\n<span class=\"token comment\"># ignore all .pdf files in the doc/ directory</span>\ndoc/**/*.pdf\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}