{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/git/git攻略.md?vue&type=template&id=8e18e3e8","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/git/git攻略.md","mtime":1549109614393},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._m(0),_vm._m(1),_vm._m(2),_c('p',[_c('a',{attrs:{\"href\":\"https://git-scm.com/\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"Git 官网\"),_c('OutboundLink')],1)]),_vm._m(3),_c('p',[_vm._v(\"版本控制是一种用来 \\\"记录文件内容变化，并且允许将来查阅特定版本修订情况的系统\\\".  当编写文件时使用「版本控制系統」可以清楚的記錄每個檔案是誰在什麼時候加進來、什麼時候被修改或刪除。Git 是目前业界最流行的版本控制系統.\")]),_c('p',[_vm._v(\"Git 是分布式的, 相比于集中式的最大区别在于每一个客户端都是一个独立的节点，在各自的节点上都有独立的一份完整的版本库。一个人修改了文件，这时只要把修改过的文件发送给别人，别人就也都能看的到了。这样做不但提高了效率，而且即使一个人的电脑出问题了，也可以直接从其他人那里克隆一份。分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活.\")]),_vm._m(4),_vm._m(5),_vm._m(6),_vm._m(7),_vm._m(8),_vm._m(9),_vm._m(10),_c('p',[_vm._v(\"表示目录中没有东西可以提交.\")]),_vm._m(11),_vm._m(12),_vm._m(13),_c('p',[_vm._v(\"在状态报告中可以看到新建的 README 文件出现在 Untracked files 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件.\")]),_vm._m(14),_vm._m(15),_c('p',[_vm._v(\"只要在 Changes to be committed 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。\")]),_vm._m(16),_vm._m(17),_vm._m(18),_vm._m(19),_vm._m(20),_vm._m(21),_c('p',[_vm._v(\"表示已暂存，下次提交时就会一并记录到仓库。\")]),_vm._m(22),_vm._m(23),_vm._m(24),_vm._m(25),_vm._m(26),_vm._m(27),_vm._m(28),_c('p',[_vm._v(\"比如:\")]),_vm._m(29),_c('p',[_vm._v(\"第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件.\")]),_vm._m(30),_vm._m(31),_vm._m(32),_vm._m(33),_vm._m(34),_c('p',[_vm._v(\"下面有些例子:\")]),_vm._m(35)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h1',{attrs:{\"id\":\"git-攻略\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#git-攻略\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Git 攻略\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('blockquote',[_c('p',[_c('strong',[_vm._v(\"摘要\")]),_vm._v(\": 本文讲解 Git 是什么, 有什么用, 如何用 Git 进行版本控制, 以及\\b\\b\\b大厂的版本管理策略.\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"git-干什么的\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#git-干什么的\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Git 干什么的?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"Git 是一个开源的分布式版本控制系统。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"开始使用-git\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#开始使用-git\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 开始使用 Git\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"初始化仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#初始化仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 初始化仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在一个目录下使用 \"),_c('code',[_vm._v(\"git init\")]),_vm._v(\" 指令初始化這個目錄，主要目的是要讓 Git 開始對這個目錄進行版本控制。這個指令會在這個目錄裡建立了一個 \"),_c('code',[_vm._v(\".git\")]),_vm._v(\" 隐藏目录.  目录是 Git 来跟踪管理版本库的, 它将默认记录项目目录中任何文件的改动。如果把这个子目录删除了，这里面记录的文件版本就都没有了.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"记录每次更新到仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#记录每次更新到仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 记录每次更新到仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"检查当前文件状态\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#检查当前文件状态\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 检查当前文件状态\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在一个空目录下执行 \"),_c('code',[_vm._v(\"git init\")]),_vm._v(\".  之后使用命令 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 来查看这个目录的状态.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" status\\nOn branch master\\n\\nInitial commit\\n\\nnothing to commit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"create/copy files and use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add\\\"\")]),_vm._v(\" to track\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"跟踪新文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#跟踪新文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 跟踪新文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 命令，你将看到一个新的未跟踪文件：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\nUntracked files:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add <file>...\\\"\")]),_vm._v(\" to include \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"in\")]),_vm._v(\" what will be committed\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n    readme.md\\n\\nnothing added to commit but untracked files present \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add\\\"\")]),_vm._v(\" to track\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"现在用 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 跟踪 \"),_c('code',[_vm._v(\"readme.md\")]),_vm._v(\" 文件.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\n\\nNo commits yet\\n\\nChanges to be committed:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git rm --cached <file>...\\\"\")]),_vm._v(\" to unstage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tnew file:   readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"暂存已修改文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#暂存已修改文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 暂存已修改文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"现在修改一下之前被跟踪的 \"),_c('code',[_vm._v(\"readme.md\")]),_vm._v(\" 文件.  然后再执行 \"),_c('code',[_vm._v(\"git status\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\n\\nNo commits yet\\n\\nChanges to be committed:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git rm --cached <file>...\\\"\")]),_vm._v(\" to unstage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tnew file:   readme.md\\n\\nChanges not staged \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"for\")]),_vm._v(\" commit:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add <file>...\\\"\")]),_vm._v(\" to update what will be committed\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git checkout -- <file>...\\\"\")]),_vm._v(\" to discard changes \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"in\")]),_vm._v(\" working directory\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tmodified:   readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"readme.md\")]),_vm._v(\" 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 命令。这个命令将可以理解为 “\"),_c('strong',[_vm._v(\"添加内容到下一次提交中\")]),_vm._v(\"” 而不是 “将一个文件添加到项目中” 要更加合适。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"添加完后, 在执行 \"),_c('code',[_vm._v(\"git status\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\n\\nNo commits yet\\n\\nChanges to be committed:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git rm --cached <file>...\\\"\")]),_vm._v(\" to unstage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tnew file:   readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"状态简览\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#状态简览\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 状态简览\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"git status\")]),_vm._v(\" 命令的输出十分详细，但其用语有些繁琐。 如果你使用 \"),_c('code',[_vm._v(\"git status -s\")]),_vm._v(\" 命令或 \"),_c('code',[_vm._v(\"git status --short\")]),_vm._v(\" 命令，你将得到一种更为紧凑的格式输出。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" status -s\\n M README\\nMM Rakefile\\nA  lib/git.rb\\nM  lib/simplegit.rb\\n?? LICENSE.txt\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"新添加的未跟踪文件前面有 \"),_c('code',[_vm._v(\"??\")]),_vm._v(\" 标记，\")]),_c('li',[_vm._v(\"新添加到暂存区中的文件前面有 \"),_c('code',[_vm._v(\"A\")]),_vm._v(\" 标记，\")]),_c('li',[_vm._v(\"修改过的文件前面有 \"),_c('code',[_vm._v(\"M\")]),_vm._v(\" 标记\\n\"),_c('ul',[_c('li',[_vm._v(\"出现在右边的 \"),_c('code',[_vm._v(\"M\")]),_vm._v(\" 表示该文件被修改了但是还没放入暂存区\")]),_c('li',[_vm._v(\"出现在靠左边的 \"),_c('code',[_vm._v(\"M\")]),_vm._v(\" 表示该文件被修改了并放入了暂存区。\")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"向 \"),_c('code',[_vm._v(\"Rakefile\")]),_vm._v(\" 文件前面有两个 \"),_c('code',[_vm._v(\"MM\")]),_vm._v(\", 表示在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"忽略文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#忽略文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 忽略文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。我们可以创建一个名为 \"),_c('code',[_vm._v(\".gitignore\")]),_vm._v(\" 的文件，列出要忽略的文件模式。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"*.\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"oa\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n*~\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"要养成一开始就设置好 \"),_c('code',[_vm._v(\".gitignore\")]),_vm._v(\" 文件的习惯，以免将来误提交无用的文件.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\".gitignore\")]),_vm._v(\" 的格式规范如下：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"所有空行或者以 \"),_c('code',[_vm._v(\"＃\")]),_vm._v(\" 开头的行都会被 Git 忽略。\")]),_c('li',[_vm._v(\"可以使用标准的 \"),_c('code',[_vm._v(\"glob\")]),_vm._v(\" 模式匹配。\")]),_c('li',[_vm._v(\"匹配模式可以以（\"),_c('code',[_vm._v(\"/\")]),_vm._v(\"）开头防止递归。\")]),_c('li',[_vm._v(\"匹配模式可以以（\"),_c('code',[_vm._v(\"/\")]),_vm._v(\"）结尾指定目录。\")]),_c('li',[_vm._v(\"要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（\"),_c('code',[_vm._v(\"!\")]),_vm._v(\"）取反。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"glob\")]),_vm._v(\" 模式是指 shell 所使用的简化了的正则表达式:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"星号（\"),_c('code',[_vm._v(\"*\")]),_vm._v(\"）匹配零个或多个任意字符;\")]),_c('li',[_c('code',[_vm._v(\"[abc]\")]),_vm._v(\" 匹配任何一个列在方括号中的字符;\")]),_c('li',[_vm._v(\"问号（\"),_c('code',[_vm._v(\"?\")]),_vm._v(\"）只匹配一个任意字符;\")]),_c('li',[_vm._v(\"如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 \"),_c('code',[_vm._v(\"[0-9]\")]),_vm._v(\" 表示匹配所有 0 到 9 的数字）;\")]),_c('li',[_vm._v(\"使用两个星号（\"),_c('code',[_vm._v(\"*\")]),_vm._v(\") 表示匹配任意中间目录，比如\"),_c('code',[_vm._v(\"a/**/z\")]),_vm._v(\" 可以匹配 a/z, a/b/z 或 \"),_c('code',[_vm._v(\"a/b/c/z\")]),_vm._v(\"等。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# no .a files\")]),_vm._v(\"\\n*.a\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# but do track lib.a, even though you're ignoring .a files above\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"!\")]),_vm._v(\"lib.a\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# only ignore the TODO file in the current directory, not subdir/TODO\")]),_vm._v(\"\\n/TODO\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# ignore all files in the build/ directory\")]),_vm._v(\"\\nbuild/\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# ignore doc/notes.txt, but not doc/server/arch.txt\")]),_vm._v(\"\\ndoc/*.txt\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# ignore all .pdf files in the doc/ directory\")]),_vm._v(\"\\ndoc/**/*.pdf\\n\")])])])}]\n\nexport { render, staticRenderFns }"]}