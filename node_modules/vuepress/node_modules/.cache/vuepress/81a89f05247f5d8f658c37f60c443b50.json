{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/设计模式/结构型/适配器模式.md?vue&type=template&id=a630b5e4","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/设计模式/结构型/适配器模式.md","mtime":1542130108572},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"适配器模式\\\"><a href=\\\"#适配器模式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 适配器模式</h1><p>适配器模式（Adapter）：<strong>将一个类（对象）的接口（方法或者属性）转化成另外一个接口，以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决</strong>。</p><p>简单来说, 适配器就像我们生活中用的转换插头.  在编程中, 适配器就是为两个代码库所写的代码兼容运行而书写的额外代码。有了这样的适配器，你就不需要特意地重写以前的功能代码了。你只需要让用以前的代码库所写的代码适配新代码库就可以了。</p><p>假如说有一个 A 框架, 现在想让它适配 Jquery:</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 定义框架</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">A</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 通过ID获取元素</span>\\n<span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">g</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n　　<span class=\\\"token keyword\\\">return</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 为元素绑定事件</span>\\n<span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">on</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">,</span> type<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n　　<span class=\\\"token comment\\\">// 如果传递参数是字符串则以id处理，否则以元素对象处理</span>\\n　　<span class=\\\"token keyword\\\">var</span> dom <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> id <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">g</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> id<span class=\\\"token punctuation\\\">;</span>\\n　　<span class=\\\"token comment\\\">// 标准DOM2级添加事件方式</span>\\n　　<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>dom<span class=\\\"token punctuation\\\">.</span>addEventListener<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n　　　　dom<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n　　<span class=\\\"token comment\\\">// IE DOM2级添加事件方式</span>\\n　　<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>dom<span class=\\\"token punctuation\\\">.</span>attachEvent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n　　　　dom<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attachEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'on'</span> <span class=\\\"token operator\\\">+</span> type<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n　　<span class=\\\"token comment\\\">// 简易添加事件方式</span>\\n　　<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n　　　　dom<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'on'</span> <span class=\\\"token operator\\\">+</span> type<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> fn<span class=\\\"token punctuation\\\">;</span>\\n　　<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>首先 <code>g</code> 方法是通过 <code>id</code> 获取元素，所以通过 <code>$</code>（jQuery的简写名称）方法获取 jQuery 对象然后通过 <code>get</code> 获取第一个成员即可，不过 <code>on</code> 方法有些复杂，我们不能直接替换，因为 jQuery 和我们的 A 库在通过 <code>id</code> 获取元素时是有区别的，jQuery的 <code>id</code> 前面要加 <code>#</code>。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">g</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n　　<span class=\\\"token comment\\\">// 通过jQuery获取jQuery对象，然后返回第一个成员</span>\\n　　<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">on</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">,</span> type<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n　　<span class=\\\"token comment\\\">// 如果传递参数是字符串则以id处理，否则以元素对象处理</span>\\n　　<span class=\\\"token keyword\\\">var</span> dom <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> id <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'#'</span> <span class=\\\"token operator\\\">+</span> id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n　　dom<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>除此之外, 另一个例子是将数组适配成对象:</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">arrToObjAdapter</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n　　<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n　　　　name <span class=\\\"token punctuation\\\">:</span> arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n　　　　type <span class=\\\"token punctuation\\\">:</span> arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n　　　　title <span class=\\\"token punctuation\\\">:</span> arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n　　　　data <span class=\\\"token punctuation\\\">:</span> arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\n　　<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'JavaScript'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'book'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'前段编程语言'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'8月1日'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> adapterData <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">arrToObjAdapter</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>adapterData<span class=\\\"token punctuation\\\">)</span>　　<span class=\\\"token comment\\\">// {name: &quot;JavaScript&quot;, type: &quot;book&quot;, title: &quot;前段编程语言&quot;, data: &quot;8月1日&quot;}</span>\\n</code></pre></div><p>在前后端开发时, 适配器它解决了前后端的数据依赖，前端程序不再为后端传递的数据所束缚，如果后端因为架构改变导致传递的数据结构发生变化，我们只需要写个适配器就可以放心了。</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}