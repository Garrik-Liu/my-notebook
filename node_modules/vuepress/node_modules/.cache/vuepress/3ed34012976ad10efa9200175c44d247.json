{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/入门篇/使用模板引擎.md?vue&type=template&id=a403609e","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/入门篇/使用模板引擎.md","mtime":1539363781719},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"使用模板引擎\"><a class=\"header-anchor\" href=\"#使用模板引擎\" aria-hidden=\"true\">#</a> 使用模板引擎</h1>\n<h2 id=\"学习目标\"><a class=\"header-anchor\" href=\"#学习目标\" aria-hidden=\"true\">#</a> 学习目标</h2>\n<p>尝试用 EJS 模板引擎让 Node.js 渲染动态页面</p>\n<h2 id=\"什么是模板引擎-为什么要用\"><a class=\"header-anchor\" href=\"#什么是模板引擎-为什么要用\" aria-hidden=\"true\">#</a> 什么是模板引擎? 为什么要用?</h2>\n<p>在说什么是『 模板引擎 』之前请先思考一个问题: 我们之前响应给客户端的都是静态 HTML 页面, 也就是内容都已经写好的页面, 浏览器只要加载渲染就行了.  但是平时我们看到的网页大多内容都是变动的, 根据数据的不同内容也随之改变.  很明显不能靠人力去实时更新 HTML 文件.  那么该怎么让 HTML 页面去动态改变内容呢 ?</p>\n<p>你应该能想到在前端用 JavaScript 代码去获取数据, 然后渲染页面.  这的确是个好办法, 但也有两个明显缺陷是:</p>\n<ul>\n<li>因为浏览器先加载了一个内容不完全的页面, 然后用 JavaScript 获取数据渲染页面内容.  也就是当搜索引擎想抓取页面解析 HTML 内容的时候, JavaScript 代码还未被调用.  这会影响到 SEO</li>\n<li>页面在刚刚加载之后, 用户还要等一个 JavaScript 代码执行时间, 一个数据请求时间, 一个 DOM 渲染时间, 这增加的等待时间, 可能让用户体验打折扣.</li>\n</ul>\n<hr>\n<p>『 模板引擎 』让表现层 (HTML 文档) 和业务数据分离.  通过特定的语法, 来动态地用数据渲染出 HTML 文档.</p>\n<p>通过使用模板引擎就可以解决刚刚提到的问题.  HTML 文档在服务器用模板引擎根据数据动态地渲染好.  然后直接将渲染完整的页面响应给客户端.  浏览器加载完页面内容可以立即展示, 也可以减少显示页面所花的时间.</p>\n<h2 id=\"ejs-模板引擎介绍\"><a class=\"header-anchor\" href=\"#ejs-模板引擎介绍\" aria-hidden=\"true\">#</a> EJS 模板引擎介绍</h2>\n<p><a href=\"http://ejs.co/\" target=\"_blank\" rel=\"noopener noreferrer\">EJS 文档<OutboundLink/></a></p>\n<p>在这一篇里, 我要介绍的是 『 EJS 模板引擎 』它是 &quot;Embedded JavaScript&quot; 的缩写, 通过在 HTML 文件内嵌入 JavaScript 代码来进行 HTML 模板渲染。</p>\n<p>Node.js 支持模板引擎有非常多, 之所以选择讲 EJS, 是因为个人觉得它上手最快, 可以让你在不破坏 HTML 文档结构的情况下, 直接在标签内书写 JavaScript 代码.  对于前端开发人员来说学习成本很低.</p>\n<hr>\n<h3 id=\"ejs-模板语法\"><a class=\"header-anchor\" href=\"#ejs-模板语法\" aria-hidden=\"true\">#</a> EJS 模板语法</h3>\n<p>简单来说, EJS 用起来非常简单, 你只要像之前写 HTML 代码一样去写就好了.  只要最后文件后缀名改成 <code>.ejs</code> 那这就是一个 \bEJS 模板文件了.  在模板中, <code>&lt;% %&gt;</code> 括起来的内容会作为 Javascript 来编译, <code>&lt;%= %&gt;</code> 和 <code>&lt;%- %&gt;</code>将括起来的变量中的数据渲染到模板, 区别是用 <code>&lt;%=...%&gt;</code> 输出变量值，变量值若包含 <code>'&lt;'</code> <code>'&gt;'</code> <code>'&amp;'</code> 等字符会被转义, 而 <code>&lt;%-...%&gt;</code> 不会, 也就是变量值是什么就输出什么.</p>\n<p>当然除了上面讲的标签之外还有其他的, 但这里我就不多做介绍了, 大家可以自行查阅<a href=\"http://ejs.co/\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a>.</p>\n<p>光说文字, 大家理解的不清晰, 我先给两个示例:</p>\n<p>下面的模板会将 <code>users</code> 数组中的值用 <code>for</code> 循环一个个地渲染到 <code>&lt;li&gt;</code> 元素里.</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n&lt;% for(var i = 0; i &lt; users.length; i++) { %>\n&lt;% var user = users[i]; %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>&lt;%= user %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n&lt;% } %>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>假如说 <code>users = ['郭建国', '刘幸福', '张富强', '王大宝', '李钢蛋']</code> 那么渲染出来的结果应该如下:</p>\n<p><img src=\"https://i.imgur.com/utKilb7.png\" alt=\"Screen Shot 2018-10-10 at 1.50.47 PM\"></p>\n<p>让我们再来看另一个例子:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n&lt;% if (state === 'danger') { %>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>危险区域, 请勿进入<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n&lt;% } else if (state === 'warning') { %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>警告, 你即将进入危险区域<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n&lt;% } else { %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>状态安全<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n&lt;% } %>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>如果我传入变量 <code>state = 'danger'</code>, 页面应该如下图:</p>\n<p><img src=\"https://i.imgur.com/1XeqK29.png\" alt=\"Screen Shot 2018-10-10 at 2.54.47 PM\"></p>\n<h3 id=\"在-node-js-中渲染页面\"><a class=\"header-anchor\" href=\"#在-node-js-中渲染页面\" aria-hidden=\"true\">#</a> 在 Node.js 中渲染\b页面</h3>\n<p>前面我们写了 EJS 的模板代码, 但我们\b还需要让服务器根据传入数据渲染出 \bHTML 页面.</p>\n<p>首先, 还是要安装 ejs 模块:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> ejs --save\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>之后我们根据数据和模板来渲染页面.  ejs 模块提供多种方法实现, 但是我们这里\b\b先只介绍 <code>ejs.renderFile</code> \b函数.  其余的大家可以自行查阅文档.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>ejs<span class=\"token punctuation\">.</span><span class=\"token function\">renderFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li><code>filename</code> 参数是目标文件路径</li>\n<li><code>data</code> \b是你要传进模板的数据对象</li>\n<li><code>option</code> 是配置选项, 可以省略, 具体内容查看文档</li>\n<li><code>function(err, str){}</code> 是回调函数.\n<ul>\n<li><code>err</code> 是错误信息, 没有错误时为 <code>null</code>.</li>\n<li><code>str</code> 是模板生成的 HTML 内容.</li>\n</ul>\n</li>\n</ul>\n<p>前面的\b第一个\b \bEJS 模板例子在服务器的调用代码为:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 搭建 HTTP 服务器</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'郭建国'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'刘幸福'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'张富强'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'王大宝'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李钢蛋'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    ejs<span class=\"token punctuation\">.</span><span class=\"token function\">renderFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.ejs'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> users<span class=\"token punctuation\">:</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/html'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"include-指令\"><a class=\"header-anchor\" href=\"#include-指令\" aria-hidden=\"true\">#</a> include 指令</h2>\n<p>有很多时候一个网站的不同页面里\b有一些部分是相同的, 比如下面这些例子:</p>\n<p><img src=\"https://i.imgur.com/9blKMP0.png\" alt=\"Screen Shot 2018-10-12 at 12.12.15 PM\"></p>\n<p><img src=\"https://i.imgur.com/xFseWtj.png\" alt=\"Screen Shot 2018-10-12 at 12.12.39 PM\"></p>\n<p><img src=\"https://i.imgur.com/kuesrvg.png\" alt=\"Screen Shot 2018-10-12 at 12.13.00 PM\"></p>\n<p>这些内容在网站中的不同页面里\b重复出现.  如果在每一个 HTML 文件里都重新写一遍, 很明显是低效率地\b &quot;笨&quot; 行为.</p>\n<p>在 EJS 模板中, 通过 <code>include</code> 指令可以将其他的模板片段引入到当前模板.</p>\n<p>例如，如果我有 <code>&quot;./index.ejs&quot;</code> 和 <code>&quot;./header.ejs&quot;</code> 两个模板文件，我可以通过 <code>&lt;%- include('./header'); %&gt;</code> 代码让 <code>header.ejs</code> \b被 <code>index.ejs</code> 引入.</p>\n<p>\b大多数情况下, 我们需要使用能够输出<strong>原始内容</strong>的标签 <code>&lt;%-</code> 在 <code>include</code> 指令上，避免对输出的 HTML 代码做转义处理。</p>\n<hr>\n<p>现在来让我们看一个实例.  假如我要做一个个人介绍网页, 它包含: \b<strong>关于我</strong>, <strong>项目介绍</strong>, <strong>个人博客</strong>, 三个页面.</p>\n<p>每个页面都包含一个代码相同\b的 <code>header</code> 元素:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我的网站<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aboutme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>关于我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>projects<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>项目介绍<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>blog<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>个人博客<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>那么我们就可以把这段代码提取出来, 单独作为一个模板片段, 取名 <code>common-header.ejs</code></p>\n<p>之后\b在各个页面中\b引入\b:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    &lt;%- include('./templates/common-header.ejs'); %>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>关于我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>为了管理方便, 我把所有的\b EJS 模板放在了 <code>views</code> 目录, 把模板片段放在了 <code>views</code> 目录下的 <code>templates</code> 目录:</p>\n<p><img src=\"https://i.imgur.com/82n7Srg.png\" alt=\"Screen Shot 2018-10-12 at 12.58.15 PM\"></p>\n<p>HTTP 服务器路由代码如下:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 搭建 HTTP 服务器</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> urlObj <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> pathname <span class=\"token operator\">=</span> urlObj<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'/aboutme'</span><span class=\"token punctuation\">:</span>\n            ejs<span class=\"token punctuation\">.</span><span class=\"token function\">renderFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./views/aboutme.ejs'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"text/html\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'/blog'</span><span class=\"token punctuation\">:</span>\n            ejs<span class=\"token punctuation\">.</span><span class=\"token function\">renderFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./views/blog.ejs'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"text/html\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'/projects'</span><span class=\"token punctuation\">:</span>\n            ejs<span class=\"token punctuation\">.</span><span class=\"token function\">renderFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./views/projects.ejs'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"text/html\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            ejs<span class=\"token punctuation\">.</span><span class=\"token function\">renderFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./views/404.ejs'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"text/html\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>服务器运行\b起来, \b在浏览器里访问网站, 效果如下:</p>\n<p><img src=\"https://i.imgur.com/Y4p02E1.gif\" alt=\"2018-10-12 13_01_19\"></p>\n<p>在每个页面上, <code>common-header.ejs</code> 模板片段都被引入了.  代码的复用性, 简洁性都得到了提高.</p>\n</div>\n",null]}