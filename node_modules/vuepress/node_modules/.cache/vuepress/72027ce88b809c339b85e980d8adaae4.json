{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/数据库/mongodb/基础知识/基础概念.md?vue&type=template&id=25c911e2","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/数据库/mongodb/基础知识/基础概念.md","mtime":1539544726367},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"mongodb-基础知识\"><a class=\"header-anchor\" href=\"#mongodb-基础知识\" aria-hidden=\"true\">#</a> MongoDB 基础知识</h1>\n<p><a href=\"https://docs.mongodb.com/manual/core/document/\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<h2 id=\"什么是-mongodb\"><a class=\"header-anchor\" href=\"#什么是-mongodb\" aria-hidden=\"true\">#</a> 什么是 MongoDB</h2>\n<p>MongoDB 是一个基于分布式文件存储的数据库.\n属于 NoSql (非关系型数据库) 的一种\n旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p>\n<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品</p>\n<p>MongoDB 将数据存储为一个文档，数据结构由键值(key =&gt; value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>\n<h2 id=\"概念解析\"><a class=\"header-anchor\" href=\"#概念解析\" aria-hidden=\"true\">#</a> 概念解析</h2>\n<table>\n<thead>\n<tr>\n<th>SQL术语/概念</th>\n<th>MongoDB术语/概念</th>\n<th>解释/说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>database</td>\n<td>database</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>table</td>\n<td>collection</td>\n<td>数据库表/集合</td>\n</tr>\n<tr>\n<td>row</td>\n<td>document</td>\n<td>数据记录行/文档</td>\n</tr>\n<tr>\n<td>column</td>\n<td>field</td>\n<td>数据字段/域</td>\n</tr>\n<tr>\n<td>index</td>\n<td>index</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>table joins</td>\n<td></td>\n<td>表连接, MongoDB不支持</td>\n</tr>\n<tr>\n<td>primary key</td>\n<td>primary key</td>\n<td>主键, MongoDB自动将<code>_id</code>字段设置为主键</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>文档 (document) 是 MongoDB 中数据的基本单元，非常类似于关系型数据库管理系统中的行</li>\n<li>集合（collection）可以看作是一个拥有动态模式（dynamic schema）的表 (table)</li>\n<li>数据库（database）用以存放集合, MongoDB 的一个实例可以拥有多个相互独立的数据库</li>\n<li>主键 <code>_id</code> 在文档所属的集合中是唯一的</li>\n</ul>\n<h2 id=\"数据库-database\"><a class=\"header-anchor\" href=\"#数据库-database\" aria-hidden=\"true\">#</a> 数据库 - database</h2>\n<p>在 MongoDB 中，多个文档组成集合，而多个集合可以组成数据库</p>\n<p>在 mongodb 中可以建立多个数据库。每个数据库都有独立的权限，即便是在磁盘上，不同的数据库也放置在不同的文件中。按照经验，我们将有关一个应用程序的所有数据都存储在同一个数据库中。要想在同一个MongoDB服务器上存放多个应用程序或者用户的数据，就需要使用不同的数据库。</p>\n<p>MongoDB 的默认数据库为 &quot;db&quot;，该数据库存储在 data 目录中。</p>\n<h3 id=\"数据库命名\"><a class=\"header-anchor\" href=\"#数据库命名\" aria-hidden=\"true\">#</a> 数据库命名</h3>\n<p>数据库名可以是满足以下条件的任意 UTF-8 字符串:</p>\n<ul>\n<li>不能是空字符串</li>\n<li>不得含有 <code>空格</code>、<code>.</code>、<code>$</code>、<code>/</code>、<code>\\</code> 和 <code>\\0 (空字符)</code></li>\n<li>数据库名区分大小写, 推荐全部小写</li>\n<li>最多64字节</li>\n</ul>\n<p>记住一点，数据库最终会变成文件系统里的文件，而数据库名就是相应的文件名</p>\n<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库:</p>\n<ul>\n<li><code>admin</code>: 从权限的角度来看，这是 &quot;root&quot; 数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li>\n<li><code>local</code>: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li>\n<li><code>config</code>: 当 Mongo 用于分片设置时，config 数据库在内部使用，用于保存分片的相关信息。</li>\n</ul>\n<h3 id=\"基本操作\"><a class=\"header-anchor\" href=\"#基本操作\" aria-hidden=\"true\">#</a> 基本操作</h3>\n<h4 id=\"显示数据库列表\"><a class=\"header-anchor\" href=\"#显示数据库列表\" aria-hidden=\"true\">#</a> 显示数据库列表</h4>\n<p><code>show dbs</code> 命令可以显示数据库列表。</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"显示当前数据库\"><a class=\"header-anchor\" href=\"#显示当前数据库\" aria-hidden=\"true\">#</a> 显示当前数据库</h4>\n<p><code>db</code> 命令可以显示当前数据库对象或集合。</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db\ntest\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"创建-切换-数据库\"><a class=\"header-anchor\" href=\"#创建-切换-数据库\" aria-hidden=\"true\">#</a> 创建/切换 数据库</h4>\n<p><code>use</code> + <code>数据库名</code> 命令可以连接到一个指定的数据库, 如果数据库不存在，则创建数据库.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token operator\">></span> use mytest\nswitched to db mytest\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>刚创建的数据库并不在数据库的列表中, 要显示它，我们需要向数据库插入一些数据。</p>\n<p>MongoDB 中默认的数据库为 <code>test</code></p>\n<h4 id=\"删除数据库\"><a class=\"header-anchor\" href=\"#删除数据库\" aria-hidden=\"true\">#</a> 删除数据库</h4>\n<p><code>db.dropDatabase()</code> 命令可以删除当前数据库.</p>\n<h2 id=\"集合-collection\"><a class=\"header-anchor\" href=\"#集合-collection\" aria-hidden=\"true\">#</a> 集合 - collection</h2>\n<p>集合就是一组文档，如果将MongoDB中的一个文档比喻为关系型数据库中的一行，那么一个集合就相当于一张表。</p>\n<p>集合存在于数据库中，集合没有固定的结构，一个集合里面的文档可以是各式各样的，这被称为 『 动态模式 』</p>\n<p>实例:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"www.baidu.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"百度\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"www.google.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Google\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"www.runoob.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"菜鸟教程\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"num\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>虽然 MongoDB 对集合中的文档类型没有要求, 但通常情况下我们插入集合的数据都会有一定的关联性.  这么做有如下几个原因:</p>\n<ul>\n<li>一个集合里存放多种类型的文档, 会增加开发人员查询特定类型文档的难度.</li>\n<li>在包含多个文档类型的集合中查找数据速度也会变慢, 会降低性能.</li>\n<li>创建索引时，需要使用文档的附加结构（特别是创建唯一索引时）。索引是按照集合来定义的。在一个集合中只放入一种类型的文档，可以更有效地对集合进行索引.</li>\n</ul>\n<p>当第一个文档插入时，集合就会被创建。</p>\n<h3 id=\"集合命名\"><a class=\"header-anchor\" href=\"#集合命名\" aria-hidden=\"true\">#</a> 集合命名:</h3>\n<ul>\n<li>集合名不能是空字符串。</li>\n<li>集合名不能含有 <code>\\0（空字符)</code>，这个字符表示集合名的结尾。</li>\n<li>集合名不能以 <code>system.</code> 开头，这是为系统集合保留的前缀。</li>\n<li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现 <code>$</code>。</li>\n</ul>\n<h3 id=\"子集合\"><a class=\"header-anchor\" href=\"#子集合\" aria-hidden=\"true\">#</a> 子集合</h3>\n<p>组织集合的一种惯例是使用“.”分隔不同命名空间的子集合。例如，一个具有博客功能的应用可能包含两个集合，分别是 <code>blog.posts</code> 和 <code>blog.authors</code>。这是为了使组织结构更清晰，这里的 blog 集合（这个集合甚至不需要存在）跟它的子集合没有任何关系。</p>\n<p>在 MongoDB 中，使用子集合来组织数据非常高效，值得推荐。</p>\n<h3 id=\"基本操作-2\"><a class=\"header-anchor\" href=\"#基本操作-2\" aria-hidden=\"true\">#</a> 基本操作</h3>\n<h4 id=\"查看已有集合\"><a class=\"header-anchor\" href=\"#查看已有集合\" aria-hidden=\"true\">#</a> 查看已有集合</h4>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; show collections\ntest1\ntest2\ntest3\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"创建集合\"><a class=\"header-anchor\" href=\"#创建集合\" aria-hidden=\"true\">#</a> 创建集合</h4>\n<p>使用 <code>createCollection()</code> 方法来创建集合。</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>db.createCollection(name, options)\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>name: 要创建的集合名称</li>\n<li>options: 可选参数, 指定有关内存大小及索引的选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>capped</td>\n<td>布尔</td>\n<td>（可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。</td>\n</tr>\n<tr>\n<td>autoIndexId</td>\n<td>布尔</td>\n<td>（可选）如为 true，自动在 _id 字段创建索引。默认为 false。</td>\n</tr>\n<tr>\n<td>size</td>\n<td>数值</td>\n<td>（可选）为固定集合指定一个最大值（以字节计）。如果 capped 为 true，也需要指定该字段。</td>\n</tr>\n<tr>\n<td>max</td>\n<td>数值</td>\n<td>（可选）指定固定集合中包含文档的最大数量。</td>\n</tr>\n</tbody>\n</table>\n<p>在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。</p>\n<h4 id=\"插入集合\"><a class=\"header-anchor\" href=\"#插入集合\" aria-hidden=\"true\">#</a> 插入集合</h4>\n<p>在 MongoDB 中，你不需要创建集合。当你插入一些文档时，MongoDB 会自动创建集合。</p>\n<p>语法:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>db.COLLECTION_NAME.insert(DOCUMENT)\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db.test4.insert({&#39;name&#39;:&#39;test4&#39;})\nWriteResult({ &quot;nInserted&quot; : 1 })\n&gt; show collections\ntest1\ntest2\ntest3\ntest4\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"删除集合\"><a class=\"header-anchor\" href=\"#删除集合\" aria-hidden=\"true\">#</a> 删除集合</h4>\n<p>语法:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db.COLLECTION_NAME.drop()\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>\b实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db.mycol2.drop()\ntrue\n&gt;\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>如果成功删除选定集合，则 <code>drop()</code> 方法返回 <code>true</code>，否则返回 <code>false</code>。</p>\n<h2 id=\"文档-document\"><a class=\"header-anchor\" href=\"#文档-document\" aria-hidden=\"true\">#</a> 文档 - document</h2>\n<p>文档是 MongoDB 的核心概念。文档就是键值对的一个有序集.</p>\n<p>文档的数据结构和 JSON 基本一样。所有存储在集合中的数据都是 BSON 格式。</p>\n<p>BSON 是一种类似于 JSON 的二进制形式的存储格式, 简称 Binary JSON。</p>\n<p>\b实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>{\n    &quot;site&quot;: &quot;www.runoob.com&quot;, \n    &quot;name&quot;: &quot;菜鸟教程&quot;\n    }\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>&quot;site&quot;</code> 和 <code>&quot;name&quot;</code> 是这个文档的 &quot;键&quot; (key), <code>&quot;www.runoob.com&quot;</code> 和 <code>&quot;菜鸟教程&quot;</code> 是 &quot;值&quot; (value)</p>\n<p>文档中的值可以是多种不同的数据类型.  在一个集合中各个文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型.</p>\n<p>MongoDB 区分类型和大小写. 例如，下面的两个文档是不同的：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">{</span><span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"文档键命名\"><a class=\"header-anchor\" href=\"#文档键命名\" aria-hidden=\"true\">#</a> 文档键命名</h3>\n<ul>\n<li>文档的键是字符串</li>\n<li>键不能含有 <code>\\0 (空字符)</code>。这个字符用来表示键的结尾</li>\n<li><code>.</code> 和 <code>$</code> 有特别的意义，只有在特定环境下才能使用</li>\n<li>以下划线 <code>_</code> 开头的键是保留的 (不是严格要求的)</li>\n<li>一个文档内不能有重复的键</li>\n</ul>\n<h3 id=\"基本操作-3\"><a class=\"header-anchor\" href=\"#基本操作-3\" aria-hidden=\"true\">#</a> 基本操作</h3>\n<h4 id=\"插入文档\"><a class=\"header-anchor\" href=\"#插入文档\" aria-hidden=\"true\">#</a> 插入文档</h4>\n<p>使用 <code>insert()</code> 或 <code>save()</code> 方法向集合中插入文档, 如果该集合不在该数据库中， MongoDB 会自动创建该集合并插入文档.</p>\n<p>\b语法:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>db.COLLECTION_NAME.insert(document)\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>插入文档到 col 集合中:</p>\n<p>\b实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db.col.insert({\n    title: &#39;MongoDB 教程&#39;, \n    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,\n    by: &#39;菜鸟教程&#39;,\n    url: &#39;http://www.runoob.com&#39;,\n    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],\n    likes: 100\n})\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>也可以将文档定义为一个变量:</p>\n<p>\b实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; document = ({title: &#39;MongoDB 教程&#39;, \n    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,\n    by: &#39;菜鸟教程&#39;,\n    url: &#39;http://www.runoob.com&#39;,\n    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],\n    likes: 100\n});\n\n&gt; db.col.insert(document)\nWriteResult({ &quot;nInserted&quot; : 1 })\n&gt; \n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"查看已插入文档\"><a class=\"header-anchor\" href=\"#查看已插入文档\" aria-hidden=\"true\">#</a> 查看已插入文档</h4>\n<p>\b语法:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>db.COLLECTION_NAME.find()\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>\b实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db.col.find()\n{ \n    &quot;_id&quot; : ObjectId(&quot;56064886ade2f21f36b03134&quot;), \n    &quot;title&quot; : &quot;MongoDB 教程&quot;, \n    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, \n    &quot;by&quot; : &quot;菜鸟教程&quot;, \n    &quot;url&quot; : &quot;http://www.runoob.com&quot;, \n    &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], \n    &quot;likes&quot; : 100 \n}\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"更新文档\"><a class=\"header-anchor\" href=\"#更新文档\" aria-hidden=\"true\">#</a> 更新文档</h4>\n<p>使用 <code>update()</code> 和 <code>save()</code> 方法来更新集合中的文档</p>\n<p><code>update()</code> 方法用于更新已存在的文档:</p>\n<p>\b语法:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>db.collection.update(\n   &lt;query&gt;,\n   &lt;update&gt;,\n   {\n     upsert: &lt;boolean&gt;,\n     multi: &lt;boolean&gt;,\n     writeConcern: &lt;document&gt;\n   }\n)\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li><code>query</code> : update 的查询条件，类似 sql update 查询内 where 后面的。</li>\n<li><code>update</code> : update 的对象和一些更新的操作符（如 <code>$</code>,<code>$inc</code>...）等，也可以理解为 sql update 查询内 set 后面的</li>\n<li><code>upsert</code> : 可选，这个参数的意思是，如果不存在 update 的记录，是否插入 objNew , true 为插入，默认是 false，不插入。</li>\n<li><code>multi</code> : 可选，mongodb 默认是 false,只更新找到的第一条记录，如果这个参数为 true, 就把按条件查出来多条记录全部更新。</li>\n<li><code>writeConcern</code> : 可选，抛出异常的级别。</li>\n</ul>\n<p>\b实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db.col.insert({\n    &quot;title&quot;: &#39;MongoDB 教程&#39;, \n    &quot;description&quot;: &#39;MongoDB 是一个 Nosql 数据库&#39;,\n    &quot;by&quot;: &#39;菜鸟教程&#39;,\n    &quot;url&quot;: &#39;http://www.runoob.com&#39;,\n    &quot;tags&quot;: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],\n    &quot;likes&quot;: 100\n})\n\n&gt; db.col.update(\n    {\n      &#39;title&#39;:&#39;MongoDB 教程&#39;\n    }, \n    {\n      $set:{&#39;title&#39;:&#39;MongoDB&#39;}\n    }\n)\n\nWriteResult({ &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 })   \n\n&gt; db.col.find().pretty()\n{\n    &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),\n    &quot;title&quot; : &quot;MongoDB&quot;,\n    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,\n    &quot;by&quot; : &quot;菜鸟教程&quot;,\n    &quot;url&quot; : &quot;http://www.runoob.com&quot;,\n    &quot;tags&quot; : [\n            &quot;mongodb&quot;,\n            &quot;database&quot;,\n            &quot;NoSQL&quot;\n    ],\n    &quot;likes&quot; : 100\n}\n&gt;\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>save()</code> 方法通过传入的文档来替换已有文档。</p>\n<p>语法:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>db.collection.save(\n   &lt;document&gt;,\n   {\n     writeConcern: &lt;document&gt;\n   }\n)\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li><code>document</code> : 文档数据。</li>\n<li><code>writeConcern</code> :可选，抛出异常的级别。</li>\n</ul>\n<p>实例:</p>\n<p>以下实例中我们替换了 _id 为 <code>56064f89ade2f21f36b03136</code> 的文档数据：</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt;db.col.save({\n    &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),\n    &quot;title&quot; : &quot;MongoDB&quot;,\n    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,\n    &quot;by&quot; : &quot;Runoob&quot;,\n    &quot;url&quot; : &quot;http://www.runoob.com&quot;,\n    &quot;tags&quot; : [\n            &quot;mongodb&quot;,\n            &quot;NoSQL&quot;\n    ],\n    &quot;likes&quot; : 110\n})\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"删除文档\"><a class=\"header-anchor\" href=\"#删除文档\" aria-hidden=\"true\">#</a> 删除文档</h4>\n<p><code>remove()</code>方法用来移除集合中的数据</p>\n<p>语法:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>db.collection.remove(\n   &lt;query&gt;,\n   {\n     justOne: &lt;boolean&gt;,\n     writeConcern: &lt;document&gt;\n   }\n)\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li><code>query</code> :（可选）删除的文档的条件。</li>\n<li><code>justOne</code> : （可选）如果设为 true 或 1，则只删除一个文档。</li>\n<li><code>writeConcern</code> :（可选）抛出异常的级别。</li>\n</ul>\n<p>实例\b:</p>\n<p>移除 <code>title</code> 为 'MongoDB 教程' 的文档:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db.col.remove({&#39;title&#39;:&#39;MongoDB 教程&#39;})\n\nWriteResult({ &quot;nRemoved&quot; : 2 })           # 删除了两条数据\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>只想删除第一条找到的记录可以设置 <code>justOne</code> 为 <code>1</code>:</p>\n<p>实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db.col.remove({&#39;title&#39;:&#39;MongoDB 教程&#39;}, 1)\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>删除所有数据，可以使用以下方式:</p>\n<p>实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db.col.remove({})\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"查询文档\"><a class=\"header-anchor\" href=\"#查询文档\" aria-hidden=\"true\">#</a> 查询文档</h4>\n<p>查询文档使用 <code>find()</code> 方法</p>\n<p>语法:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>db.collection.find(query, projection)\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li><code>query</code> ：可选，使用查询操作符指定查询条件</li>\n<li><code>projection</code> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li>\n</ul>\n<p>需要以易读的方式来读取数据，可以使用 <code>pretty()</code> 方法:</p>\n<p>实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; db.col.find().pretty()\n</code></pre>\n<!--beforeend--></div><!--afterend--><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>格式</th>\n<th>范例</th>\n<th>RDBMS中的类似语句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>等于</td>\n<td><code>{&lt;key&gt;:&lt;value&gt;}</code></td>\n<td><code>db.col.find({&quot;by&quot;:&quot;菜鸟教程&quot;}).pretty()</code></td>\n<td>where by = '菜鸟教程'</td>\n</tr>\n<tr>\n<td>小于</td>\n<td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$lt:50}}).pretty()</code></td>\n<td>where likes &lt; 50</td>\n</tr>\n<tr>\n<td>小于或等于</td>\n<td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$lte:50}}).pretty()</code></td>\n<td>where likes &lt;= 50</td>\n</tr>\n<tr>\n<td>大于</td>\n<td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$gt:50}}).pretty()</code></td>\n<td>where likes &gt; 50</td>\n</tr>\n<tr>\n<td>大于或等于</td>\n<td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$gte:50}}).pretty()</code></td>\n<td>where likes &gt;= 50</td>\n</tr>\n<tr>\n<td>不等于</td>\n<td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$ne:50}}).pretty()</code></td>\n<td>where likes != 50</td>\n</tr>\n</tbody>\n</table>\n<p><strong>AND 条件:</strong></p>\n<p><code>find()</code> 方法可以传入多个键 ( key )，每个键 ( key ) 以逗号隔开.</p>\n<p>语法:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>db.collection.find({key1:value1, key2:value2}).pretty()\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>OR 条件:</strong></p>\n<p>OR 条件语句使用了关键字 <code>$or</code></p>\n<p>语法:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>db.collection.find(\n   {\n      $or: [\n         {key1: value1}, {key2:value2}\n      ]\n   }\n).pretty()\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>AND 和 OR 联合使用:</p>\n<p>实例:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt;db.col.find(\n    {\n        &quot;likes&quot;: {$gt:50}, \n        $or: [\n            {&quot;by&quot;: &quot;菜鸟教程&quot;},\n            {&quot;title&quot;: &quot;MongoDB 教程&quot;}\n        ]\n    }\n).pretty()\n\n# 等价于 WHERE likes &gt; 50 AND (by = &#39;菜鸟教程&#39; OR title = &#39;MongoDB 教程&#39;)\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"元数据\"><a class=\"header-anchor\" href=\"#元数据\" aria-hidden=\"true\">#</a> 元数据</h2>\n<p>不太懂, 下回再说</p>\n<p><a href=\"http://www.runoob.com/mongodb/mongodb-databases-documents-collections.html\" target=\"_blank\" rel=\"noopener noreferrer\">链接<OutboundLink/></a></p>\n<h2 id=\"数据类型\"><a class=\"header-anchor\" href=\"#数据类型\" aria-hidden=\"true\">#</a> 数据类型</h2>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值。用于存储布尔值（真/假）。</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>双精度浮点值。用于存储浮点值。</td>\n</tr>\n<tr>\n<td>Min/Max keys</td>\n<td>将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>用于将数组或列表或多个值存储为一个键。</td>\n</tr>\n<tr>\n<td>Timestamp</td>\n<td>时间戳。记录文档修改或添加的具体时间。</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>用于内嵌文档。</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>用于创建空值。</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>\n</tr>\n<tr>\n<td>Object ID</td>\n<td>对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td>Binary Data</td>\n<td>二进制数据。用于存储二进制数据。</td>\n</tr>\n<tr>\n<td>Code</td>\n<td>代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td>Regular expression</td>\n<td>正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"objectid\"><a class=\"header-anchor\" href=\"#objectid\" aria-hidden=\"true\">#</a> ObjectId</h3>\n<p>ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes</p>\n<ul>\n<li>前 4 个字节表示创建 unix 时间戳,格林尼治时间 UTC 时间，比北京时间晚了 8 个小时</li>\n<li>接下来的 3 个字节是机器标识码</li>\n<li>紧接的两个字节由进程 id 组成 PID</li>\n<li>最后三个字节是随机数</li>\n</ul>\n<p><img src=\"https://i.imgur.com/cB7Ce75.jpg\" alt=\"2875754375-5a19268f0fd9b_articlex\"></p>\n<p>MongoDB 中存储的文档必须有一个 <code>_id</code> 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象</p>\n<p>由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段\n可以通过 <code>getTimestamp</code> 函数来获取文档的创建时间</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; var newObject = ObjectId()\n&gt; newObject.getTimestamp()\n\nISODate(&quot;2017-11-25T07:21:10Z&quot;)\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>ObjectId 转为字符串:</p>\n<!--beforebegin--><div class=\"language-shell extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; newObject.str\n\n5a1919e63df83ce79df8b38f\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}