{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/计算机通用/ols/files/code.md?vue&type=template&id=12d085c2","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/计算机通用/ols/files/code.md","mtime":1534434012890},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h3 id=\\\"sql\\\"><a href=\\\"#sql\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> SQL</h3><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">CREATE</span> <span class=\\\"token operator\\\">OR</span> <span class=\\\"token keyword\\\">REPLACE</span> <span class=\\\"token keyword\\\">VIEW</span> emp_per_dept <span class=\\\"token keyword\\\">AS</span>\\n<span class=\\\"token keyword\\\">SELECT</span> dept<span class=\\\"token punctuation\\\">.</span>deptno<span class=\\\"token punctuation\\\">,</span> dname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span>emp<span class=\\\"token punctuation\\\">.</span>deptno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">AS</span> num_emps\\n<span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">RIGHT</span> <span class=\\\"token keyword\\\">JOIN</span> dept <span class=\\\"token keyword\\\">ON</span> emp<span class=\\\"token punctuation\\\">.</span>deptno <span class=\\\"token operator\\\">=</span> dept<span class=\\\"token punctuation\\\">.</span>deptno\\n<span class=\\\"token keyword\\\">GROUP</span> <span class=\\\"token keyword\\\">BY</span> dept<span class=\\\"token punctuation\\\">.</span>deptno<span class=\\\"token punctuation\\\">,</span> dname\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> dname <span class=\\\"token keyword\\\">ASC</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">CREATE</span> <span class=\\\"token operator\\\">OR</span> <span class=\\\"token keyword\\\">REPLACE</span> <span class=\\\"token keyword\\\">PROCEDURE</span> UPDATE_EMPLOYEE\\n<span class=\\\"token punctuation\\\">(</span>\\n\\tpEmpno <span class=\\\"token operator\\\">IN</span> NUMBER<span class=\\\"token punctuation\\\">,</span>\\n\\tpEname <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span>\\n\\tpJob <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span>\\n\\tpMgr <span class=\\\"token operator\\\">IN</span> NUMBER<span class=\\\"token punctuation\\\">,</span>\\n\\tpHiredate <span class=\\\"token operator\\\">IN</span> <span class=\\\"token keyword\\\">DATE</span><span class=\\\"token punctuation\\\">,</span>\\n\\tpSal <span class=\\\"token operator\\\">IN</span> NUMBER<span class=\\\"token punctuation\\\">,</span>\\n\\tpComm <span class=\\\"token operator\\\">IN</span> NUMBER<span class=\\\"token punctuation\\\">,</span>\\n\\tpDeptno <span class=\\\"token operator\\\">IN</span> NUMBER\\n<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">IS</span>\\n<span class=\\\"token keyword\\\">BEGIN</span>\\n\\t<span class=\\\"token keyword\\\">UPDATE</span> emp <span class=\\\"token keyword\\\">SET</span> ename <span class=\\\"token operator\\\">=</span> pEname<span class=\\\"token punctuation\\\">,</span>\\n\\t\\tjob <span class=\\\"token operator\\\">=</span> pJob<span class=\\\"token punctuation\\\">,</span>\\n\\t\\tmgr <span class=\\\"token operator\\\">=</span> pMgr<span class=\\\"token punctuation\\\">,</span>\\n\\t\\thiredate <span class=\\\"token operator\\\">=</span> pHiredate<span class=\\\"token punctuation\\\">,</span>\\n\\t\\tsal <span class=\\\"token operator\\\">=</span> pSal<span class=\\\"token punctuation\\\">,</span>\\n\\t\\tcomm <span class=\\\"token operator\\\">=</span> pComm<span class=\\\"token punctuation\\\">,</span>\\n\\t\\tdeptno <span class=\\\"token operator\\\">=</span> pDeptno\\n\\t<span class=\\\"token keyword\\\">WHERE</span> empno <span class=\\\"token operator\\\">=</span> pEmpno<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">END</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">/</span>\\n\\n<span class=\\\"token keyword\\\">CREATE</span> <span class=\\\"token operator\\\">OR</span> <span class=\\\"token keyword\\\">REPLACE</span> PACKAGE emp_dept_package <span class=\\\"token operator\\\">IS</span>\\n   <span class=\\\"token keyword\\\">PROCEDURE</span> create_new_employee<span class=\\\"token punctuation\\\">(</span>new_empno <span class=\\\"token operator\\\">IN</span> NUMBER<span class=\\\"token punctuation\\\">,</span> new_ename <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span> new_job <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span> \\n         new_mgr <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span> new_hiredate <span class=\\\"token operator\\\">IN</span> <span class=\\\"token keyword\\\">DATE</span><span class=\\\"token punctuation\\\">,</span> new_sal <span class=\\\"token operator\\\">IN</span> NUMBER<span class=\\\"token punctuation\\\">,</span> new_comm <span class=\\\"token operator\\\">IN</span> NUMBER<span class=\\\"token punctuation\\\">,</span> \\n         new_dept <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span> new_dept_loc <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">PROCEDURE</span> create_department<span class=\\\"token punctuation\\\">(</span>new_dname <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span> new_loc <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">FUNCTION</span> find_employee<span class=\\\"token punctuation\\\">(</span>ename_to_find VARCHAR2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">RETURN</span> NUMBER<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">FUNCTION</span> find_department<span class=\\\"token punctuation\\\">(</span>dname_to_find <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">RETURN</span> NUMBER<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">END</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">/</span>\\n\\n<span class=\\\"token keyword\\\">CREATE</span> <span class=\\\"token operator\\\">OR</span> <span class=\\\"token keyword\\\">REPLACE</span> PACKAGE BODY emp_dept_package <span class=\\\"token operator\\\">IS</span>\\n   last_deptno dept<span class=\\\"token punctuation\\\">.</span>deptno<span class=\\\"token operator\\\">%</span><span class=\\\"token keyword\\\">TYPE</span><span class=\\\"token punctuation\\\">;</span>\\n\\n   <span class=\\\"token keyword\\\">PROCEDURE</span> create_department<span class=\\\"token punctuation\\\">(</span>new_dname <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span> new_loc <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">IS</span>\\n      new_deptno dept<span class=\\\"token punctuation\\\">.</span>deptno<span class=\\\"token operator\\\">%</span><span class=\\\"token keyword\\\">TYPE</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">BEGIN</span>\\n      <span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">MAX</span><span class=\\\"token punctuation\\\">(</span>deptno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">INTO</span> last_deptno <span class=\\\"token keyword\\\">FROM</span> dept<span class=\\\"token punctuation\\\">;</span>\\n      new_deptno :<span class=\\\"token operator\\\">=</span> last_deptno <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">INSERT</span> <span class=\\\"token keyword\\\">INTO</span> dept <span class=\\\"token punctuation\\\">(</span>deptno<span class=\\\"token punctuation\\\">,</span> dname<span class=\\\"token punctuation\\\">,</span> loc<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">VALUES</span> <span class=\\\"token punctuation\\\">(</span>new_deptno<span class=\\\"token punctuation\\\">,</span> new_dname<span class=\\\"token punctuation\\\">,</span> new_loc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      last_deptno :<span class=\\\"token operator\\\">=</span> new_deptno<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">END</span><span class=\\\"token punctuation\\\">;</span>\\n   \\n   <span class=\\\"token keyword\\\">FUNCTION</span> find_department<span class=\\\"token punctuation\\\">(</span>dname_to_find <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">RETURN</span> NUMBER <span class=\\\"token operator\\\">IS</span>\\n      <span class=\\\"token keyword\\\">CURSOR</span> dept_cursor <span class=\\\"token operator\\\">IS</span> <span class=\\\"token keyword\\\">SELECT</span> deptno <span class=\\\"token keyword\\\">FROM</span> dept <span class=\\\"token keyword\\\">WHERE</span> dname <span class=\\\"token operator\\\">=</span> dname_to_find<span class=\\\"token punctuation\\\">;</span>\\n      found_deptno dept<span class=\\\"token punctuation\\\">.</span>deptno<span class=\\\"token operator\\\">%</span><span class=\\\"token keyword\\\">TYPE</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">BEGIN</span>\\n      <span class=\\\"token keyword\\\">OPEN</span> dept_cursor<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">FETCH</span> dept_cursor <span class=\\\"token keyword\\\">INTO</span> found_deptno<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">IF</span> dept_cursor<span class=\\\"token operator\\\">%</span>NOTFOUND <span class=\\\"token keyword\\\">THEN</span>\\n         found_deptno :<span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">NULL</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">IF</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">CLOSE</span> dept_cursor<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">RETURN</span> found_deptno<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">END</span><span class=\\\"token punctuation\\\">;</span>\\n   \\n   <span class=\\\"token keyword\\\">FUNCTION</span> find_employee<span class=\\\"token punctuation\\\">(</span>ename_to_find <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">RETURN</span> NUMBER <span class=\\\"token operator\\\">IS</span>\\n      <span class=\\\"token keyword\\\">CURSOR</span> emp_cursor <span class=\\\"token operator\\\">IS</span> <span class=\\\"token keyword\\\">SELECT</span> empno <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> ename <span class=\\\"token operator\\\">=</span> ename_to_find<span class=\\\"token punctuation\\\">;</span>\\n      f_emp emp_cursor<span class=\\\"token operator\\\">%</span>ROWTYPE<span class=\\\"token punctuation\\\">;</span>\\n      found_empno emp<span class=\\\"token punctuation\\\">.</span>empno<span class=\\\"token operator\\\">%</span><span class=\\\"token keyword\\\">TYPE</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">BEGIN</span>\\n      <span class=\\\"token keyword\\\">OPEN</span> emp_cursor<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">FETCH</span> emp_cursor <span class=\\\"token keyword\\\">INTO</span> f_emp<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">IF</span> emp_cursor<span class=\\\"token operator\\\">%</span>FOUND <span class=\\\"token keyword\\\">THEN</span>\\n         found_empno :<span class=\\\"token operator\\\">=</span> f_emp<span class=\\\"token punctuation\\\">.</span>empno<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">ELSE</span>\\n         found_empno :<span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">NULL</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">IF</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">CLOSE</span> emp_cursor<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">RETURN</span> found_empno<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">END</span><span class=\\\"token punctuation\\\">;</span>\\n   \\n   <span class=\\\"token keyword\\\">PROCEDURE</span> create_new_employee<span class=\\\"token punctuation\\\">(</span>new_empno <span class=\\\"token operator\\\">IN</span> NUMBER<span class=\\\"token punctuation\\\">,</span> new_ename <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span> new_job <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span> \\n         new_mgr <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span> new_hiredate <span class=\\\"token operator\\\">IN</span> <span class=\\\"token keyword\\\">DATE</span><span class=\\\"token punctuation\\\">,</span> new_sal <span class=\\\"token operator\\\">IN</span> NUMBER<span class=\\\"token punctuation\\\">,</span> new_comm <span class=\\\"token operator\\\">IN</span> NUMBER<span class=\\\"token punctuation\\\">,</span> \\n         new_dept <span class=\\\"token operator\\\">IN</span> VARCHAR2<span class=\\\"token punctuation\\\">,</span> new_dept_loc VARCHAR2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">IS</span>\\n      new_deptno dept<span class=\\\"token punctuation\\\">.</span>deptno<span class=\\\"token operator\\\">%</span><span class=\\\"token keyword\\\">TYPE</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">BEGIN</span>\\n      new_deptno :<span class=\\\"token operator\\\">=</span> find_department<span class=\\\"token punctuation\\\">(</span>new_dept<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">IF</span> new_deptno <span class=\\\"token operator\\\">IS</span> <span class=\\\"token boolean\\\">NULL</span> <span class=\\\"token keyword\\\">THEN</span>\\n         create_department<span class=\\\"token punctuation\\\">(</span>new_dept<span class=\\\"token punctuation\\\">,</span> new_dept_loc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n         new_deptno :<span class=\\\"token operator\\\">=</span> last_deptno<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">END</span> <span class=\\\"token keyword\\\">IF</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">INSERT</span> <span class=\\\"token keyword\\\">INTO</span> emp <span class=\\\"token punctuation\\\">(</span>empno<span class=\\\"token punctuation\\\">,</span> ename<span class=\\\"token punctuation\\\">,</span> job<span class=\\\"token punctuation\\\">,</span> mgr<span class=\\\"token punctuation\\\">,</span> hiredate<span class=\\\"token punctuation\\\">,</span> sal<span class=\\\"token punctuation\\\">,</span> comm<span class=\\\"token punctuation\\\">,</span> deptno<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">VALUES</span> <span class=\\\"token punctuation\\\">(</span>new_empno<span class=\\\"token punctuation\\\">,</span> new_ename<span class=\\\"token punctuation\\\">,</span> new_job<span class=\\\"token punctuation\\\">,</span> find_employee<span class=\\\"token punctuation\\\">(</span>new_mgr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> new_hiredate<span class=\\\"token punctuation\\\">,</span> new_sal<span class=\\\"token punctuation\\\">,</span> new_comm<span class=\\\"token punctuation\\\">,</span> new_deptno<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">END</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">END</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">/</span>\\n</code></pre></div><h3 id=\\\"editempproj-class\\\"><a href=\\\"#editempproj-class\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EditEmpProj Class</h3><div class=\\\"language-c++ extra-class\\\"><pre class=\\\"language-text\\\"><code>using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Web;\\n\\nnamespace EditEmpProj\\n{\\n    public class Employee\\n    {\\n        public int EmpNo { get; set; }\\n        public string Ename { get; set; }\\n        public string Job { get; set; }\\n        public int? Mgr { get; set; }\\n        public DateTime Hiredate { get; set; }\\n        public decimal Sal { get; set; }\\n        public decimal? Comm { get; set; }\\n        public int DeptNo { get; set; }\\n\\n        public Employee(int EmpNo, string Ename, string Job, int? Mgr, DateTime Hiredate, decimal Sal, decimal? Comm, int DeptNo)\\n        {\\n            this.EmpNo = EmpNo;\\n            this.Ename = Ename;\\n            this.Job = Job;\\n            this.Mgr = Mgr;\\n            this.Hiredate = Hiredate;\\n            this.Sal = Sal;\\n            this.Comm = Comm;\\n            this.DeptNo = DeptNo;\\n        }\\n    }\\n}\\n</code></pre></div><h3 id=\\\"editempproj-dao\\\"><a href=\\\"#editempproj-dao\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> EditEmpProj DAO</h3><div class=\\\"language-c++ extra-class\\\"><pre class=\\\"language-text\\\"><code>using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Web;\\nusing System.Data;\\nusing System.Data.OracleClient;\\n\\nnamespace EditEmpProj\\n{\\n    public class EmployeeDAO\\n    {\\n        private string UserName { get; set; }\\n        private string Password { get; set; }\\n\\n        public EmployeeDAO(string UserName, string Password)\\n        {\\n            this.UserName = UserName;\\n            this.Password = Password;\\n        }\\n\\n        // The code here is used by several of the procedures below.  Note that the\\n        // SELECT statements used must include the SAME columns that are being read here.\\n        private Employee FillFromDataRow(DataRow dr)\\n        {\\n            int empno = Convert.ToInt32(dr[&quot;empno&quot;]);\\n            string ename = Convert.ToString(dr[&quot;ename&quot;]);\\n            string job = Convert.ToString(dr[&quot;job&quot;]);\\n            DateTime hiredate = Convert.ToDateTime(dr[&quot;hiredate&quot;]);\\n            decimal sal = Convert.ToDecimal(dr[&quot;sal&quot;]);\\n            int deptno = Convert.ToInt32(dr[&quot;deptno&quot;]);\\n            int? mgr;\\n            decimal? comm;\\n            if (dr.IsNull(&quot;mgr&quot;))\\n                mgr = null;\\n            else\\n                mgr = Convert.ToInt32(dr[&quot;mgr&quot;]);\\n            if (dr.IsNull(&quot;comm&quot;))\\n                comm = null;\\n            else\\n                comm = Convert.ToDecimal(dr[&quot;comm&quot;]);\\n            return new Employee(empno, ename, job, mgr, hiredate, sal, comm, deptno);\\n        }\\n\\n        public List&lt;Employee&gt; FillFromDataTable(DataTable dt)\\n        {\\n            List&lt;Employee&gt; employees = new List&lt;Employee&gt;();\\n\\n            foreach (DataRow dr in dt.Rows)\\n            {\\n                Employee employee = FillFromDataRow(dr);\\n                employees.Add(employee);\\n            }\\n            return employees;\\n        }\\n\\n        public List&lt;Employee&gt; LoadAll()\\n        {\\n            OracleConnection conn = new OracleConnection(String.Format(&quot;Data Source=Neptune; User Id={0}; Password={1}&quot;, UserName, Password));\\n            OracleCommand cmd = new OracleCommand(&quot;SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno FROM emp ORDER BY ename ASC&quot;, conn);\\n            OracleDataAdapter da = new OracleDataAdapter(cmd);\\n            DataTable dt = new DataTable();\\n\\n            da.Fill(dt);\\n            return FillFromDataTable(dt);\\n        }\\n\\n        public List&lt;Employee&gt; FindByDepartmentNo(int DeptNo)\\n        {\\n            OracleConnection conn = new OracleConnection(String.Format(&quot;Data Source=Neptune; User Id={0}; Password={1}&quot;, UserName, Password));\\n            OracleCommand cmd = new OracleCommand(&quot;SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno FROM emp WHERE deptno = :deptno ORDER BY ename ASC&quot;, conn);\\n            OracleDataAdapter da = new OracleDataAdapter(cmd);\\n            DataTable dt = new DataTable();\\n\\n            cmd.Parameters.AddWithValue(&quot;:deptno&quot;, DeptNo);\\n            da.Fill(dt);\\n            return FillFromDataTable(dt);\\n        }\\n\\n        public Employee FindByEmployeeNo(int EmpNo)\\n        {\\n            OracleConnection conn = new OracleConnection(String.Format(&quot;Data Source=Neptune; User Id={0}; Password={1}&quot;, UserName, Password));\\n            OracleCommand cmd = new OracleCommand(&quot;SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno FROM emp WHERE empno = :empno&quot;, conn);\\n            OracleDataAdapter da = new OracleDataAdapter(cmd);\\n            DataTable dt = new DataTable();\\n\\n            cmd.Parameters.AddWithValue(&quot;:empno&quot;, EmpNo);\\n            da.Fill(dt);\\n\\n            if (dt.Rows.Count &gt; 0)\\n            {\\n                DataRow dr = dt.Rows[0];\\n                Employee employee = FillFromDataRow(dr);\\n                return employee;\\n            }\\n            else\\n                return null;\\n        }\\n\\n        public void SaveEmployee(Employee employee)\\n        {\\n            OracleConnection conn = new OracleConnection(String.Format(&quot;Data Source=Neptune; User Id={0}; Password={1}&quot;, UserName, Password));\\n            OracleCommand cmd = new OracleCommand(&quot;UPDATE_EMPLOYEE&quot;, conn);\\n\\n            cmd.CommandType = CommandType.StoredProcedure;\\n            cmd.Parameters.AddWithValue(&quot;pEmpno&quot;, employee.EmpNo);\\n            cmd.Parameters.AddWithValue(&quot;pEname&quot;, employee.Ename);\\n            cmd.Parameters.AddWithValue(&quot;pJob&quot;, employee.Job);\\n\\n            if (employee.Mgr.HasValue)\\n                cmd.Parameters.AddWithValue(&quot;pMgr&quot;, employee.Mgr.Value);\\n            else\\n                cmd.Parameters.AddWithValue(&quot;pMgr&quot;, DBNull.Value);\\n            cmd.Parameters.AddWithValue(&quot;pHiredate&quot;, employee.Hiredate);\\n            cmd.Parameters.AddWithValue(&quot;pSal&quot;, employee.Sal);\\n            if (employee.Comm.HasValue)\\n                cmd.Parameters.AddWithValue(&quot;pComm&quot;, employee.Comm.Value);\\n            else\\n                cmd.Parameters.AddWithValue(&quot;pComm&quot;, DBNull.Value);\\n            cmd.Parameters.AddWithValue(&quot;pDeptno&quot;, employee.DeptNo);\\n\\n            conn.Open();\\n            try\\n            {\\n                cmd.ExecuteNonQuery();\\n            }\\n            finally\\n            {\\n                conn.Close();\\n            }\\n        }\\n\\n        public void CreateEmployee(int EmpNo, string Ename, string Job, string Mname, DateTime Hiredate, decimal Sal, decimal? Comm, string Dname, string Loc)\\n        {\\n            OracleConnection conn = new OracleConnection(String.Format(&quot;Data Source=Neptune; User Id={0}; Password={1}&quot;, UserName, Password));\\n            OracleCommand cmd = new OracleCommand(&quot;emp_dept_package.create_new_employee&quot;, conn);\\n            OracleCommand cmdFindDept = new OracleCommand(&quot;emp_dept_package.find_department&quot;, conn);\\n\\n            cmdFindDept.CommandType = CommandType.StoredProcedure;\\n            cmdFindDept.Parameters.AddWithValue(&quot;dname_to_find&quot;, Dname);\\n            cmdFindDept.Parameters.Add(&quot;found_deptno&quot;, OracleType.Int32).Direction = ParameterDirection.ReturnValue;\\n\\n            conn.Open();\\n            try\\n            {\\n                if (null == Loc)\\n                {\\n                    cmdFindDept.ExecuteNonQuery();\\n                    if (Convert.IsDBNull(cmdFindDept.Parameters[&quot;found_deptno&quot;].Value))\\n                        throw new ArgumentException(&quot;Invalid Department Location&quot;);\\n                }\\n\\n                cmd.CommandType = CommandType.StoredProcedure;\\n                cmd.Parameters.AddWithValue(&quot;new_empno&quot;, EmpNo);\\n                cmd.Parameters.AddWithValue(&quot;new_ename&quot;, Ename.ToUpper());\\n                cmd.Parameters.AddWithValue(&quot;new_job&quot;, Job.ToUpper());\\n\\n                cmd.Parameters.AddWithValue(&quot;new_mgr&quot;, Mname.ToUpper()); // A &quot;&quot; value will be interpreted as NULL in Oracle\\n                cmd.Parameters.AddWithValue(&quot;new_hiredate&quot;, Hiredate);\\n                cmd.Parameters.AddWithValue(&quot;new_sal&quot;, Sal);\\n                if (Comm.HasValue)\\n                    cmd.Parameters.AddWithValue(&quot;new_comm&quot;, Comm.Value);\\n                else\\n                    cmd.Parameters.AddWithValue(&quot;new_comm&quot;, DBNull.Value);\\n                cmd.Parameters.AddWithValue(&quot;new_dept&quot;, Dname.ToUpper());\\n                cmd.Parameters.AddWithValue(&quot;new_dept_loc&quot;, Loc.ToUpper()); // A &quot;&quot; value will be interpreted as NULL in Oracle\\n                cmd.ExecuteNonQuery(); // Transaction is committed automatically (Auto Commit mode)\\n            }\\n            finally\\n            {\\n                conn.Close();\\n            }\\n        }\\n    }\\n}\\n</code></pre></div><h3 id=\\\"department-class\\\"><a href=\\\"#department-class\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Department Class</h3><div class=\\\"language-c++ extra-class\\\"><pre class=\\\"language-text\\\"><code>using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Web;\\n\\nnamespace EditEmpProj\\n{\\n    public class Department\\n    {\\n        public int DeptNo { get; set; }\\n        public string Dname { get; set; }\\n        public string Loc { get; set; }\\n\\n        public Department(int Deptno, string Dname, string Loc)\\n        {\\n            this.DeptNo = Deptno;\\n            this.Dname = Dname;\\n            this.Loc = Loc;\\n        }\\n    }\\n}\\n</code></pre></div><h3 id=\\\"departmemt-dao\\\"><a href=\\\"#departmemt-dao\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Departmemt DAO</h3><div class=\\\"language-c++ extra-class\\\"><pre class=\\\"language-text\\\"><code>using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Web;\\nusing System.Data;\\nusing System.Data.OracleClient;\\n\\nnamespace EditEmpProj\\n{\\n    public class DepartmentDAO\\n    {\\n        private string UserName { get; set; }\\n        private string Password { get; set; }\\n\\n        public DepartmentDAO(string UserName, string Password)\\n        {\\n            this.UserName = UserName;\\n            this.Password = Password;\\n        }\\n\\n        public List&lt;Department&gt; LoadAll()\\n        {\\n            OracleConnection conn = new OracleConnection(String.Format(&quot;Data Source=Neptune; User Id={0}; Password={1}&quot;, UserName, Password));\\n            OracleCommand cmd = new OracleCommand(&quot;SELECT deptno, dname, loc FROM dept&quot;, conn);\\n            OracleDataAdapter da = new OracleDataAdapter(cmd);\\n            DataTable dt = new DataTable();\\n            List&lt;Department&gt; departments = new List&lt;Department&gt;();\\n\\n            da.Fill(dt);\\n\\n            foreach(DataRow dr in dt.Rows)\\n            {\\n                int deptno = Convert.ToInt32(dr[&quot;deptno&quot;]);\\n                string dname = Convert.ToString(dr[&quot;dname&quot;]);\\n                string loc = Convert.ToString(dr[&quot;loc&quot;]);\\n                departments.Add(new Department(deptno, dname, loc));\\n            }\\n            return departments;\\n        }\\n\\n        public List&lt;DepartmentInfo&gt; LoadAllDepartmentInfo()\\n        {\\n            OracleConnection conn = new OracleConnection(String.Format(&quot;Data Source=Neptune; User Id={0}; Password={1}&quot;, UserName, Password));\\n            OracleCommand cmd = new OracleCommand(&quot;SELECT deptno, dname, num_emps FROM emp_per_dept&quot;, conn);\\n            OracleDataAdapter da = new OracleDataAdapter(cmd);\\n            DataTable dt = new DataTable();\\n            List&lt;DepartmentInfo&gt; deptinfos = new List&lt;DepartmentInfo&gt;();\\n\\n            da.Fill(dt);\\n\\n            foreach (DataRow dr in dt.Rows)\\n            {\\n                int deptno = Convert.ToInt32(dr[&quot;deptno&quot;]);\\n                string dname = Convert.ToString(dr[&quot;dname&quot;]);\\n                int numemps = Convert.ToInt32(dr[&quot;num_emps&quot;]);\\n                deptinfos.Add(new DepartmentInfo(deptno, dname, numemps));\\n            }\\n            return deptinfos;\\n        }\\n\\n        public bool DeleteDepartment(int DeptNo)\\n        {\\n            OracleConnection conn = new OracleConnection(String.Format(&quot;Data Source=Neptune; User Id={0}; Password={1}&quot;, UserName, Password));\\n            OracleCommand cmdDeleteEmployees = new OracleCommand(&quot;DELETE FROM emp WHERE deptno = :deptno&quot;, conn);\\n            OracleCommand cmdDeleteDepartment = new OracleCommand(&quot;DELETE FROM dept WHERE deptno = :deptno&quot;, conn);\\n            OracleTransaction trans;\\n\\n            cmdDeleteEmployees.Parameters.AddWithValue(&quot;:deptno&quot;, DeptNo);\\n            cmdDeleteDepartment.Parameters.AddWithValue(&quot;:deptno&quot;, DeptNo);\\n\\n            // Use transaction processing to make sure employees and department are deleted as part of the same transaction\\n            // Note that employees in the department cannot be deleted if there is an employee who is a manager to other employees outside of the department\\n            conn.Open();\\n            trans = conn.BeginTransaction();\\n            cmdDeleteEmployees.Transaction = trans;\\n            cmdDeleteDepartment.Transaction = trans;\\n            try\\n            {\\n                cmdDeleteEmployees.ExecuteNonQuery();\\n                cmdDeleteDepartment.ExecuteNonQuery();\\n                trans.Commit();\\n                return true;\\n            }\\n            catch (Exception)\\n            {\\n                trans.Rollback();\\n                return false;\\n            }\\n            finally\\n            {\\n                if (conn.State == ConnectionState.Open)\\n                    conn.Close();\\n            }\\n        }\\n    }\\n}\\n</code></pre></div><h3 id=\\\"home-page\\\"><a href=\\\"#home-page\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Home Page</h3><div class=\\\"language-c++ extra-class\\\"><pre class=\\\"language-text\\\"><code>using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Web;\\nusing System.Web.UI;\\nusing System.Web.UI.WebControls;\\n\\nnamespace EditEmpProj\\n{\\n    public partial class Home : BasePage\\n    {\\n        protected void Page_Load(object sender, EventArgs e)\\n        {\\n            if (!IsPostBack)\\n            {\\n                GetEmployeesData();\\n                GetDepartmentsData();\\n            }\\n        }\\n\\n        protected void gvEmployees_RowCommand(object sender, GridViewCommandEventArgs e)\\n        {\\n            if (&quot;EDIT&quot; == e.CommandName)\\n            {\\n                int index = Convert.ToInt32(e.CommandArgument); // The row of the button that was clicked\\n                int empno = Convert.ToInt32(gvEmployees.Rows[index].Cells[1].Text); // Get the employee number from the second column of the grid view\\n                Response.Redirect(String.Format(&quot;~/EditEmployee.aspx?empno={0}&quot;, empno)); // Redirect using a URL-encoded parameter (?empno=value).\\n            }\\n        }\\n\\n        protected void btnLogout_Click(object sender, EventArgs e)\\n        {\\n            Session.Abandon();\\n            Response.Redirect(&quot;~/Home.aspx&quot;);\\n        }\\n\\n        private void GetEmployeesData()\\n        {\\n            LoginInfo login = (LoginInfo)Session[&quot;login&quot;];\\n            EmployeeDAO employeeDAO = new EmployeeDAO(login.UserName, login.Password);\\n\\n            gvEmployees.DataSource = employeeDAO.LoadAll();\\n            gvEmployees.DataBind();\\n        }\\n\\n        private void GetDepartmentsData()\\n        {\\n            LoginInfo login = (LoginInfo)Session[&quot;login&quot;];\\n            DepartmentDAO departmentDAO = new DepartmentDAO(login.UserName, login.Password);\\n\\n            gvDepartments.DataSource = departmentDAO.LoadAllDepartmentInfo();\\n            gvDepartments.Columns[0].Visible = true; // Make sure the department number column is visible for binding so column will get a value\\n            gvDepartments.DataBind();\\n            gvDepartments.Columns[0].Visible = false; // Hide the department number column AFTER binding so column value will be present for RowCommand\\n        }\\n\\n        protected void gvDepartments_RowCommand(object sender, GridViewCommandEventArgs e)\\n        {\\n            if (&quot;DELETE&quot; == e.CommandName)\\n            {\\n                LoginInfo login = (LoginInfo)Session[&quot;login&quot;];\\n                DepartmentDAO departmentDAO = new DepartmentDAO(login.UserName, login.Password);\\n\\n                int index = Convert.ToInt32(e.CommandArgument); // The row of the button that was clicked\\n                int deptno = Convert.ToInt32(gvDepartments.Rows[index].Cells[0].Text); // Get the department number from the first (hidden) column of the grid view\\n\\n                if (departmentDAO.DeleteDepartment(deptno))\\n                {\\n                    // Must reload grid data to show employees and department have been deleted\\n                    GetEmployeesData();\\n                    GetDepartmentsData();\\n                }\\n                else\\n                    lblNoDelete.Visible = true;\\n            }\\n        }\\n\\n        protected void gvDepartments_RowDeleting(object sender, GridViewDeleteEventArgs e)\\n        {\\n\\n        }\\n    }\\n}\\n</code></pre></div><p><img src=\\\"https://i.imgur.com/0XKvtbn.png\\\" alt=\\\"Screen Shot 2018-08-16 at 11.37.48 AM\\\"></p><h3 id=\\\"sys-refcursor\\\"><a href=\\\"#sys-refcursor\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> SYS_REFCURSOR</h3><p>To create a SYS_REFCURSOR, define a SYS_REFCURSOR variable and then OPEN a SELECT statement for that cursor. E.g.</p><div class=\\\"language-c++ extra-class\\\"><pre class=\\\"language-text\\\"><code>my_cursor SYS_REFCURSOR -- In the declarations section\\nBEGIN\\n   OPEN my_cursor FOR SELECT empno, ename, sal, job, deptno FROM emp ORDER BY ename ASC;\\n   Return my_cursor;\\nEND;\\n</code></pre></div><p>Notice in the above example that the cursor is opened but not closed. The active cursor is returned to the ASP.NET program. There, an OracleDataReader object is created using the cursor to read the results.</p><div class=\\\"language-c++ extra-class\\\"><pre class=\\\"language-text\\\"><code>Dim cmd As New OracleCommand(&quot;emp_dept_package.get_employees&quot;, conn) ' Where conn is the OracleConnection object\\nDim dr As OracleDataReader\\n\\ncmd.CommandType = CommandType.StoredProcedure\\ncmd.Parameters.Add(&quot;emp_cursor&quot;, OracleType.Cursor).Direction = ParameterDirection.ReturnValue\\nconn.Open()\\ncmd.ExecuteNonQuery()\\n\\ndr = cmd.ExecuteReader(CommandBehavior.CloseConnection)\\n</code></pre></div><p>A data grid can be filled from the OracleDataReader in much the same way it was filled from the DataTable. That is</p><div class=\\\"language-c++ extra-class\\\"><pre class=\\\"language-text\\\"><code>gv.DataSource = dr ' Where gv is the GridView control\\ngv.DataBind()\\ndr.Close() ' Also closes connection thanks to CommandBehaviour.CloseConnection\\n</code></pre></div><p>If OUT parameters are used, then multiple cursors can be returned from a stored procedure or function.</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}