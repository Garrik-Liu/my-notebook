{"remainingRequest":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/模块机制.md?vue&type=template&id=209f423f","dependencies":[{"path":"/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/模块机制.md","mtime":1531598967927},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1530932815982},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1530932815981},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1530932816121}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"模块机制\"><a class=\"header-anchor\" href=\"#模块机制\" aria-hidden=\"true\">#</a> 模块机制:</h1>\n<p>在 Node.js 模块系统中，每个文件都被视为独立的模块。这个文件可能是 JavaScript 代码、JSON 或者编译过的 C/C++ 扩展</p>\n<blockquote>\n<p>比如 http 是 Node.js 的一个核心模块，其内部是用 C++ 实现的，外部用 JavaScript 封装。</p>\n</blockquote>\n<p>通过使用模块机制, 我们可以把一个复杂程序各个功能拆分, 分别封装到不同的文件. 在需要的时候引入相关的模块.\n这样做可以让代码的可读性, 复用性, 和易维护性够变得更高.</p>\n<p>Node.js 的模块机制实现参照了 CommonJS 标准.</p>\n<h2 id=\"创建-加载模块\"><a class=\"header-anchor\" href=\"#创建-加载模块\" aria-hidden=\"true\">#</a> 创建 &amp; 加载模块:</h2>\n<p>Node.js 使用 exports 对象 和 require 方法来管理模块依赖.</p>\n<ul>\n<li>\n<p>exports 对象 里定义了模块中想要被外界访问的内容.</p>\n</li>\n<li>\n<p>require 方法 引入外界模块到\b当前文件.</p>\n</li>\n</ul>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// myModule.js</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>setName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> setName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// getModule.js</span>\n<span class=\"token keyword\">var</span> myModule <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myModule'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyModule<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Garrik\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myModule<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><p>在以上示例中，myModule.js 通过在 exports 对象指定 setName 和 getName 这两个方法, 两个匿名函数被\b导出了\b.</p>\n<p>在 getmodule.js 中通过 <code>require('./myModule')</code>加载这个模块，然后就可以直接访问 myModule.js 中定义在 exports 对象里的函数了。</p>\n<h2 id=\"深入-require-方法\"><a class=\"header-anchor\" href=\"#深入-require-方法\" aria-hidden=\"true\">#</a> \b深入 require 方法:</h2>\n<p><code>require</code> 源码:</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// Loads a module at the given file path. Returns that module's</span>\n<span class=\"token comment\">// `exports` property.</span>\nModule<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">require</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token string\">'missing path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> path <span class=\"token operator\">===</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'path must be a string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">_load</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p><code>require()</code> 函数是 <code>Module\b</code>对象 原型上的一个方法.</p>\n<p>接收一个路径 (<code>path</code>) 作为参数,  <code>assert</code> 模块进行简单的 <code>path</code> 变量的判断，需要传人的 <code>path</code> 是一个 <code>string</code> 类型。</p>\n<p>模块文件的后缀 ( 例如: <code>.js</code>, <code>.json</code>, <code>.node</code>) 可以省略.</p>\n<p>当它执行的时候, 经历下面五个步骤:</p>\n<ul>\n<li>\n<p><code>Resolving</code>: 找到文件的绝对路径；</p>\n</li>\n<li>\n<p><code>Loading</code>: 判断文件内容类型；</p>\n</li>\n<li>\n<p><code>Wrapping</code>: 打包，给这个文件赋予一个私有作用范围</p>\n</li>\n<li>\n<p><code>Evaluating</code>: VM 对加载的代码进行处理的地方；</p>\n</li>\n<li>\n<p><code>Caching</code>: 缓存, 当再次需要用这个文件的时候，不需要重复一遍上面步骤。</p>\n</li>\n</ul>\n<h3 id=\"resolving-解析路径\"><a class=\"header-anchor\" href=\"#resolving-解析路径\" aria-hidden=\"true\">#</a> Resolving - 解析路径:</h3>\n<p>在每个模块中都有一个 <code>module</code>对象 (<code>Module</code> 的实例) 作为当前模块的引用.</p>\n<p><code>module</code> 对象\b可能看起来像下面这样:</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>Module <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 模块的标识符。 通常是完全解析后的文件名。</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// </span>\n  exports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Garrik'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 最先引用该模块的模块</span>\n  parent<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 模块的完全解析后的文件名</span>\n  filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'/Users/xiangliu/Desktop/testNode/myModules/myName.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 模块是否已经加载完成，或正在加载中</span>\n  loaded<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 被该模块引用的模块对象</span>\n  children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 模块的搜索路径</span>\n  paths<span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">[</span> <span class=\"token string\">'/Users/xiangliu/Desktop/testNode/myModules/node_modules'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'/Users/xiangliu/Desktop/testNode/node_modules'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'/Users/xiangliu/Desktop/node_modules'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'/Users/xiangliu/node_modules'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'/Users/node_modules'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'/node_modules'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div><!--beforeend--></div><!--afterend--><p>每一个模块都有一个唯一的 id 属性来标示它。id 通常是文件的完整绝对路径.</p>\n<p>Node 模块和文件系统中的文件通常是一一对应的，引入一个模块需要把文件内容加载到内存中。</p>\n<h4 id=\"路径参数\"><a class=\"header-anchor\" href=\"#路径参数\" aria-hidden=\"true\">#</a> 路径参数:</h4>\n<p>在用<code>require()</code>引入\b模块时, 路径参数可能有下面\b三种形式:</p>\n<ul>\n<li>相对路径: <code>./</code>开头 或 <code>../</code>开头</li>\n<li>绝对路径\b: <code>/</code>开头</li>\n<li>\b模块名 (例如: <code>http</code>, <code>fs</code>, <code>url</code>)</li>\n</ul>\n<h4 id=\"无路径-直接模块名\"><a class=\"header-anchor\" href=\"#无路径-直接模块名\" aria-hidden=\"true\">#</a> 无路径, 直接模块名:</h4>\n<p>如果我引入了一个 <code>haha</code> 模块，并没有指定它的路径的话：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> haha <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'haha'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>Node 会按照 <code>module.paths</code> 所指定的文件目录顺序依次寻找 <code>haha</code> 的所在。若有两个同名文件，则遵循就近原则。优先引入目录顺序靠前的模块.</p>\n<p>模块不一定非要是文件，也可以是个文件夹。我们可以在 node_modules 中创建一个 haha 文件夹，并且放一个 index.js 文件在其中。那么执行 <code>require('haha')</code> 将会默认使用 index.js 文件.</p>\n<p>也可以手动控制指定到其他文件，修改 <code>package.json</code> 的 <code>main</code> 属性就可以。</p>\n<h4 id=\"有路径\"><a class=\"header-anchor\" href=\"#有路径\" aria-hidden=\"true\">#</a> 有路径:</h4>\n<p>如果指定了模块的绝对路径, 或者相对路径.</p>\n<p>例如:</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> haha <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/haha'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>因为用 <code>require</code> 来加载文件时可以省略扩展名, 所以在加载的时候, Node 会猜测文件的类型.</p>\n<p>加载顺序为:</p>\n<ul>\n<li>按 js 文件来执行（先找对应路径当中是否有 haha.js 文件\b, 有就加载）</li>\n<li>按 json 文件来解析（若上面的 js 文件找不到时，则找对应路径当中的 haha.json 文件来加载）</li>\n<li>按照预编译好的 c++模块 来执行（还没有, 寻找对应路径当中的 haha.node 文件来加载）</li>\n<li>若参数字符串为一个目录（文件夹）的路径, 则自动先查找该文件夹下的 package.json 文件，然后再加载该文件当中 main字段 所指定的入口文件。（若 package.json 文件当中没有 main字段，或者根本没有 package.json 文件，则再默认查找该文件夹下的 index.js 文件, 并作为模块来载入。）</li>\n<li>要是还没有就玩蛋去吧!</li>\n</ul>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\" aria-hidden=\"true\">#</a> 参考:</h2>\n<ul>\n<li><a href=\"http://nodejs.cn/api/modules.html#modules_the_module_object\" target=\"_blank\" rel=\"noopener noreferrer\">Node 官方文档<OutboundLink/></a></li>\n<li><a href=\"https://github.com/yjhjstz/deep-into-node/blob/master/chapter2/chapter2-2.md\" target=\"_blank\" rel=\"noopener noreferrer\">深入源码 - Chapter 2<OutboundLink/></a></li>\n</ul>\n</div>\n",null]}