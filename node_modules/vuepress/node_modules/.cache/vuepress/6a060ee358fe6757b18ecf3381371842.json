{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/入门篇/搭建路由和处理表单提交.md?vue&type=template&id=71eabf80","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/入门篇/搭建路由和处理表单提交.md","mtime":1539101750925},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"搭建路由-和-处理表单提交\\\"><a href=\\\"#搭建路由-和-处理表单提交\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 搭建路由 和 处理表单提交</h1><p>之前, 我们搭建了静态文件服务器.  用户通过在浏览器搜索栏输入 URL 来请求保存在服务器的指定文件.  但是除了提供静态文件, 服务器能做的还有很多很多.</p><h2 id=\\\"学习目标\\\"><a href=\\\"#学习目标\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 学习目标</h2><p>在这一篇, 我们要学会用 Node.js 处理从前端页面的 HTML 表单中提交的信息.</p><h2 id=\\\"搭建路由\\\"><a href=\\\"#搭建路由\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 搭建路由</h2><p>为了让服务器实现更多的功能, 我们需要为其搭建路由.</p><p>『 路由 』 (Routing) 简单来说就是 <strong>请求和请求处理代码之间的映射关系</strong>.  当服务器为一个特定 URL 挂在了请求处理代码时, 所有针对于这个特定 URL 的请求都会交由其处理.</p><p>假设我们要做一个用于自我介绍的个人网页, 上面分为: 主页. 项目介绍页面, 关于我页面.  那么我们可以像下面代码中那样来搭建路由规则.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 引入相关模块</span>\\n<span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> url <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 搭建 HTTP 服务器</span>\\n<span class=\\\"token keyword\\\">var</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 获取请求 URL, 根据 URL 中的 pathname 来匹配对应的处理方法.</span>\\n    <span class=\\\"token keyword\\\">var</span> urlObj <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> urlPathname <span class=\\\"token operator\\\">=</span> urlObj<span class=\\\"token punctuation\\\">.</span>pathname<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span>urlPathname<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;/main&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token comment\\\">// 因为返回内容中有中文, 所以别忘了指定编码方式</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">&quot;Content-Type&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;text/plain; charset=utf-8&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;主页页面&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;/aboutme&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">&quot;Content-Type&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;text/plain; charset=utf-8&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;关于我页面&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;/prjects&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">&quot;Content-Type&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;text/plain; charset=utf-8&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;项目介绍页面&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 如果都不匹配就返回 404 </span>\\n        <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">404</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">&quot;Content-Type&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;text/plain; charset=utf-8&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;404 - Not Found&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 在 3000 端口监听请求</span>\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;服务器运行中.&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;正在监听 3000 端口:&quot;</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>好啦, 你可以尝试运行服务器, 然后用浏览器去请求相应的 URL, 来看看得到的响应是什么.</p><p><img src=\\\"https://i.imgur.com/KdYISvt.png\\\" alt=\\\"Screen Shot 2018-10-07 at 5.05.53 PM\\\"></p><h2 id=\\\"获取-get-表单提交\\\"><a href=\\\"#获取-get-表单提交\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 获取 GET 表单提交</h2><p>在学习了路由相关知识之后, 我们再来了解一下如何获取从客户端发过来的<strong>表单提交</strong>.  我们先介绍用 GET 方法提交的表单.</p><p>通过 GET 提交的表单内容会组装成『 查询字符串 』嵌入在请求 URL 里.  例如下面这段:</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>https://www.zhihu.com/search?type=content&amp;q=罐装汽水Garrik\\n</code></pre></div><p>从 <code>?</code> 问号开始就是这段 URL 的查询字符串; 参数之间用 <code>&amp;</code> 分开; <code>=</code> 等号前面的是参数名, 后面的是参数值.</p><p>上面这段\\b URL 的\\b查询字符串如何解析成 JSON 的话就是:</p><div class=\\\"language-json extra-class\\\"><pre class=\\\"language-json\\\"><code><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">&quot;type&quot;</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">&quot;content&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">&quot;q&quot;</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">&quot;罐装汽水Garrik&quot;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><hr><p>那么再简单了解了基础知识之后呢, 就让我们赶快来写代码吧!</p><p>首先让我们来写一个有 HTML 表单的页面, 然后命名为 login.html (当然你也可以按照你的想法写代码和命名)</p><p>这个表单\\b我想用来提交登录信息, <code>form</code> \\b元素的 <code>\\baction</code> 属性我定义为 <code>login</code>, 意思是将请求发送到 <code>login</code> 这段路径下.  <code>method</code> 属性我定义为 <code>get</code>, 意思是以 GET 方法提交表单.</p><div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>form</span> <span class=\\\"token attr-name\\\">action</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>login<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">method</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>get<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        账户: <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>username<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token punctuation\\\">/&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>br</span> <span class=\\\"token punctuation\\\">/&gt;</span></span> \\n        密码: <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>password<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token punctuation\\\">/&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>br</span> <span class=\\\"token punctuation\\\">/&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>submit<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>提交<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>form</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><p>之后再让我们\\b来写服务器代码.  通过前面的介绍, 你知道我们需要解析 URL 的查询字符串.  做到这点很简单, 只需要在调用 <code>url.parse</code> 函数解析\\b请求 URL 时为其传入第二个参数 <code>true</code>.  这个函数就会自动\\b帮你把 URL 的查询字符串解析成一个 JavaScript 对象了, \\b保存在函数\\b返回对象的 <code>query</code> 属性中.  如果没有\\b查询的话属性值就是 <code>null</code></p><p>我们可以用路由去匹配路径, 当\\b请求 URL 的路径和表单发送的路径相匹配时, 将请求交给特定代码去处理.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 解析请求 URL</span>\\n    <span class=\\\"token keyword\\\">var</span> urlObj <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 获取请求 URL 的路径</span>\\n    <span class=\\\"token keyword\\\">var</span> urlPathname <span class=\\\"token operator\\\">=</span> urlObj<span class=\\\"token punctuation\\\">.</span>pathname<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 获取请求 URL 的查询字符串解析成的对象</span>\\n    <span class=\\\"token keyword\\\">var</span> queryObj <span class=\\\"token operator\\\">=</span> urlObj<span class=\\\"token punctuation\\\">.</span>query<span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token comment\\\">// 路由</span>\\n    <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span>urlPathname<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 响应 login 页面</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;/&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token comment\\\">// 我用了静态服务器那篇的模块\\b, \\b不了解的地方可以去那篇参考</span>\\n            <span class=\\\"token function\\\">readStaticFile</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;./login.html&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 响应查询对象的 JSON 形式到浏览器 </span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;/login&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">&quot;Content-Type&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;text/plain&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">JSON</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>queryObj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 错误处理</span>\\n        <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">readStaticFile</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;./404.html&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>当\\b运行起服务器\\b之后, 访问 login 页面, 提交表单你看到的应该像是下面这样:</p><p><img src=\\\"https://i.imgur.com/i4nMxmW.png\\\" alt=\\\"Screen Shot 2018-10-09 at 12.49.09 AM\\\"></p><p><img src=\\\"https://i.imgur.com/XDBIqAB.png\\\" alt=\\\"Screen Shot 2018-10-09 at 12.49.20 AM\\\"></p><h2 id=\\\"获取-post-表单提交\\\"><a href=\\\"#获取-post-表单提交\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 获取 POST 表单提交</h2><p>说完 GET, 我们再来说说用 POST 方法提交表单.  不同于用 GET 方法时, 提交的内容\\b都包含在 URL 里.  POST 提交的内容全部的都在请求体中.</p><p>我们\\b HTTP 服务器 <code>http.createServer</code> 接收的请求对象 <code>req</code> 并没有一个属性\\b内容为请求体.  原因是 POST 请求体\\b可能体积非常大, 如果每次接收请求都包含请求体的话会\\b很耗时.  而且万一遇到了恶意 \\bPOST 请求攻击, 服务器的资源就被大大地浪费了.</p><p>为了获取 POST \\b请求体, 我们需要手动来操作.  因为 POST 请求数据量可能很大, 所以它被拆分成了很多个小数据块 ( chunk ) 我们通过在服务器\\b监听请求对象 <code>\\breq</code> 的\\b <code>'data'</code> 事件来一个个地接收\\b这些数据块, 并将其\\b拼接在一起.</p><p>当请求\\b传输完毕, 会触发请求对象 <code>req</code> 的\\b <code>'end'</code> 事件.  我们需要监听它, 事件触发后, 在其\\b事件处理函数中解析 POST 的请求体.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> urlObj <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> urlPathname <span class=\\\"token operator\\\">=</span> urlObj<span class=\\\"token punctuation\\\">.</span>pathname<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span>urlPathname<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;/&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">readStaticFile</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;./login.html&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;/login&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token comment\\\">// 当请求方法为 POST 时触发</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>method <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'POST'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// 用于保存拼接后的请求体</span>\\n                <span class=\\\"token keyword\\\">var</span> post <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token comment\\\">// 'data' 事件触发, 将接受的数据块 chunk 拼接到 post 变量上</span>\\n                req<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>chunk<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    post <span class=\\\"token operator\\\">+=</span> chunk<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token comment\\\">// 请求\\b完毕, 'end' 事件触发</span>\\n                req<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'end'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token comment\\\">// querystring 是 Node.js 自带模块, parse 方法用于将查询字符串解析成对象</span>\\n                    <span class=\\\"token keyword\\\">var</span> queryObj <span class=\\\"token operator\\\">=</span> querystring<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>post<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token comment\\\">// 将接收的 POST 请求体以 \\bJSON 格式响应回\\b客户端</span>\\n                    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">&quot;Content-Type&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;text/plain&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">JSON</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>queryObj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">readStaticFile</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;./404.html&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>对了, 最重要的一点, 别忘了将 login.html 文件中的表单提交方法从 <code>get</code> 改成 <code>post</code></p><div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>form</span> <span class=\\\"token attr-name\\\">action</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>login<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">method</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>post<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token comment\\\">&lt;!-- 省略了 --&gt;</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>form</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><p>现在运行服务器, 提交表单, 看看结果是什么.  应该效果像下图所示:</p><p><img src=\\\"https://i.imgur.com/7h0VDsV.png\\\" alt=\\\"Screen Shot 2018-10-09 at 12.49.09 AM\\\"></p><p><img src=\\\"https://i.imgur.com/UwoVewr.png\\\" alt=\\\"Screen Shot 2018-10-09 at 10.43.14 AM\\\"></p><h2 id=\\\"post-文件上传\\\"><a href=\\\"#post-文件上传\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> POST 文件上传</h2>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"文件上传我们可以很方便的用第三方模块 \"),_vm._ssrNode(\"<a href=\\\"https://www.npmjs.com/package/formidable\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"formidable\"),_c('OutboundLink')],2),_vm._ssrNode(\" 来实现.\")],2),_vm._ssrNode(\"<p>首先用 npm 来安装模块:</p><div class=\\\"language-bash extra-class\\\"><pre class=\\\"language-bash\\\"><code><span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> formidable --save\\n</code></pre></div><p>formidable 是用于是表单数据解析的模块, 非常适合用于文件上传的处理.  使用该模块时, 先要调用它的 <code>IncomingForm</code> 构造函数初始模块.  \\b该函数\\b\\b返回一个 <code>IncomingForm</code> 实例用于解处理表单提交数据.  之后通过调用该实例的 <code>parse</code> 方法来解析数据.</p><p>当用户使用表单提交数据时，表单中可能会包含两类数据: 普通表单数据, 文件数据.  <code>parse</code> 方法解析时，会将这两种数据分别放到<code>fields</code> 和 <code>files</code> 这两个回调参数中.</p><p>那么不多废话直接上代码:</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 模块引入</span>\\n<span class=\\\"token keyword\\\">var</span> formidable <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'formidable'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> urlObj <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> urlPathname <span class=\\\"token operator\\\">=</span> urlObj<span class=\\\"token punctuation\\\">.</span>pathname<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span>urlPathname<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;/&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">readStaticFile</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;./upload.html&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 路由为 '/upload'</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">&quot;/upload&quot;</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>method <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'POST'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// 初始化 formidable 的 IncomingForm 实例</span>\\n                <span class=\\\"token keyword\\\">var</span> form <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">formidable<span class=\\\"token punctuation\\\">.</span>IncomingForm</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// uploadDir 设置上传文件时临时文件存放的位置</span>\\n                form<span class=\\\"token punctuation\\\">.</span>uploadDir <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;./uploads&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token comment\\\">// keepExtensions 属性设置是否保留上传文件的扩展名, 默认为 false</span>\\n                form<span class=\\\"token punctuation\\\">.</span>keepExtensions <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                \\n                <span class=\\\"token comment\\\">// 开始解析</span>\\n                form<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> fields<span class=\\\"token punctuation\\\">,</span> files<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token keyword\\\">var</span> message <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;文件解析失败&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token keyword\\\">var</span> message <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;文件上传成功&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">&quot;Content-Type&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;text/plain;charset=utf-8&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span>message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">readStaticFile</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;./404.html&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>服务器代码写完后, 让我们写 upload.html 文件:</p><div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>form</span> <span class=\\\"token attr-name\\\">action</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>upload<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">enctype</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>multipart/form-data<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">method</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>post<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>file<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>upload<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token punctuation\\\">/&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>br</span> <span class=\\\"token punctuation\\\">/&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>submit<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>提交<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>form</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><p>注意\\b要设置的表单的编码方式 <code>enctype</code> 为 <code>&quot;multipart/form-data&quot;</code> 表单数据默认的编码方式为 <code>&quot;application/x-www-form-urlencoded&quot;</code> 不可用于文件上传.  在使用包含文件上传控件的表单时，必须使用 <code>&quot;multipart/form-data&quot;</code> 这个值.</p><p>写好后, 运行服务器, 上传一张你喜欢的照片, 看看结果是什么.  以下是我的操作:</p><p><img src=\\\"https://i.imgur.com/bpItXM7.png\\\" alt=\\\"Screen Shot 2018-10-09 at 11.54.45 AM\\\"></p><p><img src=\\\"https://i.imgur.com/GlXAnwX.png\\\" alt=\\\"Screen Shot 2018-10-09 at 11.55.17 AM\\\"></p><p>可以看到照片已经上传到了 uploads 目录\\b下.</p><h2 id=\\\"get-vs-post\\\"><a href=\\\"#get-vs-post\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> GET vs POST</h2><p>前面分别用 GET 和 POST 方法提交了表单, 那么这两种方法到底区别是什么呢?</p><p>先\\b来看看 MDN 对这两个方法的定义:</p><ul><li>HTTP GET 方法: 请求指定的资源.  使用 GET 的请求应该只用于获取数据</li><li>HTTP POST 方法: 发送数据给服务器</li></ul><p>上面\\b说的已经很简洁, 当你想要请求服务器上的资源时用 \\bGET 方法.  发送数据时用 POST 方法.  像我之前用 \\bGET 方法提交登录信息, 是不符合规范的. \\b 实际开发中, 这种行为不允许出现.</p><hr><p>说完定义, 让我们再来看看这两种方法在表现上有什么不同.</p><ul><li><p>善于观察的你一定已经发现, GET 提交的表单数据显式地添加在了请求 URL 的查询字符串中.  而 POST 把提交的数据放置在了请求体中.  这也体现出为什么 GET\\b 不能用于传输\\b数据, 你总不希望你的账号和密码这么明显地暴露在 URL 里吧.</p></li><li><p>因为浏览器对 \\b\\bURL 的长度都有限制, 所以 GET 方式提交的数据是有大小限制的, 一般不超过 1024 字节.  理论上讲， POST 提交数据时没有大小限制的.  但出于性能考虑, 服务器接收时可能对 POST 传输的数据大小进行限制.</p></li></ul>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}