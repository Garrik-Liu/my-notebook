{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/基础知识/事件.md?vue&type=template&id=6361d1e9","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/基础知识/事件.md","mtime":1545362575236},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"事件\"><a class=\"header-anchor\" href=\"#事件\" aria-hidden=\"true\">#</a> 事件</h1>\n<p>JavaScript与HTML之间的交互是通过事件实现的。事件，就是文档或浏览器窗口中发生的一些特定的<strong>交互瞬间</strong>。</p>\n<p>可以使用侦听器（或处理程序）来预订事件，以便事件发生时执行相应的代码。这种在传统软件工程中被称为观察员模式的模型, 让页面的结构, 样式, 行为之间解耦</p>\n<h2 id=\"事件流\"><a class=\"header-anchor\" href=\"#事件流\" aria-hidden=\"true\">#</a> 事件流</h2>\n<p><strong>『 事件流 』描述的是从页面中接收事件的顺序</strong>。如果你单击了某个按钮，他们都认为单击事件不仅仅发生在按钮上。换句话说，在单击按钮的同时，你也单击了按钮的容器元素，甚至也单击了整个页面。</p>\n<ul>\n<li>IE的事件流是<strong>事件冒泡流</strong></li>\n<li>Netscape Communicator的事件流是<strong>事件捕获流</strong>。</li>\n</ul>\n<h3 id=\"事件冒泡\"><a class=\"header-anchor\" href=\"#事件冒泡\" aria-hidden=\"true\">#</a> 事件冒泡</h3>\n<p>IE的事件流叫做事件冒泡（event bubbling）</p>\n<p><strong>事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）</strong></p>\n<p><img src=\"http://www.ituring.com.cn/figures/2012/Professional%20JavaScript%20for%20Web%20Developers%203rd%20Edition/16.d13z.01.png\" alt=\"\"></p>\n<h3 id=\"事件捕获\"><a class=\"header-anchor\" href=\"#事件捕获\" aria-hidden=\"true\">#</a> 事件捕获</h3>\n<p>Netscape Communicator团队提出的另一种事件流叫做事件捕获（event capturing）。</p>\n<p><strong>事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。</strong></p>\n<p>事件捕获的用意在于在事件到达预定目标之前捕获它。</p>\n<p><img src=\"http://www.ituring.com.cn/figures/2012/Professional%20JavaScript%20for%20Web%20Developers%203rd%20Edition/16.d13z.02.png\" alt=\"\"></p>\n<h3 id=\"dom事件流\"><a class=\"header-anchor\" href=\"#dom事件流\" aria-hidden=\"true\">#</a> DOM事件流</h3>\n<p>“DOM2级事件”规定的事件流包括三个阶段：<strong>事件捕获阶段, 处于目标阶段, 事件冒泡阶段</strong>。</p>\n<p>首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。</p>\n<p><img src=\"http://www.ituring.com.cn/figures/2012/Professional%20JavaScript%20for%20Web%20Developers%203rd%20Edition/16.d13z.03.png\" alt=\"\"></p>\n<p>在DOM事件流中，实际的目标（<code>&lt;div&gt;</code>元素）在捕获阶段不会接收到事件。这意味着在捕获阶段，事件从document到<code>&lt;html&gt;</code>再到<code>&lt;body&gt;</code>后就停止了。下一个阶段是“处于目标”阶段，于是事件在<code>&lt;div&gt;</code>上发生，并在事件处理（后面将会讨论这个概念）中被看成冒泡阶段的一部分。然后，冒泡阶段发生，事件又传播回文档。</p>\n<h2 id=\"事件处理程序\"><a class=\"header-anchor\" href=\"#事件处理程序\" aria-hidden=\"true\">#</a> 事件处理程序</h2>\n<p><strong>事件就是用户或浏览器自身执行的某种动作</strong>。诸如click、load 和 mouseover，都是事件的名字。而<strong>响应某个事件的函数就叫做事件处理程序</strong>（或事件侦听器）</p>\n<p>事件处理程序的名字以&quot;on&quot;开头，因此 click 事件的事件处理程序就是 <code>onclick</code>，</p>\n<h3 id=\"html事件处理程序\"><a class=\"header-anchor\" href=\"#html事件处理程序\" aria-hidden=\"true\">#</a> HTML事件处理程序</h3>\n<p>某个元素支持的每种事件，都可以使用一个与相应事件处理程序同名的HTML特性来指定。这个特性的值应该是能够执行的 JavaScript 代码</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">function</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Click Me<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>showMessage()<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"dom0级事件处理程序\"><a class=\"header-anchor\" href=\"#dom0级事件处理程序\" aria-hidden=\"true\">#</a> DOM0级事件处理程序</h3>\n<p>首先必须取得一个要操作的对象的引用。每个元素（包括 <code>window</code> 和 <code>document</code> ）都有自己的事件处理程序属性，这些属性通常全部小写，例如onclick。将这种属性的值设置为一个函数，就可以指定事件处理程序</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>使用DOM0级方法指定的事件处理程序被认为是元素的方法。因此，这时候的事件处理程序是在元素的作用域中运行；换句话说，程序中的 <code>this</code> 引用当前元素。</p>\n<h3 id=\"dom2级事件处理程序\"><a class=\"header-anchor\" href=\"#dom2级事件处理程序\" aria-hidden=\"true\">#</a> DOM2级事件处理程序</h3>\n<p>“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：<code>addEventListener()</code>和<code>removeEventListener()</code>。</p>\n<p>所有DOM节点中都包含这两个方法，并且它们都接受3个参数：要处理的事件名、作为事件处理程序的函数 和 一个布尔值。</p>\n<p>最后这个布尔值参数如果是<code>true</code>，表示在捕获阶段调用事件处理程序；如果是<code>false</code>，表示在冒泡阶段调用事件处理程序。</p>\n<p>添加的事件处理程序也是在其依附的元素的作用域中运行。使用DOM2级方法添加事件处理程序的主要好处是可以添加多个事件处理程序。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>通过<code>addEventListener()</code>添加的事件处理程序只能使用<code>removeEventListener()</code>来移除；移除时传入的参数与添加处理程序时使用的参数相同。</p>\n<p>这也意味着通过<code>addEventListener()</code>添加的匿名函数将无法移除.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//这里省略了其他代码</span>\n\nbtn<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//没有用！</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>大多数情况下，都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各种浏览器。最好只在需要在事件到达目标之前截获它的时候将事件处理程序添加到捕获阶段。如果不是特别需要，我们不建议在事件捕获阶段注册事件处理程序。</p>\n<h3 id=\"ie事件处理程序\"><a class=\"header-anchor\" href=\"#ie事件处理程序\" aria-hidden=\"true\">#</a> IE事件处理程序</h3>\n<p>IE实现了与DOM中类似的两个方法：<code>attachEvent()</code>和<code>detachEvent()</code>。这两个方法接受相同的两个参数：事件处理程序名称与事件处理程序函数。由于IE8及更早版本只支持事件冒泡，所以通过<code>attachEvent()</code>添加的事件处理程序都会被添加到冒泡阶段。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbtn<span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onclick\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>注意，<code>attachEvent()</code>的第一个参数是<code>&quot;onclick&quot;</code>，而非DOM的<code>addEventListener()</code>方法中的<code>&quot;click&quot;</code>。</p>\n<p>在IE中使用<code>attachEvent()</code>与使用DOM0级方法的主要区别在于事件处理程序的作用域。在使用DOM0级方法的情况下，事件处理程序会在其所属元素的作用域内运行；在使用<code>attachEvent()</code>方法的情况下，<strong>事件处理程序会在全局作用域中运行</strong></p>\n<h2 id=\"事件对象\"><a class=\"header-anchor\" href=\"#事件对象\" aria-hidden=\"true\">#</a> 事件对象</h2>\n<p><a href=\"http://www.w3school.com.cn/jsref/dom_obj_event.asp\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<p>在触发DOM上的某个事件时，会产生一个事件对象<code>event</code>，这个对象中包含着所有与事件有关的信息。</p>\n<p>兼容DOM的浏览器会将一个<code>event</code>对象传入到事件处理程序中。无论指定事件处理程序时使用什么方法（DOM0级或DOM2级），都会传入<code>event</code>对象。</p>\n<p>在事件处理程序内部，对象<code>this</code>始终等于<code>currentTarget</code>的值(注册了事件处理程序的那个元素)，而<code>target</code>则只包含事件的实际目标。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//true</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">//true</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target <span class=\"token operator\">===</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>当单击这个例子中的按钮时，<code>this</code>和<code>currentTarget</code>都等于<code>document.body</code>，因为事件处理程序是注册到这个元素上的。然而，<code>target</code>元素却等于按钮元素，因为它是<code>click</code>事件真正的目标。由于按钮上并没有注册事件处理程序，结果<code>click</code>事件就冒泡到了<code>document.body</code>，在那里事件才得到了处理。</p>\n<p>要阻止特定事件的默认行为，可以使用<code>preventDefault()</code>方法。例如，链接的默认行为就是在被单击时会导航到其<code>href</code>特性指定的URL。但只有<code>cancelable</code>属性设置为<code>true</code>的事件，才可以使用<code>preventDefault()</code>来取消其默认行为。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myLink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlink<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>stopPropagation()</code>方法用于立即停止事件在DOM层次中的传播，即取消进一步的事件捕获或冒泡。</p>\n<p>事件对象的<code>eventPhase</code>属性，可以用来确定事件当前正位于事件流的哪个阶段。</p>\n<ul>\n<li>如果是在捕获阶段调用的事件处理程序，那么<code>eventPhase</code>等于<code>1</code>；</li>\n<li>如果事件处理程序处于目标对象上，则<code>eventPhase</code>等于<code>2</code>；</li>\n<li>如果是在冒泡阶段调用的事件处理程序，<code>eventPhase</code>等于<code>3</code>。\n这里要注意的是，尽管“处于目标”发生在冒泡阶段，但<code>eventPhase</code>仍然一直等于2。</li>\n</ul>\n<h2 id=\"事件类型\"><a class=\"header-anchor\" href=\"#事件类型\" aria-hidden=\"true\">#</a> 事件类型</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events\" target=\"_blank\" rel=\"noopener noreferrer\">MDN - 事件类型<OutboundLink/></a></p>\n<p>直接看文档就好了!</p>\n<h2 id=\"内存和性能\"><a class=\"header-anchor\" href=\"#内存和性能\" aria-hidden=\"true\">#</a> 内存和性能</h2>\n<p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能。首先，每个函数都是对象，都会占用内存；内存中的对象越多，性能就越差。其次，必须事先指定所有事件处理程序而导致的DOM访问次数，会延迟整个页面的交互就绪时间。</p>\n<h3 id=\"事件委托\"><a class=\"header-anchor\" href=\"#事件委托\" aria-hidden=\"true\">#</a> 事件委托</h3>\n<p>对“事件处理程序过多”问题的解决方案就是事件委托。事件委托利用了事件冒泡，<strong>只指定一个事件处理程序，就可以管理某一类型的所有事件</strong>。使用事件委托，只需在DOM树中尽量最高的层次上添加一个事件处理程序.  例如，<code>click</code>事件会一直冒泡到<code>document</code>层次。也就是说，我们可以为整个页面指定一个<code>onclick</code>事件处理程序，而不必给每个可单击的元素分别添加事件处理程序。</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>myLinks<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>goSomewhere<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Go somewhere<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>doSomething<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Do something<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sayHi<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Say hi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myLinks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nEventUtil<span class=\"token punctuation\">.</span><span class=\"token function\">addHandler</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event <span class=\"token operator\">=</span> EventUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> EventUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getTarget</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"doSomething\"</span><span class=\"token punctuation\">:</span>\n            document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"I changed the document's title\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"goSomewhere\"</span><span class=\"token punctuation\">:</span>\n            location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.wrox.com\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"sayHi\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}