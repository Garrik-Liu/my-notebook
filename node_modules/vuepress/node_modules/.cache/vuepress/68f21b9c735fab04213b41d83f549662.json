{"remainingRequest":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/基础知识.md?vue&type=template&id=9deef2ca","dependencies":[{"path":"/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/基础知识.md","mtime":1531462371377},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1530932815982},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1530932815981},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1530932816121}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"基础知识\\\"><a href=\\\"#基础知识\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基础知识</h1><h2 id=\\\"基础概念\\\"><a href=\\\"#基础概念\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基础概念</h2><p>Node.js 是一个使用<strong>单线程, 事件驱动、非阻塞式 (异步式) I/O</strong> 的模型, 基于 <strong>Chrome V8 引擎</strong>的 <strong>JavaScript 运行环境</strong>。\\b允许 J\\bs 可以\\b脱离浏览器去执行.</p><blockquote><p>要实现在后台运行 JavaScript 代码，代码需要先被解释然后正确的执行。Node.js 的原理正是如此，它使用了 Google 的 V8 虚拟机（ Google 的 Chrome 浏览器使用的 JavaScript 执行环境，来解释和执行 JavaScript 代码。</p></blockquote><h3 id=\\\"单线程-非阻塞-i-o-和-事件驱动\\\"><a href=\\\"#单线程-非阻塞-i-o-和-事件驱动\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 单线程, 非阻塞 I/O 和 事件驱动</h3><p>Node.js 最大的特点就是应用 非阻塞 I/O 与 事件驱动的编程模式。</p><h4 id=\\\"什么是阻塞\\\"><a href=\\\"#什么是阻塞\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么是阻塞?</h4><p>在说非阻塞\\b之前, 先了解什么是阻塞.\\n线程在执行中如果遇到磁盘读写或网络通信(统称为 I/O 操作)， 通常要耗费较长的时间.  这时候操作系统会剥夺这个线程的 CPU 控制权，使其暂停执行，同时将资源让给其他的工作线程，这种线程调度方式称为阻塞。\\n当 I/O 操作完毕时，操作系统 将这个线程的阻塞状态解除，恢复其对CPU的控制权，令其继续执行。这种 I/O 模式就是通常的 <strong>阻塞式 I/O</strong></p><p>相应地，异步式 I/O 则针对 所有 I/O 操作不采用阻塞的策略。当线程遇到 I/O 操作时，不会以阻塞的方式等待 I/O 操作 的完成或数据的返回. 而只是将 I/O 请求发送给操作系统，继续执行下一条语句。\\n当操作 系统完成 I/O 操作时，以事件的形式通知执行 I/O 操作的线程，线程会在特定时候处理这个 事件。为了处理异步 I/O，线程必须有事件循环，不断地检查有没有未处理的事件，依次予以处理。这种 I/O 模式就是通常的 <strong>非阻塞式 I/O</strong></p><h4 id=\\\"非阻塞好处\\\"><a href=\\\"#非阻塞好处\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 非阻塞好处</h4><p>因为采用了非阻塞, 个线程永远在执行计算操作，这个线程所使用的 CPU 核心利用率几近是 100%，可以提高服务器的利用率, 提高系统吞吐量.</p><p>假设我们有一项工作，可以分为两个计算部分和一个 I/O 部分，I/O 部分占的时间比计算多得多。如果我们使用阻塞 I/O，那么要想获得高并发就必须开启多个线程。而使用异步式 I/O 时，单线程即可胜任。</p><p><img src=\\\"https://i.imgur.com/SW5NWqi.png\\\" alt=\\\"Screen Shot 2018-07-12 at 4.37.15 PM\\\"></p><p><img src=\\\"https://i.imgur.com/FAfPumU.png\\\" alt=\\\"Screen Shot 2018-07-12 at 4.37.22 PM\\\"></p><p>总而言之, 使用单线程事件驱动的异步式 I/O 可以\\b避免服务器对于多线程的开销, 提高对服务器CPU性能的利用效率. 不好的\\b地方, 可以就在于理解起来不直观\\b吧.</p><p><img src=\\\"https://i.imgur.com/PofEKRT.png\\\" alt=\\\"Screen Shot 2018-07-12 at 4.41.05 PM\\\"></p><h3 id=\\\"回调函数\\\"><a href=\\\"#回调函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 回调函数</h3><p>在 Node.js 中，异步式 I/O 是通过回调函数来实现的。</p><p>先看看代码的不同:</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 同步式读取文件</span>\\n<span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> data <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'file.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 异步式读取文件</span>\\n<span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'file.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p>同步式读取代码将文件名作为参数传入 <code>fs.readFileSync</code> 函 数，阻塞等待读取完成后，将文件的内容作为函数的返回值赋给 data 变量</p><p>异步式读取文件是通过回调函数来实现的. fs.readFile 接收了三个参数， 第一个是文件名，第二个是编码方式，第三个是一个函数，我们称这个函数为回调函数。\\n<code>fs.readFile</code> 调用时所做的工作只是将异步式 I/O 请求发送给了操作系统，然后立即 返回并执行后面的语句，执行完以后进入事件循环监听事件。当 fs 接收到 I/O 请求完成的事件时，事件循环会主动调用回调函数以完成后续工作。</p><h3 id=\\\"事件\\\"><a href=\\\"#事件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件</h3><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。事件由 <code>EventEmitter</code> 对象提供。</p><p>EventEmitter 使用例子:</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 引入 events 模块</span>\\n<span class=\\\"token keyword\\\">var</span> events <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'events'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 创建 eventEmitter 对象</span>\\n<span class=\\\"token keyword\\\">var</span> event <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">events<span class=\\\"token punctuation\\\">.</span>EventEmitter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 注册事件 \\bsome_event</span>\\nevent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'some_event'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'some_event occured.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token comment\\\">// 触发事件 some_event</span>\\n    event<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'some_event'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div><p>代码运行一秒后, 控制台输出 'some_event occured'.</p><p>运行机制是 <code>event</code> 对象 注册了事件 <code>some_event</code> 的一个监听器, 通过 setTimeout 在1000毫秒以后向 <code>event</code> 对象发送事件 <code>some_event</code>，此时会调用绑定在 <code>some_event</code>监听器上的事件处理函数。</p><h3 id=\\\"事件循环机制\\\"><a href=\\\"#事件循环机制\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件循环机制</h3><p>Node.js 在什么时候会进入事件循环呢? 答案是 Node.js 始终在事件循环中.</p><p>Node.js 程序由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数. 程序入口就是事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出 I/O 请求或 直接发射(emit)事件，执行完毕后再返回事件循环，事件循环会检查事件队列中有没有未处理的事件，直到程序结束。</p><p>Node.js的事件循环对开发者是不可见, 所有的一切均被 EventEmitter 封装</p><p><img src=\\\"https://i.imgur.com/6rc1C5Y.png\\\" alt=\\\"Screen Shot 2018-07-12 at 5.07.35 PM\\\"></p><h2 id=\\\"模块和包\\\"><a href=\\\"#模块和包\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 模块和包</h2><p>开发一个具有一定规模的程序不可能只用一个文件，通常需要把各个功能拆分、封装，然后组合起来，模块正是为了实现这种方式而诞生的。</p><p>Node.js 的模块和包机制的实现参照了 CommonJS 的标准, 一般来说 模块 和 包 \\b指的是同一个东西, 如果非要分别的话, 包可以理解成是实现了某个功能模块的集合.</p><h3 id=\\\"什么是模块\\\"><a href=\\\"#什么是模块\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么是\\b模块</h3><p>一个 Node.js 文件就是一个模块，这个文件可能是 JavaScript 代码、JSON 或者编译过的 C/C++ 扩展</p><p>模块是 Node.js 应用程序的基本组成部分，文件和模块是一一对应的。</p><blockquote><p>比如 http 是 Node.js 的一个核心模块，其内部是用 C++ 实现的，外部用 JavaScript 封装。</p></blockquote><h4 id=\\\"创建-和-加载模块\\\"><a href=\\\"#创建-和-加载模块\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 创建 和 加载模块</h4><p>Node.js 提供 exports 和 require 两个对象来操作模块.</p><ul><li>exports 对象是模块的访问接口</li><li>require \\b\\b用于获取模块的 exports 对象</li></ul><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// myModule.js</span>\\n<span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">setName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>setName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    name <span class=\\\"token operator\\\">=</span> setName<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// getModule.js</span>\\n<span class=\\\"token keyword\\\">var</span> myModule <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./myModule'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmyModule<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;Garrik&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myModule<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>在以上示例中，myModule.js 通过 exports 对象把 setName 和 getName 作为模块的访问接口</p><p>在 getmodule.js 中通过 <code>require('./myModule')</code>加载这个模块，然后就可以直接访问 myModule.js 中 exports 对象的成员函数了。</p><h4 id=\\\"覆盖-exports\\\"><a href=\\\"#覆盖-exports\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 覆盖 exports</h4><p>有时候我们只是想把一个对象封装到模块中.</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">setName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>setName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        name <span class=\\\"token operator\\\">=</span> setName<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span>Hello <span class=\\\"token operator\\\">=</span> Hello<span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>在获取模块的时候我们就要:</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> Hello <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./myModule'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>Hello<span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>对于一个对象来说, 这样有点繁琐. 另一种写法是:</p><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">setName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>setName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        name <span class=\\\"token operator\\\">=</span> setName<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> Hello<span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> Hello <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./myModule'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>这次我用, <code>module.exports = Hello</code> 代替了 <code>exports.Hello = Hello</code></p><p>在外部引用该模块时，其接口对象就是要输出的 Hello 对象本身，而不是原先的 exports。</p><p>exports 本身仅仅是一个普通的空对象 {}，它专门用来声明接口</p><p>因为它没有任何特殊的地方， 所以可以用其他东西来代替</p><p>exports 实际上只是一个和 module.exports 指向同一个对象的变量，它本身会在模块执行结束后释放，但 module 不会，因此只能通过指定 module.exports 来改变访问接口。</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}