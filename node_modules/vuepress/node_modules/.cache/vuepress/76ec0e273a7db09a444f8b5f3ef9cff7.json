{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/入门篇/\b搭建\b服务器.md?vue&type=template&id=7f3c2ee2","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/入门篇/\b搭建\b服务器.md","mtime":1539364476406},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"实现-hello-world-http-服务器\"><a class=\"header-anchor\" href=\"#实现-hello-world-http-服务器\" aria-hidden=\"true\">#</a> 实现 &quot;Hello World&quot; HTTP 服务器</h1>\n<h2 id=\"客户端-服务器\"><a class=\"header-anchor\" href=\"#客户端-服务器\" aria-hidden=\"true\">#</a> 客户端 &amp; 服务器</h2>\n<p>\b先思考, 平时我们在浏览器地址栏中, 输入网址按下回车之后, 网页是如何呈现在我们面前的?</p>\n<p>很显然, \b我们想要访问的网页不是原本就保存在\b我们的电脑里的.  我们在浏览器中输入\b网址, 去网页文件所在的网络设备中去请求网页.  拥有网页的网络设别同意了我们的请求, 把网页返回给了浏览器.  之后浏览器再解析渲染网页文件, 使网页最终能呈现在我们面前.</p>\n<p>像浏览器这样, 请求访问文本或图像等资源的一端称为<strong>客户端</strong>，而提供资源响应的一端称为<strong>服务器端</strong>。</p>\n<h2 id=\"什么是-http-协议\"><a class=\"header-anchor\" href=\"#什么是-http-协议\" aria-hidden=\"true\">#</a> \b什么是 HTTP 协议</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP\" target=\"_blank\" rel=\"noopener noreferrer\">MDN HTTP 文档<OutboundLink/></a></p>\n<p>那\b客户端和服务器之间是怎么交流信息, 传递数据的呢?  \b网络之间的\b各种网络设备, 就像 &quot;学校里说不同地方方言的同学&quot;, 大家想要交流就必须使用 &quot;普通话&quot;.  各种网络设别之间想要通信也需要一套大家都认可的通信标准.</p>\n<p><strong>HTTP 协议</strong> (Hyper Text Transfer Protocol 超文本传输协议）就是 服务器 和 客户端 之间的<strong>通信规则</strong>.</p>\n<p>在应用 HTTP 协议时，必定是一端担任客户端角色，另一端担任服务器端角色</p>\n<p>使用 HTTP 协议传输的信息叫做 <strong>HTTP 报文</strong>. 请求端（客户端）的 HTTP 报文叫做<strong>请求报文</strong>，响应端（服务器端）的叫做<strong>响应报文</strong>。 HTTP 报文可分为 <strong>报文首部</strong> 和 <strong>报文主体</strong> 两块, 中间由一个空行分开.****</p>\n<p><img src=\"https://i.imgur.com/n8ecmof.png\" alt=\"Untitled Diagram(2)\"></p>\n<h3 id=\"请求报文-响应报文\"><a class=\"header-anchor\" href=\"#请求报文-响应报文\" aria-hidden=\"true\">#</a> 请求报文 &amp; 响应报文</h3>\n<p><strong>请求报文组成</strong>: 请求方法 + 请求 URI + HTTP 协议版本 + (可选的请求首部字段 和 内容实体)</p>\n<p><img src=\"https://i.imgur.com/pZbTmLG.png\" alt=\"\"></p>\n<p><strong>响应报文组成</strong>: HTTP 协议版本 + 状态码（表示请求成功或失败的数字代码）+ 用以解释状态码的原因短语 + (可选的响应首部字段 以及 实体主体)</p>\n<p><img src=\"https://i.imgur.com/LhTUXaJ.png\" alt=\"\"></p>\n<p><strong>请求方法</strong>:</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods\" target=\"_blank\" rel=\"noopener noreferrer\">MDN - HTTP 请求方法\b 文档<OutboundLink/></a></p>\n<p>HTTP 定义了一组请求方法, 以表明要对给定资源执行的操作。</p>\n<p>常用的有:</p>\n<ul>\n<li><code>GET</code>: 用来请求服务器端指定的资源。使用 GET 的请求应该只用于获取数据。</li>\n<li><code>POST</code>: 用来发送数据给服务器. 虽然用 GET 方法也可以传输主体.  但一般不用 GET 方法进行传输，而是用 POST 方法。</li>\n<li>\b<code>PUT</code>: 用于新增资源.  PUT 与 POST 方法的区别在于，PUT 方法调用一次与连续调用多次是等价的，而连续调用多次 POST 方法可能会有副作用，比如将一个订单重复提交多次。</li>\n<li><code>\bDELETE</code>: 用于删除指定的资源。</li>\n</ul>\n<p>除上面这些之外, 还有其他请求方法,\b 想了解可以\b自行查阅文档.</p>\n<p><strong>URI</strong>:</p>\n<p>HTTP 协议使用 URI 定位互联网上的资源。也就是我们常说的 &quot;网址&quot;.  多数情况下 URL 和 URI 说的是一回事.  这里不做过多论述.</p>\n<p><img src=\"https://i.imgur.com/PNmbAh1.png\" alt=\"2824193-3b10e5ce8796c938\"></p>\n<p><strong>状态码</strong>:</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\" target=\"_blank\" rel=\"noopener noreferrer\"> MDN - HTTP 状态码 - 文档<OutboundLink/></a></p>\n<p>状态码的职责是当客户端向服务器端发送请求时，描述服务器返回的请求结果。</p>\n<p>借助状态码，用户可以知道服务器端是正常处理了请求，还是出现了错误。</p>\n<p>状态码以 3 位数字 和 原因短语 组成。</p>\n<p>数字中的第一位指定了响应类别，后两位无分类。响应类别有以下 5 种:</p>\n<p><img src=\"https://i.imgur.com/m3Qc4kc.png\" alt=\"Screen Shot 2018-09-26 at 4.31.44 PM\"></p>\n<p>最常见的两个就是:</p>\n<ul>\n<li><code>200 OK</code>: 表示从客户端发来的请求在服务器端被正常处理了。</li>\n<li><code>404 Not Found</code>: 该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</li>\n</ul>\n<p>其余的状态码, 大家可以查阅文档, 这里就不介绍了.</p>\n<p><strong>首部字段</strong>:</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"noopener noreferrer\">\bMDN - HTTP 首部字段 - 文档<OutboundLink/></a></p>\n<p>首部字段, 为客户端和服务器, 处理请求和响应, 提供了所需要的信息。</p>\n<p>HTTP 首部字段是由 首部字段名 和 字段值 构成的，中间用 <code>:</code> 分隔。</p>\n<p>例如:</p>\n<p>在 HTTP 首部中以 Content-Type 这个字段来表示报文主体的类型。 <code>Content-Type: text/html</code> 就是说, 报文主体的类型为 HTML.</p>\n<p>\b更多首部字段我就不再这里\b介绍了, 大家可以根据需要查阅文档.</p>\n<h2 id=\"使用-http-模块-实现一个-hello-world-服务器\"><a class=\"header-anchor\" href=\"#使用-http-模块-实现一个-hello-world-服务器\" aria-hidden=\"true\">#</a> 使用 HTTP 模块 实现一个 &quot;Hello World&quot; 服务器</h2>\n<p><a href=\"http://nodejs.cn/api/http.html\" target=\"_blank\" rel=\"noopener noreferrer\">HTTP 模块 - 文档<OutboundLink/></a></p>\n<p>Node.js 自身提供的 <code>http</code> 模块, 提供了 HTTP 服务器和客户端接口, 可以很便捷地应用 HTTP 协议.</p>\n<p>下面我就介绍如何用 <code>http</code> 模块实现一个响应 &quot;Hello World&quot; 给\b客户端的 Web 服务器:</p>\n<p>首先, 新建一个 JavaScript 文件, 取名 <code>myServer.js</code> , 当然你可以叫别的.</p>\n<p>\b在文件开头先引用 <code>http</code> 模块.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>然后调用 <code>http.createServer</code> 函数创建并返回一个 HTTP 服务器.  这个函数接收一个\b回调函数作为参数.  \b服务器每次收到客户端发过来的 HTTP 请求会交给这个回调函数处理.  回调函数会受到两个参数, 请求对象和响应对象, 一般简写为 <code>req</code> 和 <code>res</code>.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 处理请求, 送出响应</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>服务器每次收到\b新的请求, 都会创建新的请求对象和响应对象.  从客户端发过来的请求报文会被解析, 然后作为请求对象的一部分.  在回调函数的内部, 你需要根据\b业务逻辑处理请求, 然后送出响应给客户端, 结束此次请求.</p>\n<p>在本练习中, 我们要返回给客户端一个写有 &quot;Hello World&quot; 的纯文本.  在回调函数中我们需要用到三个\b响应对象上的函数:</p>\n<ul>\n<li><code>res.writeHead(statusCode[, statusMessage][, headers])</code>: 该方法会发送一个响应头给客户端.  第一个参数作为状态码, 最后一个参数 <code>headers</code> 是响应头对象。 第二个参数 <code>statusMessage</code> 是可选的状态描述。</li>\n<li><code>res.write(chunk[, encoding][, callback])</code>: 该方法会发送一块响应主体。 它可被多次调用，以便提供连续的响应主体片段。第一个参数是一个字符串或一个 Buffer 字节流, 如果是\b字符串的话, 第二个参数指定如何将它编码成一个字节流 (默认为 utf-8).  最后一个参数这里先不考虑.</li>\n<li><code>res.end([data][, encoding][, callback])</code>: 该方法会通知服务器，所有响应头和响应主体都已被发送，即服务器将其视为已完成。每次响应都必须调用这个方法来结束请求, 否则请求会被一直挂起.  如果传入 data 参数, 相当于调用 <code>res.write(data, encoding)</code>.</li>\n</ul>\n<p>那么根据需求我们知道:</p>\n<ul>\n<li>响应成功, 状态码为 200.</li>\n<li>响应回去的为纯文本, 需要设定响应头 <code>Content-Type</code> 的值为 <code>text/plain</code>.</li>\n<li>响应回去的主体是一个字符串 &quot;Hello World&quot;.</li>\n</ul>\n<p>根据这两个信息, 我们就可以很\b轻松的写出请求处理函数内的代码:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>最后, 我们需要给 Web 服务器绑定一个端口.  为了让服务器可以提供多种服务, 不同请求会被发送到不同的端口.  只有发送到我们指定端口的 HTTP 请求会被上面的代码所处理.</p>\n<p>我们使用 <code>server.listen</code> 函数, 第一个参数为端口号, 最后一个参数是一个回调函数, 监听成功后调用.</p>\n<p>在这里我用 <code>3000</code> 作为端口号, 当然你也可以改成你喜欢的.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\b服务器启动成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在监听 3000 端口:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>全部写完后代码为:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/plain'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\b服务器启动成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在监听 3000 端口:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在命令行中输入 <code>node myServer.js</code> ( 注意你的路径和文件名 )</p>\n<p>服务器运行后, 可以在命令行看见</p>\n<p><img src=\"https://i.imgur.com/jkchEZQ.png\" alt=\"Screen Shot 2018-09-26 at 6.10.47 PM\"></p>\n<p>然后在浏览器中登录 <code>localhost:3000</code>, 你就可以看见服务器响应给你的 &quot;Hello World&quot; 了.</p>\n<p><img src=\"https://i.imgur.com/o9Dxynd.png\" alt=\"Screen Shot 2018-09-26 at 6.11.52 PM\"></p>\n<p>现在你成功的返回了一条纯文本内容给\b客户端, 你可以试着返回一个 HTML 文本吗?</p>\n<p><strong>Tip:</strong> <code>Content-Type</code> 的值应改成什么?</p>\n</div>\n",null]}