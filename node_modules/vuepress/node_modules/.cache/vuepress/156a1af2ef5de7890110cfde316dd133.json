{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/后端开发/Express/基础知识/cookie和session.md?vue&type=template&id=140739c1","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/后端开发/Express/基础知识/cookie和session.md","mtime":1532815332703},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"cookie-和-session\"><a class=\"header-anchor\" href=\"#cookie-和-session\" aria-hidden=\"true\">#</a> Cookie 和 Session</h1>\n<p>由于HTTP协议是无状态的，即不会记录客户端与服务端的连接信息。简单地说，当你浏览了一个页面，然后转到同一个网站的另一个页面，服务器无法认识到这是同一个浏览器在访问同一个网站。每一次的访问，都是没有任何关系的。 故而有时需要一种保存客户端对服务器的访问状态的机制.</p>\n<h2 id=\"cookie\"><a class=\"header-anchor\" href=\"#cookie\" aria-hidden=\"true\">#</a> Cookie</h2>\n<p>cookie 是客户端请求服务器时，服务端记录的用户信息，存储在客户端, 下一次客户端发送请求时会将 cookie 一起发送。(就像令牌一样, 我是小钻风)</p>\n<p>客户端第一次访问服务器的时候, 不携带 cookie, 服务器接到请求后, 会记录用户的信息, 然后在响应头中设置 set-cookie 头部. 客户端收到后进行储存，下一次再请求服务器时请求头中会加上 cookie 这一项，服务器通过 cookie 判断客户端是否曾经访问过该网站。</p>\n<p>cookie 是有时限的，有一个属性 maxAge 可以设置 cookie 的存储时间，超过时间后 cookie 会被删除。cookie 一般用于用户的自动登录，记住密码等.</p>\n<h3 id=\"设置-set-cookie-头\"><a class=\"header-anchor\" href=\"#设置-set-cookie-头\" aria-hidden=\"true\">#</a> 设置 set-cookie 头</h3>\n<p>在客户端第一次访问服务器的时候, 服务器要设置 set-cookie 然后响应给客户端.  在 Express 中, 这通过 <code>res.cookie()</code> 方法进行设置.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>name</code> 是 cookie 的名字, <code>value</code> 是 cookie 的值。<code>options</code> 对象是用来设置 set-cookie 头部的选项, 具体参数有:</p>\n<p><img src=\"https://i.imgur.com/fNmf1ZT.png\" alt=\"698230-20170713162242775-775602549\"></p>\n<p>例子:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tobi'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> domain<span class=\"token punctuation\">:</span> <span class=\"token string\">'.example.com'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/admin'</span><span class=\"token punctuation\">,</span> secure<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nres<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rememberme'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> expires<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">900000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> httpOnly<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>\n<p>HttpOnly 属性: 如果在 Cookie 中设置了&quot;HttpOnly&quot; 属性，那么通过程序(JS脚本、Applet等)将无法读取到 Cookie 信息，这样能有效的防止XSS攻击。HttpOnly 属性的目的是<strong>防止程序获取 Cookie</strong> 后进行攻击</p>\n</li>\n<li>\n<p>Secure 属性： 当设置为 true 时，表示创建的 Cookie 会被以安全的形式向服务器传输，也就是只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证. Secure属性是<strong>防止信息在传递的过程中被监听捕获</strong>后信息泄漏</p>\n</li>\n<li>\n<p>path 属性：指定可访问 Cookie 的目录。例如：<code>&quot;page=shop; path=/shop&quot;</code>;就表示当前 Cookie 仅能在客户端访问 <code>\\shop</code> 时, \b被发送到服务器。</p>\n</li>\n<li>\n<p>domain 属性：指定可访问 Cookie 的主机名. 主机名是指同一个域下的不同主机. 例如：<code>www.google.com</code>和 <code>gmail.google.com</code> 就是在 <code>google.com</code> 域名下\b的两个不同的主机名。默认情况下，一个主机中创建的 Cookie 在另一个主机下是不能被访问的， 但可以通过 domain 参数来实现对其的控制, 以 google 为例，要实现跨主机访问，可以写为：<code>&quot;name=value; domain=.google.com&quot;</code> 这样所有<code>google.com</code> 下的主机都可以访问该 Cookie。</p>\n</li>\n<li>\n<p>Expires 属性：指定过期时间. 超过这个时间，Cookie将消失，不可访问。例如：如果要将 Cookie 设置为10天后过期，可以这样实现：<code>&quot;name=garrik; expire=&quot; + new Date(Date.now() + 10 * 24 * 3600 * 1000).toGMTString();</code></p>\n</li>\n<li>\n<p>Max-Age 属性: 用于代替 Expires, Max-Age 的值 可以为正数，表示此 Cookie 从创建到过期所能存在的时间，以秒为单位，此 Cookie 会存储到客户端电脑，以 Cookie 文件形式保存. 不论关闭浏览器或关闭电脑，直到时间到才会过期。 可以为负数，表示此 Cookie 只是存储在浏览器内存里，只要关闭浏览器，此 Cookie 就会消失。maxAge 默认值为 -1。 还可以为 0，表示从客户端电脑或浏览器内存中删除此 Cookie。</p>\n</li>\n</ul>\n<h3 id=\"删除-cookie\"><a class=\"header-anchor\" href=\"#删除-cookie\" aria-hidden=\"true\">#</a> 删除 cookie</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>res<span class=\"token punctuation\">.</span><span class=\"token function\">clearCookie</span><span class=\"token punctuation\">(</span>name <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>比如说:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 设置 cookie</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"garrik\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 删除 cookie</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">clearCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"cookie-parser\"><a class=\"header-anchor\" href=\"#cookie-parser\" aria-hidden=\"true\">#</a> cookie-parser</h3>\n<p><a href=\"https://www.npmjs.com/package/cookie-parser\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<p><code>cookie-parser</code> 是 Express的 中间件，用来实现 cookie 的解析.</p>\n<p>这个中间件会在 <code>req</code> 中添加一个 <code>cookies</code> 对象, 用来存放解析成键值对的 cookie. 并且还提供 cookie 签名, 等功能来提高安全性.</p>\n<p>在原生的 Node 代码里面, 我们通过 <code>req.headers.cookie</code> 来获得请求头中的 cookie 的字符串形式.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>原生 \b\bNode 解析 <code>req.header.cookie</code> 字符串成对象:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 用于保存 cookie</span>\n    <span class=\"token keyword\">var</span> Cookies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 先确定 cookie 存在, 然后按照 ; 把字符串分割成数组, 然后遍历:</span>\n    req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">&amp;&amp;</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> Cookie <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 把单个的\b数组项按 = 分割成两部分:</span>\n        <span class=\"token keyword\">var</span> parts <span class=\"token operator\">=</span> Cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 把\b\b cookie 按照键值对的形式保存在 Cookies 对象里.</span>\n        Cookies<span class=\"token punctuation\">[</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Cookies<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>\b\n也可以用 <a href=\"https://www.npmjs.com/package/cookie\" target=\"_blank\" rel=\"noopener noreferrer\">cookie 模块<OutboundLink/></a></p>\n<p>通过 cookie-parser 中间件, cookie 的解析变得异常简单.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> cookieParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cookie-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//  使用中间件</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>出于安全的考虑，防止cookie被篡改, 我们通常需要对 cookie 进行签名。</p>\n<p>如果要加密, 服务器需要设置 <code>req.secret</code> 秘钥字符串, cookie-parser 就可以做这个事情:</p>\n<p>在\b\b使用 cookie-parser 中间件的时候, 传入 secret 参数就好了:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在设置好秘钥之后, 在创建 cookie 时要将 signed 选项 \b设置为 true:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'garrik'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    signed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这时再在客户端获得 cookie, 值就是加密后的一大串看不懂的字符了.</p>\n<p><img src=\"https://i.imgur.com/FLDcQvT.png\" alt=\"Screen Shot 2018-07-28 at 4.46.31 PM\"></p>\n<p>想在服务器获得客户端传过来的加密后的 cookie, 我们不能再\b用 <code>req.cookies</code> 了.</p>\n<ul>\n<li><code>req.cookie</code> 用于获取未加密的 cookie, 只能获得未加密的, 加密的也不会以\b密码形式出现.</li>\n<li><code>req.signeCookie</code> 用于获取未加密的cookie, 只能\b获得加密过的, 未加密的也不会出现.</li>\n</ul>\n<h2 id=\"session\"><a class=\"header-anchor\" href=\"#session\" aria-hidden=\"true\">#</a> Session</h2>\n<p>session 和 cookie 的作用是一样的，也是存储用户信息，但是 session 是存储在服务器端的。</p>\n<p>session 还需借助 cookie 将唯一标识 sessionID 存到客户端。当客户端访问服务器时，会生成一个全局唯一标识 sessionID，然后服务器会记录用户的信息然后存储到服务器 session 中，由于客户端下一次发送请求时, 服务器要知道来的是谁，故需要将 sessionID 发送到客户端，方法有三种，一种就是设置 set-cookie 头将 sessionID 发送到客户端，另一种就是 url 重写, 把 session id 直接附加在 URL 路径的后面。还有就是用 表单隐藏字段.</p>\n<p>第二次请求该网站时，请求头中就会带上 cookie，cookie 的值是就是 sessionID。session 一般用于用户的身份验证，即利用 sessionID 判断用户是否合法。</p>\n<p>再详细一点, 服务器使用一种类似于散列表的结构来保存信息,  当程序需要为某个客户端的请求创建一个 session 时，服务器首先检查这个客户端的请求里是否已包含了一个 session 标识 (session id), 如果已包含则说明以前已经为此客户端创建过 session，服务器就按照session id 把对应的 session 检索出来, 如果检索不到，会新建一个.  如果客户端请求不包含 session id，则为此客户端创建一个session 并且生成一个与此 session 相关联的 session id，然后在本次响应中返回给客户端保存。</p>\n<h3 id=\"express-session\"><a class=\"header-anchor\" href=\"#express-session\" aria-hidden=\"true\">#</a> express-session</h3>\n<p>\b<a href=\"https://github.com/expressjs/session\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<p>安装好中间件之后, 就要设置 session 中间件了:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 要放在 cookieParser \b之后\b, 因为要用到 session id.</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    secret<span class=\"token punctuation\">:</span> <span class=\"token string\">'my app secret'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用来对session id相关的cookie进行签名</span>\n    \n    saveUninitialized<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否自动保存未初始化的会话，建议false</span>\n    \n    resave<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否每次都重新保存会话，建议false</span>\n    \n    store<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//创建新的mongodb数据库存储session</span>\n        host<span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//数据库的地址，本机的话就是127.0.0.1，也可以是网络主机</span>\n        port<span class=\"token punctuation\">:</span> <span class=\"token number\">27017</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//数据库的端口号</span>\n        db<span class=\"token punctuation\">:</span> <span class=\"token string\">'test-app'</span> <span class=\"token comment\">//数据库的名称。</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    \n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//cookie 的 name，默认值是：connect.sid</span>\n    \n    cookie<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        maxAge<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"常用参数\"><a class=\"header-anchor\" href=\"#常用参数\" aria-hidden=\"true\">#</a> 常用参数:</h4>\n<ul>\n<li>\n<p>secret: 一个 String 类型的字符串，作为服务器端生成 session 的签名。</p>\n</li>\n<li>\n<p>name: 返回客户端的 cookie key 的名称，默认为 connect.sid,也可以自己设置。</p>\n</li>\n<li>\n<p>resave: (是否允许)当客户端并行发送多个请求时，其中一个请求在另一个请求结束时对 session 进行修改覆盖并保存。\n默认为 true。但是(后续版本)有可能默认失效，所以最好手动添加。</p>\n</li>\n<li>\n<p>saveUninitialized: 初始化 session 时是否保存到存储。默认为 true， 但是(后续版本)有可能默认失效，所以最好手动添加。</p>\n</li>\n<li>\n<p>cookie: 设置返回到前端 key 的设置，默认值为 <code>{ path: ‘/', httpOnly: true, secure: false, maxAge: null }</code></p>\n</li>\n</ul>\n<h4 id=\"使用实例\"><a class=\"header-anchor\" href=\"#使用实例\" aria-hidden=\"true\">#</a> 使用实例:</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token string\">'secret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n secret<span class=\"token punctuation\">:</span> <span class=\"token string\">'secret'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//与 cookieParser 中的一致</span>\n resave<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n saveUninitialized<span class=\"token punctuation\">:</span><span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 保存 session</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"garrik\"</span><span class=\"token punctuation\">,</span>\n    gender<span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 就可以\b看到刚刚保存的 session 了</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"cookie-session\"><a class=\"header-anchor\" href=\"#cookie-session\" aria-hidden=\"true\">#</a> cookie-session</h3>\n<h2 id=\"区别-和-优缺点\"><a class=\"header-anchor\" href=\"#区别-和-优缺点\" aria-hidden=\"true\">#</a> 区别 和 优缺点</h2>\n<ul>\n<li>最大的区别应该在于存储的地方不一样，cookie存储在客户端，session存储在服务器；</li>\n<li>从安全性方面来说，cookie 存储在客户端，很容易被窃取，暴露用户信息，而 session 存储在服务器，被窃取的机会小很多，故session 的安全性比 cookie 高；</li>\n<li>从性能方面来说，cookie 存储在浏览器端消耗的是用户的资源，相对比较分散，而 session 消耗的服务器的内存，会造成服务器端的压力；</li>\n<li>cookie 可以长期的存储在客户端，但是数量和大小都是有限制的, 单个cookie保存的数据不能超过4K；session 存在服务器的时间较短，但是没有大小的限制</li>\n</ul>\n</div>\n",null]}