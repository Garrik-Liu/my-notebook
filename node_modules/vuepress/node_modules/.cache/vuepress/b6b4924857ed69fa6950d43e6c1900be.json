{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/深入探讨/异步.md?vue&type=template&id=1ff41eb5","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/深入探讨/异步.md","mtime":1547538731764},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"异步编程\"><a class=\"header-anchor\" href=\"#异步编程\" aria-hidden=\"true\">#</a> 异步编程</h1>\n<h2 id=\"为什么要用异步\"><a class=\"header-anchor\" href=\"#为什么要用异步\" aria-hidden=\"true\">#</a> 为什么要用异步?</h2>\n<p>在编程的时候, 一个很重要的问题是: <strong>如何表达和控制持续一段时间的程序行为</strong>。换句话说, 就是一段代码 &quot;现在&quot; 运行, 另一部分 &quot;将来&quot; 运行.   &quot;将来&quot; 运行的代码无法在 &quot;现在&quot; 运行的代码执行完之后立刻执行.  &quot;现在&quot; 和 &quot;将来&quot; 之间有一段间隙.</p>\n<p>这个间隙可能是在等待用户输入信息、从数据库或文件系统中请求数据、或通过网络发送数据并等待响应.</p>\n<p>处理好 &quot;现在&quot; 的代码和 &quot;将来&quot; 的代码之间的关系, 就是异步编程的核心.</p>\n<h2 id=\"异步的解决方案\"><a class=\"header-anchor\" href=\"#异步的解决方案\" aria-hidden=\"true\">#</a> 异步的解决方案</h2>\n<h3 id=\"回调函数\"><a class=\"header-anchor\" href=\"#回调函数\" aria-hidden=\"true\">#</a> 回调函数</h3>\n<p>&quot;回调&quot; 的意思就是 &quot;回头调用的函数&quot;.  函数中的代码是在 &quot;将来&quot; 的操作.  当相对应的 &quot;事件&quot; 被触发了, 函数会被执行.</p>\n<p>回调是编写和处理 JavaScript 异步逻辑的最常用方式.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 代码 A </span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 代码 B</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 代码 C</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面的代码中使用了回调函数.  如果用日常口语去描述这段代码的运行方式, 大概是 &quot;代码 A 先执行; 然后设定一个 1000 毫秒的延时事件; 代码 C 执行; 延时事件被触发, 代码 B 得到执行.&quot;</p>\n<h4 id=\"回调地狱\"><a class=\"header-anchor\" href=\"#回调地狱\" aria-hidden=\"true\">#</a> 回调地狱</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这种多个回调函数嵌套在一起的代码, 被称作 &quot;回调地狱&quot;.</p>\n<p>被称为 &quot;地狱&quot; 的主要原因除了层层嵌套的代码难于阅读, 更主要的原因是: <strong>回调函数的使用让代码执行顺序缺少 &quot;顺序性&quot;</strong>.  &quot;非顺序(线性)&quot; 的代码执行方式与我们大脑的顺序地思考方式不符.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">doA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    <span class=\"token function\">doC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">doD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n        <span class=\"token function\">doF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">doE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">doB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>如果 <code>doA</code> 和 <code>doD</code> 接收两个\b回调函数, 会被异步调用.  那么上面代码的执行顺序为 A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F.  当我们在线性（顺序）地追踪这段代码的执行顺序时，我们不得不从一个函数跳到下一个，再跳到下一个.  可以想象当异步代码更复杂时, \b这种追踪的难度会成倍增加。</p>\n<p>这种 &quot;非顺序的&quot; 执行步骤并不符合我们的大脑思考方式.  我们的大脑类似于单线程运行的事件循环队列, 它喜欢以顺序地, 同步地方式去理解, 思考事情.</p>\n<p>在回调函数上, 我们大脑的工作方式和代码的执行方式发生了 &quot;分歧&quot;.  回调函数的滥用会让<strong>代码变得更加难以理解、追踪、调试和维护</strong>。这是回调函数的主要问题所在.</p>\n<p>除此之外, <strong>嵌套的回调函数把\b异步代码的执行顺序\b写死了</strong>.  上面代码中, <code>doD</code> 的回调函数必须等 <code>doA</code> 的回调函数得到执行之后才能被执行. 假如它们两个之间没有顺序关系, 这种写死的顺序会增加代码的脆弱性.  类比来说, \b假如你计划五点钟去吃饭, \b六点钟去看电影.  它们之间没有绝对的顺序关系, 哪怕你五点钟没有\b去吃饭, 也不会影响你六点去看电影.</p>\n<h4 id=\"信任问题\"><a class=\"header-anchor\" href=\"#信任问题\" aria-hidden=\"true\">#</a> 信任问题</h4>\n<p>当我们在第三方提供的\b工具中使用回调函数的时候, 实际上我们就<strong>把代码一部分的操控权交给了第三方.  这被称为 &quot;控制反转&quot;</strong>.  这加大了代码不确定性.</p>\n<p>假如你使用了一个\b第三方提供的用来验证账号登录状态的函数.  并在传入的回调函数中进行支付操作.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>\b<span class=\"token function\">checkLogin</span><span class=\"token punctuation\">(</span>accountInfo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">payMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>看似一切都完美, 但是我们在这段代码中, 把支付操作的控制权交给了一个第三方.  \b这会导致很多可能出现的错误情况:</p>\n<ul>\n<li>调用回调过早;</li>\n<li>调用回调过晚（或没有调用）;</li>\n<li>调用回调的次数太少或太多;</li>\n<li>没有把所需的环境 / 参数成功传给你的回调函数;</li>\n<li>吞掉可能出现的错误或异常;</li>\n<li>等等;</li>\n</ul>\n<p>\b\b为了确保安全性, 常用的解决方案是对传入的参数, \b回调函数的调用情况设定相应的安全机制.  但这也加大了代码的复杂度.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 确保输入为数字 </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">!=</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> y <span class=\"token operator\">!=</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Bad parameters\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 如果到达这里，可以通过+安全的进行数字相加 </span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42 </span>\n<span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"21\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: \"Bad parameters\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>如果你还没有应用某种逻辑来解决所有这些控制反转导致的信任问题，那<strong>你的代码现在已经有了 bug，即使它们还没有给你造成损害。隐藏的 bug 也是 bug</strong>。</p>\n<h3 id=\"promise\"><a class=\"header-anchor\" href=\"#promise\" aria-hidden=\"true\">#</a> Promise</h3>\n<p><strong>Promise 是一种封装和组合未来值的易于复用的机制</strong>。这套机制可以用来处理异步操作.  ES6 使用这套机制实现了 Promise 对象.</p>\n<h4 id=\"未来值-承诺值\"><a class=\"header-anchor\" href=\"#未来值-承诺值\" aria-hidden=\"true\">#</a> 未来值, 承诺值</h4>\n<p>再来讨论一下什么是 &quot;未来值&quot;, &quot;承诺值&quot;.</p>\n<p>中午你去麦当劳买汉堡, 你点餐的时候服务员不能马上给你汉堡, 于是服务员给你一张带订单号的收据作为凭证.  这张收据就是 &quot;Promise (承诺)&quot;.  服务员用它来向你承诺, 汉堡做好后会给你.  这个时候, 收据代表了你的汉堡.  当汉堡做好, 服务员叫你的订单号的时候, 这张收据 (承诺) 就可以用来换取你真正想要得到的汉堡.  当然还会有另一种结果.  就是后厨发现汉堡用的肉卖完了, 服务员遗憾地告诉你汉堡做不了了.</p>\n<p>拿这个例子类比 Promise 机制.  汉堡就是 &quot;未来值&quot;, 收据就是 &quot;承诺值&quot;.  当 &quot;未来值&quot; 准备好时, 可以用 &quot;承诺值&quot; 换取 &quot;未来值&quot;.  同时, &quot;未来值&quot; 会有两种情况: 成功, 或者失败.</p>\n<h3 id=\"generator\"><a class=\"header-anchor\" href=\"#generator\" aria-hidden=\"true\">#</a> Generator</h3>\n<h3 id=\"async-await\"><a class=\"header-anchor\" href=\"#async-await\" aria-hidden=\"true\">#</a> async/await</h3>\n</div>\n",null]}