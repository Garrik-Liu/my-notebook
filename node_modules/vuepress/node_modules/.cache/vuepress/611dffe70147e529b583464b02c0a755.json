{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/基础篇/基础概念.md?vue&type=template&id=67a4ed8d","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/基础篇/基础概念.md","mtime":1535943005731},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"基础概念\\\"><a href=\\\"#基础概念\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基础概念</h1><p>在 Node.js 系列的第一节里, 我会先介绍 Node.js 的一些基本概念. 让你在看完这篇文章时, 能对 &quot;什么是 Node.js?&quot;, &quot;Node.js 能干什么?&quot;, &quot;为什么用 Node.js?&quot; 这三个问题有个基本的回答.</p><h2 id=\\\"什么是-node-js\\\"><a href=\\\"#什么是-node-js\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么是 Node.js?</h2>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"先来看看 \"),_vm._ssrNode(\"<a href=\\\"http://nodejs.cn/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Node 官网\"),_c('OutboundLink')],2),_vm._ssrNode(\" 给的答案:\")],2),_vm._ssrNode(\"<blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\\nNode.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</p></blockquote><p>基本上, \\b很多人看到上面这段话, 完全不知道它在说\\b什么...</p><p>下面我逐步解释一下上面这段话到底说的是什么意思:</p><h3 id=\\\"基于-chrome-v8-引擎的-javascript-运行环境\\\"><a href=\\\"#基于-chrome-v8-引擎的-javascript-运行环境\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基于 Chrome V8 引擎的 JavaScript 运行环境</h3><p>这句话的意思很明确, <strong>Node.js 就是一个让 JavaScript 代码能够运行的环境, 它是基于 V8 引擎的, 可以让 Javascript 代码脱离浏览器运行.</strong> 但是看完这个解释, 你可能还是会问: &quot;\\b那么, 为什么能脱离浏览器?&quot; 先抛开 Node.js 不谈, 回到我们熟悉的前端领域, JavaScript 代码是如何在浏览器中运行的?</p><p>简单来说, 我们所写的 JavaScript 源代码, 是为了给人看的, 机器是看不懂的, 需要翻译成机器码, 也就是 &quot;机器的语言&quot;, 才可以让机器执行.  在浏览器中, JavaScript 引擎负责进行代码的解释.  V8 引擎就是 Chrome 浏览器所在用的 JavaScript 引擎.  因为其支持跨平台, 就是说可以在各种操作系统上使用, 所以基于 V8 的 Node.js 就可以让我们脱离浏览器的束缚, 让 JavaScript 代码在各种各样不同的平台上运行了.</p><h3 id=\\\"非阻塞式-i-o\\\"><a href=\\\"#非阻塞式-i-o\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 非阻塞式 I/O</h3><p>&quot;非阻塞式 I/O&quot;, 我知道这几个字看起来让人有点懵.  别着急, 那让我换个说法, &quot;<strong>不会\\b阻塞 JavaScript 程序执行的 Input/Output 操作</strong>&quot;, 这样会不会清楚一点? 可能你还是不太懂, 那下面我就逐字地解释.</p><p>我们先来说说, 什么是 &quot;Input/Output 操作&quot;.   从字面上翻译就是 &quot;输入/输出&quot;, 那输的是什么呢?  简单说就是 &quot;信息&quot;.  在程序执行过程中如果需要操作系统进行 磁盘读写 或 网络通信, 我们就都统称为 &quot;I/O 操作&quot;.  例如, 从服务器获取页面, 下载文件, 提交表单, 读取数据库都是属于这个范畴的.  一个很直观的感受, 凡是这一类操作, 我们都需要花时间 &quot;等&quot;.  拿生活举例, 游戏没下载完, 我就玩不了; 注册表单没提交完, 账户就还不能登录.</p><p>在说 &quot;非阻塞&quot; \\b之前, 先了解什么是 &quot;阻塞&quot;.  从字面上理解, &quot;阻塞&quot; 就是堵住了, 通不过的意思.  在计算机中, 程序在线程内按顺序被执行, 后面的操作必须等前面的操作结束才能被执行.  当遇到 &quot;I/O 操作&quot;, 程序向操作系统发出 &quot;I/O 请求&quot;, 操作系统进行 &quot;I/O 执行&quot;, 完成后把操作结果返回给程序, 程序收到结果后继续执行后面的操作.  在等待 &quot;I/O 操作&quot; 结果的时间段里, 整条线程一直处于等待的状态, 这种 I/O 操作方式称为 &quot;阻塞式 I/O&quot;.  在程序设计中, 对于高并发的任务, 在线程阻塞的情况下, 整条线程不能执行程序, 这会导致任务处理速度极慢.  常见的方案是通过多线程来解决. 但每条线程的利用率并没有增加, 同时也会导致硬件成本高昂.</p><blockquote><p>线程: 程序执行流的最小单元。程序代码在其中被 CPU 依次处理.  在一条线程中, 同一时间, 只有一段代码被被执行, 或等待被执行.</p></blockquote><blockquote><p>并发: 在同一个时间段中, 几个\\b任务同时进行.  但是在任意时间点, 有且只有一段代码在执行.  简单说, 在一段时间中, 两个任务都可以完成, 但是在每一个时间点, 只能执行其中一个任务, \\b两个任务不能在一个时间点上同时进行.</p></blockquote><p>在 Node.js 中, 程序所有的操作都在一个单一的主线程中进行处理, 同一时间只能处理一项任务.  为了处理高并发, 采用了 &quot;非阻塞式 I/O&quot;, 也可以称为 &quot;\\b异步式 I/O&quot;.  当线程遇到 I/O 操作时，不会以阻塞的方式去等待操作完成.  而是将 I/O 请求发送给操作系统之后, Node 就直接继续执行下一条代码.  当 I/O 操作完成, 操作系统以 &quot;事件&quot; 的形式去通知 Node.  Node 收到事件, 并把它加入到事件队列.  事件队列中的事件会被依次处理, 如果过程中遇到新的事件, 则依然是添加到队列中.  等队列中已经没有未处理的事件时, 程序结束.</p><h4 id=\\\"做个比喻\\\"><a href=\\\"#做个比喻\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \\b做个比喻</h4><p>如果不好理解的话, 可以想象老王一个人去钓鱼, 他把鱼竿架好之后, 就在旁边等着, 等鱼漂抖动的时候就拉杆.  在等待的这段时间里, 他是什么也不干的. 因为怕鱼上钩自己看不到, 老王还一直守在鱼竿旁, 也不做其他的事情.  过了几天, 老王觉得这样效率低, 就买了十把鱼竿同时架起来.  在同一段时间内, 这种方法钓的鱼的确多了, 但老王在一个时间点只能去操纵一个鱼竿, 单个鱼竿的效率很低, 老王仍旧\\b一直守在鱼竿旁, 在等的时候不能做其他的事.  \\b\\b又过了几天, 老王一个发明家朋友给了他一个自动通知鱼竿, 鱼上钩后, 鱼竿会给老王发微信通知他过来收鱼.  这样老王就可以在等鱼上钩的时间里去一旁\\b玩游戏了.</p><h4 id=\\\"多线程阻塞-i-o-vs-单线程非阻塞-i-o\\\"><a href=\\\"#多线程阻塞-i-o-vs-单线程非阻塞-i-o\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 多线程阻塞 I/O vs 单线程非阻塞 I/O</h4><p>下面这两张图的对比, 可以帮助理解上面文字.</p><p>多线程阻塞 I/O:</p><p><img src=\\\"https://i.imgur.com/xRtr4On.png\\\" alt=\\\"Screen Shot 2018-09-01 at 11.42.35 PM\\\"></p><p>在一条线程中, 如果遇到 I/O 操作, 计算2 必须等 I/O 操作结束才可以得到执行.  期间线程一直处于等待状态, 利用率低.  通过增加\\b线程\\b数量, 可以在一条线程等待 I/O 操作结果的时候, 把其他任务分配给另一条线程.  以此来处理高并发任务. \\b</p><p>单线程非阻塞 I/O:</p><p><img src=\\\"https://i.imgur.com/mnWUOay.png\\\" alt=\\\"Screen Shot 2018-09-01 at 11.42.42 PM\\\"></p><p>\\b所有任务只在一条线程中得到处理, 遇到 I/O 操作, 线程并不等待其结果, 而是\\b继续处理其他任务.  等 I/O 操作结束后, 线程再处理其后续任务.</p><h3 id=\\\"事件驱动\\\"><a href=\\\"#事件驱动\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件驱动</h3><p>前面提到, 操作系统通过 &quot;事件&quot; 来通知\\b Node &quot;I/O 操作&quot; 完成.  Node 中有 &quot;事件监听器&quot;, 当接收到事件, 监听器把事件相应的 &quot;处理器&quot; 添加到事件队列.  当所有除事件队列\\b之外的程序代码都被处理完了, 事件队列中的事件处理器会被逐个\\b执行.  当队列中已经没有未处理的事件了, 程序结束.  可以看出程序的结束与否, 取决于事件是否被全部处理完毕, \\b因此称 Node 是事件驱动的.  可能此时你还是\\b半懵半懂, 下面我会就一些问题详细解释.</p><p><img src=\\\"https://i.imgur.com/x4zFCKk.png\\\" alt=\\\"Screen Shot 2018-09-02 at 4.03.56 PM\\\"></p><h4 id=\\\"什么是事件\\\"><a href=\\\"#什么是事件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么是事件?</h4><p>在编程中, &quot;事件&quot; 是你在编程时系统内发生的动作或者发生的事请. 当事件发生, 系统会通知你, 并在你愿意的情况下可以对其做出相应的操作.  以前端举例, 在网页的\\b搜索栏中, 用户点击搜索\\b按钮.  发生在这个按钮上的点击动作是一个事件.  前端 JS 代码接收到\\b点击事件后, 执行搜索操作.</p><h4 id=\\\"事件如何被处理\\\"><a href=\\\"#事件如何被处理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件如何被处理?</h4><p>最常见是以调用事件处理函数来被处理的, 这个处理函数称为回调函数.  Node 通过一个 &quot;事件循环&quot; 来检查是否有事件待处理, 有的话就取出事件的回调函数, 执行后进入下一个循环.  等所有的事件都被处理完, 事件循环已经检测不到任何待处理事件了, 程序结束.</p><p><img src=\\\"https://i.imgur.com/FxGupL3.png\\\" alt=\\\"Screen Shot 2018-09-02 at 4.11.17 PM\\\"></p><h2 id=\\\"node-js-能干什么\\\"><a href=\\\"#node-js-能干什么\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.js 能干什么?</h2><h2 id=\\\"为什么用-node-js\\\"><a href=\\\"#为什么用-node-js\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么用 Node.js?</h2><h2 id=\\\"安装-node-js\\\"><a href=\\\"#安装-node-js\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 安装 Node.js</h2><p>根据\\b计算机平台的不同, 安装方法也略有差异.  本文侧重于概念, \\b具体实操, 可能每位读者\\b因\\b偏好不同, 方法各异.  \\b在此就不再赘述了.</p><p>最方便的方式是直接上官网去下载对应平台的源码或安装包, \\b或者通过包管理器直接安装.</p>\"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<a href=\\\"https://nodejs.org/zh-cn/download/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"下载 Node.js 源码或预编译安装包\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<a href=\\\"https://nodejs.org/zh-cn/download/package-manager/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"包管理器方式安装 Node.js\"),_c('OutboundLink')],2)])]),_vm._ssrNode(\"<h2 id=\\\"node-js-代码实例\\\"><a href=\\\"#node-js-代码实例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node.js 代码实例</h2><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">myNodeServer</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'Content-type'</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'text/plain'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hello World'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nhttp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span>myNodeServer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//监听 3000 端口</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Server is running!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n</code></pre></div><p>创建一个空文件, 把上面代码复制到其中, 文件后缀改成 <code>.js</code>.  然后在命令行中, 用 <code>node</code> 命令执行刚刚的文件 ( 注意文件所在目录位置和文件名 ) .</p><p><img src=\\\"https://i.imgur.com/ra39I8F.png\\\" alt=\\\"Screen Shot 2018-09-02 at 10.48.34 PM\\\"></p><p>如果运行成功你的命令行上会显示 &quot;Server is running!&quot; 这段话.  然后用浏览器访问 <code>http://localhost:3000/</code> 这个地址.  你会看到网页上显示 &quot;Hello World&quot;.  至此你就实现了一个简易 HTTP 服务器.</p><p><img src=\\\"https://i.imgur.com/I8L6OYq.png\\\" alt=\\\"Screen Shot 2018-09-02 at 10.45.24 PM\\\"></p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}