{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/javascript/基础知识/基本概念.md?vue&type=template&id=915724dc","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/javascript/基础知识/基本概念.md","mtime":1533269355781},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"基本概念\"><a class=\"header-anchor\" href=\"#基本概念\" aria-hidden=\"true\">#</a> 基本概念</h1>\n<h2 id=\"基础知识\"><a class=\"header-anchor\" href=\"#基础知识\" aria-hidden=\"true\">#</a> 基础知识</h2>\n<h3 id=\"区分大小写\"><a class=\"header-anchor\" href=\"#区分大小写\" aria-hidden=\"true\">#</a> 区分大小写</h3>\n<p>ECMAScript中的一切（变量、函数名和操作符）都区分大小写。</p>\n<h3 id=\"标识符\"><a class=\"header-anchor\" href=\"#标识符\" aria-hidden=\"true\">#</a> 标识符</h3>\n<p>标识符，就是指变量、函数、属性的名字，或者函数的参数。</p>\n<p>命名规则:</p>\n<ul>\n<li>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；</li>\n<li>其他字符可以是字母、下划线、美元符号或数字。</li>\n</ul>\n<h3 id=\"注释\"><a class=\"header-anchor\" href=\"#注释\" aria-hidden=\"true\">#</a> 注释</h3>\n<p>单行注释以两个斜杠开头</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 单行注释</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>多行注释以一个斜杠和一个星号（/<em>）开头，以一个星号和一个斜杠（</em>/）结尾, 中间的星号不是必须的</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\n *  这是一个多行\n *  （块级）注释\n */</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"严格模式\"><a class=\"header-anchor\" href=\"#严格模式\" aria-hidden=\"true\">#</a> 严格模式</h3>\n<p>严格模式是为JavaScript定义了一种不同的解析与执行模型。在严格模式下，一些不确定的行为将得到处理，而且对某些不安全的操作也会抛出错误。</p>\n<p>要在作用域中启用严格模式，可以在顶部添加如下代码：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 在全局</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 函数作用域</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这条不是字符串, 它是一个编译指示（pragma），用于告诉支持它的 JavaScript 引擎切换到严格模式。</p>\n<h3 id=\"语句\"><a class=\"header-anchor\" href=\"#语句\" aria-hidden=\"true\">#</a> 语句</h3>\n<p>语句以一个分号 &quot;;&quot; 结尾；如果省略分号，则由解析器确定语句的结尾.</p>\n<p>虽然可以省略分号, 但是有分号可以避免错误, 压缩语句之间多余的空格. 解析器也不用去判断哪里是语句的结尾了, 可以增加性能</p>\n<p>多条语句可以组合到一个代码块中, 代码块以左花括号（{）开头，以右花括号（}）结尾：</p>\n<h2 id=\"关键字和保留字\"><a class=\"header-anchor\" href=\"#关键字和保留字\" aria-hidden=\"true\">#</a> 关键字和保留字</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#%E5%85%B3%E9%94%AE%E5%AD%97\" target=\"_blank\" rel=\"noopener noreferrer\">关键字和保留字列表<OutboundLink/></a></p>\n<p>关键字 是可用于表示控制语句的开始或结束，或者用于执行特定操作等,\n保留字 是将来可能成为关键字的,</p>\n<p>它们都不可以用作标识符.</p>\n<h2 id=\"变量\"><a class=\"header-anchor\" href=\"#变量\" aria-hidden=\"true\">#</a> 变量</h2>\n<p>ECMAScript的变量是松散类型的，松散类型可以用来保存任何类型的数据。</p>\n<p>换句话说，每个变量仅仅是一个用于保存值的占位符而已。</p>\n<p>变量在离开作用域后就会被销毁</p>\n<p>定义变量时要使用 <code>var</code> 操作符, 后跟变量名（即一个标识符）:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>不用 <code>var</code> 操作符, 即使在函数内定义变量, 也会变成全局变量</p>\n<h2 id=\"数据类型\"><a class=\"header-anchor\" href=\"#数据类型\" aria-hidden=\"true\">#</a> 数据类型</h2>\n<p>ECMAScript中有 5 种简单数据类型（也称为基本数据类型）：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code> 和 <code>String</code>。还有 1 种引用数据类型 <code>Object</code></p>\n<h3 id=\"typeof-操作符\"><a class=\"header-anchor\" href=\"#typeof-操作符\" aria-hidden=\"true\">#</a> typeof 操作符</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\" target=\"_blank\" rel=\"noopener noreferrer\">typeof 文档<OutboundLink/></a></p>\n<p><code>typeof</code> 用于检测数据类型</p>\n<p>对一个值使用 typeof 可以返回一个字符串表示其数据类型, 具体信息请查阅文档</p>\n<p>调用 <code>typeof null</code> 会返回 &quot;object&quot;，因为特殊值 <code>null</code> 被认为是一个空的对象引用。</p>\n<h3 id=\"undefined-类型\"><a class=\"header-anchor\" href=\"#undefined-类型\" aria-hidden=\"true\">#</a> Undefined 类型</h3>\n<p>Undefined 类型只有一个值，即特殊的 <code>undefined</code>。在使用 <code>var</code> 声明变量但未对其加以初始化时，这个变量的值就是 <code>undefined</code></p>\n<p>这个值最初引入的原因是为了正式区分空对象指针与未经初始化的变量。</p>\n<h3 id=\"null-类型\"><a class=\"header-anchor\" href=\"#null-类型\" aria-hidden=\"true\">#</a> Null 类型</h3>\n<p><code>null</code> 值表示一个空对象指针, 如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为 <code>null</code> 而不是其他值</p>\n<h3 id=\"boolean-类型\"><a class=\"header-anchor\" href=\"#boolean-类型\" aria-hidden=\"true\">#</a> Boolean 类型</h3>\n<p>该类型只有两个字面值：<code>true</code> 和 <code>false</code>。</p>\n<p>虽然 Boolean 类型的字面值只有两个，但 ECMAScript 中所有类型的值都有与这两个 Boolean 值等价的值。要将一个值转换为其对应的 Boolean 值，可以调用转型函数 <code>Boolean()</code></p>\n<p>如果省略该参数，或者其值为 <code>0</code>、<code>-0</code>、<code>null</code>、<code>false</code>、<code>NaN</code>、<code>undefined</code>、或者空字符串（<code>&quot;&quot;</code>），则生成的 Boolean 对象的值为 false。如果传入的参数是 DOM 对象 <code>document.all</code>，也会生成值为 <code>false</code> 的 Boolean 对象。任何其他的值，包括值为 &quot;false&quot; 的字符串和任何对象，都会创建一个值为 <code>true</code> 的 Boolean 对象。</p>\n<h3 id=\"number-类型\"><a class=\"header-anchor\" href=\"#number-类型\" aria-hidden=\"true\">#</a> Number 类型</h3>\n<p>使用 IEEE754 格式来表示整数和浮点数值, 支持 十进制, 八进制, 十六进制数值字面量格式</p>\n<p>八进制字面值 的第一位必须是零（0），然后是八进制数字序列（0～7）。如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析。(严格模式下无效)\n十六进制字面值 的前两位必须是 <code>0x</code>，后跟任何十六进制数字（0～9及A～F）。其中，字母A～F可以大写，也可以小写。</p>\n<p>在进行算术计算时，所有值都会被转换成十进制数值。</p>\n<h4 id=\"浮点数值\"><a class=\"header-anchor\" href=\"#浮点数值\" aria-hidden=\"true\">#</a> 浮点数值</h4>\n<p>浮点数值，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字。</p>\n<p>保存浮点数值需要的内存空间是保存整数值的两倍.</p>\n<p>浮点数值的最高精度是17位小数, 进行算术计算时其精确度远远不如整数.</p>\n<p>0.1 加 0.2 的结果不是 0.3，而是 0.30000000000000004。这个小小的舍入误差会导致无法测试特定的浮点数值。</p>\n<h4 id=\"数值范围\"><a class=\"header-anchor\" href=\"#数值范围\" aria-hidden=\"true\">#</a> 数值范围</h4>\n<p>JS 能够表示的最小数值保存在 <code>Number.MIN_VALUE</code> 中, 一般为 <code>5e-324</code>,\n最大数值保存在 <code>Number.MAX_VALUE</code>, 一般为 <code>1.7976931348623157e+308</code>.</p>\n<p>如果超过这个值了, 这个数值将被自动转换成特殊的 <code>Infinity</code> 值,\n如果这个数值是负数，则会被转换成 <code>-Infinity</code>（负无穷），如果这个数值是正数，则会被转换成 <code>Infinity</code>（正无穷),</p>\n<p>要想确定一个数值是不是有穷的, 可以使用 <code>isFinite()</code> 函数。是的话返回 <code>true</code></p>\n<h4 id=\"nan\"><a class=\"header-anchor\" href=\"#nan\" aria-hidden=\"true\">#</a> NaN</h4>\n<p><code>NaN</code>，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况</p>\n<p>任何数值除以非数值会返回 <code>NaN</code>, <code>NaN</code> 与任何值都不相等，包括 <code>NaN</code> 本身</p>\n<p><code>isNaN()</code> 函数可以检测是否值可以被转换成数值, 任何不能被转换为数值的值都会导致这个函数返回 <code>true</code></p>\n<h4 id=\"数值转换\"><a class=\"header-anchor\" href=\"#数值转换\" aria-hidden=\"true\">#</a> 数值转换</h4>\n<p><code>Number()</code>、<code>parseInt()</code> 和 <code>parseFloat()</code>可以把非数值转换为数值, 转型函数 <code>Number()</code> 可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。</p>\n<p><code>Number()</code> 函数的转换规则如下。</p>\n<ul>\n<li>如果是<code>Boolean</code>值，<code>true</code>和<code>false</code>将分别被转换为 1 和 0。</li>\n<li>如果是数字值，只是简单的传入和返回。</li>\n<li>如果是<code>null</code>值，返回 0。</li>\n<li>如果是<code>undefined</code>，返回<code>NaN</code>。</li>\n<li>如果是 字符串，遵循下列规则：\n<ul>\n<li>如果字符串中只包含 <strong>数字</strong>（包括前面带加号或负号的情况），则将其转换为<strong>十进制数值</strong>。</li>\n<li>如果字符串中包含有效的 <strong>浮点格式</strong>，如 &quot;1.1&quot;，则将其转换为<strong>对应的浮点数值</strong>。</li>\n<li>如果字符串中包含有效的 <strong>十六进制</strong> 格式，例如&quot;0xf&quot;，则将其转换为相同大小的 <strong>十进制整数值</strong></li>\n<li>如果是<code>0</code>开头的数字，是按照<strong>十进制转换</strong></li>\n<li>如果字符串是 <strong>空的</strong>（不包含任何字符），则将其转换为 <strong>0</strong></li>\n<li>如果字符串中包含除上述<strong>格式之外</strong>的字符，则将其转换为 <code>\bNa\bN</code>。</li>\n</ul>\n</li>\n<li>如果是对象，则调用对象的<code>valueOf()</code>方法，然后依照前面的规则转换返回的值。如果转换的结果是<code>NaN</code>，则调用对象的<code>toString()</code>方法，然后再次依照前面的规则转换返回的字符串值。</li>\n</ul>\n<p>在处理 <strong>整数</strong> 的时候更常用的是<code>parseInt()</code>函数。</p>\n<p><code>parseInt()</code> 函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格字符。如果是数字字符<code>parseInt()</code>会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。</p>\n<p>如果第一个字符不是 数字字符 或者 正负号，<code>parseInt()</code>就会返回<code>NaN</code>；</p>\n<p>如果字符串以 &quot;0x&quot; 开头且后跟数字字符，就会将其当作一个 十六进制整数；如果字符串以 &quot;0&quot; 开头且后跟数字字符，则还是十进制。</p>\n<p>函数提供 第二个参数：转换时使用的 <strong>基数</strong>（即多少进制）</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0xAF\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//175</span>\n<span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AF\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//175</span>\n<span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AF\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">//NaN</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>parseFloat()</code> 也从第一个字符（位置0）开始解析每个字符。而且也是一直解析到字符串末尾，或者解析到遇见一个无效的浮点数字字符为止。</p>\n<p>也就是说，字符串中的 第一个小数点 是有效的，而 第二个小数点 就是无效的了。</p>\n<p><code>parseFloat()</code><strong>只解析十进制值</strong>，因此它没有用第二个参数指定基数的用法。十六进制格式的字符串则始终会被转换成0。</p>\n<h3 id=\"string-类型\"><a class=\"header-anchor\" href=\"#string-类型\" aria-hidden=\"true\">#</a> String 类型</h3>\n<h3 id=\"object-类型\"><a class=\"header-anchor\" href=\"#object-类型\" aria-hidden=\"true\">#</a> Object 类型</h3>\n</div>\n",null]}