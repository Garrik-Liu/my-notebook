{"remainingRequest":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/基本模块.md?vue&type=template&id=2bcf2bfd","dependencies":[{"path":"/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/基本模块.md","mtime":1531420161153},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1530932815982},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1530932815981},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1530932816121}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"核心模块\"><a class=\"header-anchor\" href=\"#核心模块\" aria-hidden=\"true\">#</a> 核心模块</h1>\n<h2 id=\"http-模块\"><a class=\"header-anchor\" href=\"#http-模块\" aria-hidden=\"true\">#</a> HTTP 模块</h2>\n<p><a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html\" target=\"_blank\" rel=\"noopener noreferrer\">\bHTTP 文档<OutboundLink/></a></p>\n<p>在 Node 标准库提供了 http 模块, 可以让 HTTP 协议 应用起来更简易.</p>\n<p>模块中封装了一个高效的 HTTP 服务器对象 和 一个简易的 HTTP 客户端.\n<code>http.Server</code> 是一个基于事件的 HTTP 服务器.\n<code>http.request</code> 则是一个 HTTP 客户端工具，用于向 HTTP 服务器发起请求.</p>\n<h3 id=\"http-服务器\"><a class=\"header-anchor\" href=\"#http-服务器\" aria-hidden=\"true\">#</a> HTTP 服务器</h3>\n<p>http.Server 是 http 模块中的 HTTP 服务器对象. 用 Node.js 做的所有基于 HTTP 协议的系统都是基于 http.Server 实现的.</p>\n<p>它提供了 一套封装级别很低的 API，仅仅是流控制和简单的消息解析，所有的高层功能都要通过它们接口来实现。</p>\n<h4 id=\"先看个实际使用\"><a class=\"header-anchor\" href=\"#先看个实际使用\" aria-hidden=\"true\">#</a> 先看个实际使用:</h4>\n<p>首先使用 <code>http.createServer</code> 方法创建一个实例.  这个函数接受一个 HTTP 请求处理函数 (requestListner) 作为参数, 返回一个 http.Server 实例.</p>\n<p>HTTP 请求处理函数 接受两个参数, 分别是请求对象 ( request ) 和响应对象 ( response )</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 引入 http 模块</span>\n<span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建实例</span>\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am Garrik'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在 3000 端口监听</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><p>在上面的代码中, 我先在编写了 响应头部. 然后编写了 响应\b体. 然后通过 <code>res.end</code> 结束并发送. 最后调用 <code>listen</code> 函数去监听服务器的 3000 端口.</p>\n<h4 id=\"知识点\"><a class=\"header-anchor\" href=\"#知识点\" aria-hidden=\"true\">#</a> 知识点:</h4>\n<p><a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_class_http_server\" target=\"_blank\" rel=\"noopener noreferrer\">http.Server 文档<OutboundLink/></a></p>\n<p>在讲解上面代码, 之前我们\b先来介绍一些知识.</p>\n<p><strong>http.Server 的事件:</strong></p>\n<p>首先 http.Server 是一个<strong>基于事件</strong>的 HTTP 服务器. 所有的请求都被封装为独立的事件， 开发者只需要对它的事件编写响应函数即可实现 HTTP 服务器的所有功能。</p>\n<p>事件都继承自 EventEmitter，常用的几个有:</p>\n<ul>\n<li>\n<p><strong><code>request</code></strong>:\n当收到客户端发来的请求时, 该事件触发.\n发送两个参数 req 和 res, ，分别是 <code>http.IncomingMessage</code> 和 <code>http.ServerResponse</code> 的实例，表示请求和响应信息。</p>\n</li>\n<li>\n<p><strong><code>connection</code></strong>:\n当 TCP 连接建立时，该事件被触发，提供一个参数 socket，为 <code>net.Socket</code> 的实例。\nconnection 事件的粒度要大于 request，因为客户端在 Keep-Alive 模式下可能会在同一个连接内发送多次请求。(粒度大意思就是事件被触发频率高, 个人理解.)</p>\n</li>\n<li>\n<p><strong><code>close</code></strong>:\n当服务器关闭时，该事件被触发。注意不是在用户连接断开时。</p>\n</li>\n</ul>\n<p><strong>http.IncomingMessage:</strong></p>\n<p>是 HTTP 请求的信息. 一般由\nhttp.Server 创建，作为 request 或 response 事件的第一个参数传递. 通常简称 request 或 req.</p>\n<p><strong>http.ServerResponse:</strong></p>\n<p>http.ServerResponse 是返回给客户端的信息，决定了用户最终能看到的结果。一般由\nhttp.Server 创建，作为 request 或 response 事件的第二个参数传递. 通常简称  response 或 res.</p>\n<h4 id=\"代码解析\"><a class=\"header-anchor\" href=\"#代码解析\" aria-hidden=\"true\">#</a> 代码解析:</h4>\n<p>首先在代码中, 我们创建一个 http.Server 实例, 然后监听 request 事件.</p>\n<p>http.Server 实例在创建时,\b 接收一个函数作为 requestListner 请求监听函数.</p>\n<p>当 request 事件触发了, request 事件向这个函数传递 req 和 res 两个对象, 同时该函数被\b回调执行.</p>\n</div>\n",null]}