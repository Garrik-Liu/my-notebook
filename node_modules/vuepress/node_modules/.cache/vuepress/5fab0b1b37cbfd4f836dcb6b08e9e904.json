{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/计算机通用/ols/files/test_prep.md?vue&type=template&id=dde2ccd8","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/计算机通用/ols/files/test_prep.md","mtime":1533704306516},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"test-prep\"><a class=\"header-anchor\" href=\"#test-prep\" aria-hidden=\"true\">#</a> Test Prep</h1>\n<h2 id=\"sql-tutorial\"><a class=\"header-anchor\" href=\"#sql-tutorial\" aria-hidden=\"true\">#</a> SQL Tutorial</h2>\n<p><a href=\"https://www.w3schools.com/sql/default.asp\" target=\"_blank\" rel=\"noopener noreferrer\">SQL Tutorial<OutboundLink/></a></p>\n<h2 id=\"using-single-row-functions\"><a class=\"header-anchor\" href=\"#using-single-row-functions\" aria-hidden=\"true\">#</a> Using Single-Row Functions</h2>\n<p><a href=\"https://www.w3schools.com/sql/sql_ref_oracle.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Oracle Functions List<OutboundLink/></a></p>\n<h2 id=\"using-aggregate-group-functions\"><a class=\"header-anchor\" href=\"#using-aggregate-group-functions\" aria-hidden=\"true\">#</a> Using Aggregate / Group Functions</h2>\n<p>Grouping allows several rows in a table to be grouped together and for a single value to be computed based on the group of rows.</p>\n<ul>\n<li><a href=\"https://www.w3schools.com/sql/sql_min_max.asp\" target=\"_blank\" rel=\"noopener noreferrer\">MIN(), MAX()<OutboundLink/></a></li>\n<li><a href=\"https://www.w3schools.com/sql/sql_count_avg_sum.asp\" target=\"_blank\" rel=\"noopener noreferrer\">COUNT(), AVG(), SUM()<OutboundLink/></a></li>\n</ul>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>Price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> SmallestPrice\n<span class=\"token keyword\">FROM</span> Products<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"using-from-where-group-by-having-order-by-distinct\"><a class=\"header-anchor\" href=\"#using-from-where-group-by-having-order-by-distinct\" aria-hidden=\"true\">#</a> Using FROM, WHERE, GROUP BY, HAVING, ORDER BY, Distinct</h2>\n<h4 id=\"from\"><a class=\"header-anchor\" href=\"#from\" aria-hidden=\"true\">#</a> FROM</h4>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> table_name<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"where\"><a class=\"header-anchor\" href=\"#where\" aria-hidden=\"true\">#</a> WHERE</h4>\n<p><code>WHERE</code> clause is used to filter records.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Customers <span class=\"token keyword\">WHERE</span> Country<span class=\"token operator\">=</span><span class=\"token string\">'Mexico'</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"group-by\"><a class=\"header-anchor\" href=\"#group-by\" aria-hidden=\"true\">#</a> Group By</h4>\n<p><code>GROUP BY</code> statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.</p>\n<p>The <code>GROUP BY</code> clause tells the database server to group rows <strong>based on the distinct values</strong> that exist for the specified columns.</p>\n<p>Syntax:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> column_name<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> table_name\n<span class=\"token keyword\">WHERE</span> condition\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> column_name<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> column_name<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g: Display the average salary per job type:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> avg_sal <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> job<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>\bE.g: Lists the number of customers in each country, sorted high to low:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>CustomerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Country\n<span class=\"token keyword\">FROM</span> Customers\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Country\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>CustomerID<span class=\"token punctuation\">)</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"having\"><a class=\"header-anchor\" href=\"#having\" aria-hidden=\"true\">#</a> HAVING</h4>\n<p><code>HAVING</code> clause was added to SQL because the <code>WHERE</code> keyword could not be used with aggregate functions.\n<code>HAVING</code> clause can impose a further condition based on an aggregate or group condition.</p>\n<p>Syntax:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> column_name<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> table_name\n<span class=\"token keyword\">WHERE</span> condition\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> column_name<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">HAVING</span> condition\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> column_name<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g: Lists the number of customers in each country. Only include countries with more than 5 customers:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>CustomerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Country\n<span class=\"token keyword\">FROM</span> Customers\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Country\n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>CustomerID<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"order-by\"><a class=\"header-anchor\" href=\"#order-by\" aria-hidden=\"true\">#</a> Order By</h4>\n<p><code>ORDER BY</code> keyword is used to sort the result-set in ascending or descending order.</p>\n<p>E.g: Selects all customers from the &quot;Customers&quot; table, sorted DESCENDING by the &quot;Country&quot; column:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Customers\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Country <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"distinct\"><a class=\"header-anchor\" href=\"#distinct\" aria-hidden=\"true\">#</a> Distinct</h4>\n<p><code>SELECT DISTINCT</code> statement is used to return only distinct (different) values.</p>\n<p>E.g: Selects only the DISTINCT values from the &quot;Country&quot; column in the &quot;Customers&quot; table:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> Country <span class=\"token keyword\">FROM</span> Customers<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g: Lists the number of different (distinct) customer countries:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">DISTINCT</span> Country<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Customers<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"joins-inner-join-outer-joins-left-join-and-right-join\"><a class=\"header-anchor\" href=\"#joins-inner-join-outer-joins-left-join-and-right-join\" aria-hidden=\"true\">#</a> Joins: Inner-Join, Outer Joins (Left Join and Right Join)</h2>\n<p>A <code>JOIN</code> clause is used to combine rows from two or more tables, based on a related column between them.</p>\n<ul>\n<li>INNER JOIN: Returns records that have matching values in both tables</li>\n<li>LEFT JOIN: Return all records from the left table, and the matched records from the right table</li>\n<li>RIGHT JOIN: Return all records from the right table, and the matched records from the left table</li>\n<li>FULL (OUTER) JOIN: Return all records when there is a match in either left or right table</li>\n</ul>\n<p><img src=\"https://i.imgur.com/JAWya3N.png\" alt=\"Screen Shot 2018-08-06 at 11.11.45 PM\"></p>\n<h4 id=\"inner-join\"><a class=\"header-anchor\" href=\"#inner-join\" aria-hidden=\"true\">#</a> Inner Join</h4>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> Orders<span class=\"token punctuation\">.</span>OrderID<span class=\"token punctuation\">,</span> Customers<span class=\"token punctuation\">.</span>CustomerName\n<span class=\"token keyword\">FROM</span> Orders <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> Customers \n<span class=\"token keyword\">ON</span> Orders<span class=\"token punctuation\">.</span>CustomerID <span class=\"token operator\">=</span> Customers<span class=\"token punctuation\">.</span>CustomerID<span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g: Display the employee number, name, job, salary, and salary grade for each employee</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> grade \n<span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> salgrade \n<span class=\"token keyword\">ON</span> sal <span class=\"token operator\">BETWEEN</span> losal <span class=\"token operator\">and</span> hisal \n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> sal <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"left-join\"><a class=\"header-anchor\" href=\"#left-join\" aria-hidden=\"true\">#</a> Left Join</h4>\n<p>E.g: select all customers, and any orders they might have:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> Customers<span class=\"token punctuation\">.</span>CustomerName<span class=\"token punctuation\">,</span> Orders<span class=\"token punctuation\">.</span>OrderID\n<span class=\"token keyword\">FROM</span> Customers <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> Orders \n<span class=\"token keyword\">ON</span> Customers<span class=\"token punctuation\">.</span>CustomerID <span class=\"token operator\">=</span> Orders<span class=\"token punctuation\">.</span>CustomerID\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Customers<span class=\"token punctuation\">.</span>CustomerName<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"right-join\"><a class=\"header-anchor\" href=\"#right-join\" aria-hidden=\"true\">#</a> Right Join</h4>\n<p>E,g: Return all employees, and any orders they might have placed:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> Orders<span class=\"token punctuation\">.</span>OrderID<span class=\"token punctuation\">,</span> Employees<span class=\"token punctuation\">.</span>LastName<span class=\"token punctuation\">,</span> Employees<span class=\"token punctuation\">.</span>FirstName\n<span class=\"token keyword\">FROM</span> Orders <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> Employees \n<span class=\"token keyword\">ON</span> Orders<span class=\"token punctuation\">.</span>EmployeeID <span class=\"token operator\">=</span> Employees<span class=\"token punctuation\">.</span>EmployeeID\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Orders<span class=\"token punctuation\">.</span>OrderID<span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"joins-non-equi-join-multiple-table-joins-self-joins\"><a class=\"header-anchor\" href=\"#joins-non-equi-join-multiple-table-joins-self-joins\" aria-hidden=\"true\">#</a> Joins: Non-equi Join, Multiple Table Joins, Self Joins</h2>\n<h2 id=\"using-set-operators-union-union-all-intersect-minus\"><a class=\"header-anchor\" href=\"#using-set-operators-union-union-all-intersect-minus\" aria-hidden=\"true\">#</a> Using SET operators (UNION, UNION ALL, INTERSECT, MINUS)</h2>\n<h4 id=\"union\"><a class=\"header-anchor\" href=\"#union\" aria-hidden=\"true\">#</a> UNION</h4>\n<p><code>UNION</code> operator combines the two sets of rows (from two SELECT statements) into a single row set.</p>\n<p>E.g: Display the employee number, name, salary and/or commission for each employee</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> <span class=\"token string\">'SAL'</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> sal <span class=\"token keyword\">AS</span> amount <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> <span class=\"token string\">'COMM'</span><span class=\"token punctuation\">,</span> comm <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> comm <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/SH2MqSS.png\" alt=\"Screen Shot 2018-08-06 at 11.50.58 PM\"></p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> <span class=\"token string\">'SAL'</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> sal <span class=\"token keyword\">AS</span> amount <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> <span class=\"token string\">'COMM'</span><span class=\"token punctuation\">,</span> comm <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> comm <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/EQlNFyL.png\" alt=\"Screen Shot 2018-08-06 at 11.53.48 PM\"></p>\n<h4 id=\"union-all\"><a class=\"header-anchor\" href=\"#union-all\" aria-hidden=\"true\">#</a> UNION ALL</h4>\n<p>When two sets of rows are UNIONed together, the <code>UNION</code> operator eliminates duplicate rows. To keep the duplicate rows, use the <code>UNION ALL</code> operator instead of the <code>UNION</code> operator.</p>\n<p>E.g: Display all of the different salary and commission amounts\n(This example has duplicate rows eliminated:)</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> sal <span class=\"token keyword\">AS</span> amount <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> comm <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> comm <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> amount\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/ni69CBy.png\" alt=\"Screen Shot 2018-08-06 at 11.56.10 PM\"></p>\n<p>E.g: Display all of the salary and commission amounts\n(This example keeps duplicate rows:)</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> sal <span class=\"token keyword\">AS</span> amount <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n<span class=\"token keyword\">SELECT</span> comm <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> comm <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> amount\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/rp9LWQS.png\" alt=\"Screen Shot 2018-08-06 at 11.55.55 PM\"></p>\n<h4 id=\"intersect\"><a class=\"header-anchor\" href=\"#intersect\" aria-hidden=\"true\">#</a> INTERSECT</h4>\n<p>The <code>INTERSECT</code> operator returns the rows that are common between two sets of rows.</p>\n<p>E.g: Display the employee number of all of the employees who earn 3000 or less and are managers</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> mgr <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">INTERSECT</span>\n<span class=\"token keyword\">SELECT</span> empno <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> sal <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3000</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> mgr<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/HRUk8bv.png\" alt=\"Screen Shot 2018-08-06 at 11.58.48 PM\"></p>\n<h4 id=\"minus\"><a class=\"header-anchor\" href=\"#minus\" aria-hidden=\"true\">#</a> MINUS</h4>\n<p>The <code>MINUS</code> operator returns the rows in the first set of rows that do not exist in the second set of rows. The MINUS operator is sometimes called the difference operator.</p>\n<p>E.g: Display the employee number of all employees who are not managers</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno <span class=\"token keyword\">FROM</span> emp\nMINUS\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> mgr <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"subqueries\"><a class=\"header-anchor\" href=\"#subqueries\" aria-hidden=\"true\">#</a> Subqueries</h2>\n<p>A subquery allows the results of one SELECT statement to be used in another DML statement.</p>\n<p>When used in a DML statement, a subquery must be enclosed in parentheses. The number of rows returned by a subquery must match the number of values that the function or operator expects. The <code>ORDER BY</code> clause cannot used within a subquery</p>\n<p>E.g: get the employee number, name, job, and salary of all employees that make more than the lowest paid salesman.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> sal <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">WHERE</span> sal <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> job <span class=\"token operator\">=</span> <span class=\"token string\">'SALESMAN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-subqueries-with-in-not-in\"><a class=\"header-anchor\" href=\"#using-subqueries-with-in-not-in\" aria-hidden=\"true\">#</a> Using Subqueries with IN, NOT IN</h3>\n<p>Using <code>IN</code> in a subquery allows a column or expression to be compared to a set of values returned from the subquery.</p>\n<p>E.g:  Get employee numbers of all of the managers of the clerks and analysts.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> mgr <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">where</span> job <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CLERK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ANALYST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"nested-subqueries\"><a class=\"header-anchor\" href=\"#nested-subqueries\" aria-hidden=\"true\">#</a> Nested Subqueries</h3>\n<p>A nested subquery is a subquery within a subquery.</p>\n<p>E.g: get the employee information for the managers with the most employees.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> empno <span class=\"token operator\">IN</span>\n<span class=\"token punctuation\">(</span>\n   <span class=\"token keyword\">SELECT</span> mgr <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> mgr <span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n   <span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> mgr\n   <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"correlated-subqueries\"><a class=\"header-anchor\" href=\"#correlated-subqueries\" aria-hidden=\"true\">#</a> Correlated Subqueries</h3>\n<p>Correlated subqueries reference information from the main query. Since a correlated subquery is dependent on row data from the main query, this subquery must be re-evaluated for each row of the main query.</p>\n<p>E.g: lists the employee number, name, job, and department name of all employees who do not work in the same department as their managers (but do have managers!)</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> dname \n<span class=\"token keyword\">FROM</span> emp employees <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> dept \n<span class=\"token keyword\">ON</span> employees<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>deptno\n<span class=\"token keyword\">WHERE</span> mgr <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token operator\">AND</span> employees<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">!=</span>\n<span class=\"token punctuation\">(</span>\n   <span class=\"token keyword\">SELECT</span> deptno <span class=\"token keyword\">FROM</span> emp managers <span class=\"token keyword\">WHERE</span> employees<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">=</span> managers<span class=\"token punctuation\">.</span>empno\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"subquery-virtual-columns\"><a class=\"header-anchor\" href=\"#subquery-virtual-columns\" aria-hidden=\"true\">#</a> Subquery Virtual Columns</h3>\n<p>A subquery can appear as a virtual column expression. This is a form of correlated subquery; that is, the subquery must execute for every row of the query. The subquery must return a single row and column.</p>\n<p>E.g: list each employee along with the name of the employee's department.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> ename<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> dname <span class=\"token keyword\">FROM</span> dept <span class=\"token keyword\">WHERE</span> dept<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> emp<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> dname <span class=\"token keyword\">FROM</span> emp<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g:  list the name and the number of employees in each department.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> dname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_emps <span class=\"token keyword\">FROM</span> dept<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"subquery-virtual-tables\"><a class=\"header-anchor\" href=\"#subquery-virtual-tables\" aria-hidden=\"true\">#</a> Subquery Virtual Tables</h3>\n<p>A subquery can appear as a virtual table in the <code>FROM</code> clause of a <code>SELECT</code> statement. The virtual table can appear as part of a table join. The columns produced by the virtual table become valid columns to SELECT in the query.</p>\n<p>E.g: list the employee name, salary, and salary grade for each employee that is salary grade 3 or higher.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> ename<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> grade \n<span class=\"token keyword\">FROM</span> \n<span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> salgrade \n<span class=\"token keyword\">ON</span> sal <span class=\"token operator\">BETWEEN</span> losal <span class=\"token operator\">AND</span> hisal<span class=\"token punctuation\">)</span> empsalgrade \n<span class=\"token keyword\">WHERE</span> grade <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g: list the name of all employees along with the number of employees in the department in which the employee resides ordered from the departments with the most employees to the department with the least employees, sub sorted alphabetically by employee name.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> ename<span class=\"token punctuation\">,</span> num_emps\n<span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> \n<span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> deptno<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> emp emp2 \n<span class=\"token keyword\">WHERE</span> emp2<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_emps <span class=\"token keyword\">FROM</span> dept<span class=\"token punctuation\">)</span> empcount \n<span class=\"token keyword\">ON</span> emp<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> empcount<span class=\"token punctuation\">.</span>deptno\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> num_emps <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">,</span> ename <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-subqueries-with-insert-update-and-delete\"><a class=\"header-anchor\" href=\"#using-subqueries-with-insert-update-and-delete\" aria-hidden=\"true\">#</a> Using Subqueries with INSERT, UPDATE, and DELETE</h3>\n<p><a href=\"https://garrik-liu.github.io/front-end-notebook/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E7%94%A8/ols/files/Modifying_a_Table_with_DML_Statements.html#insert\" target=\"_blank\" rel=\"noopener noreferrer\">My Note<OutboundLink/></a></p>\n<h4 id=\"insert\"><a class=\"header-anchor\" href=\"#insert\" aria-hidden=\"true\">#</a> Insert</h4>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> donations <span class=\"token punctuation\">(</span>receipt_no<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Kevin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dunn'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Insert Date:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> card_accounts <span class=\"token punctuation\">(</span>card_number<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> middle_initial<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> valid_date<span class=\"token punctuation\">,</span> expiry_date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">55555555</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cathy'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Puck'</span><span class=\"token punctuation\">,</span> TO_DATE<span class=\"token punctuation\">(</span><span class=\"token string\">'11-NOV-2005'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DD-MON-YYYY'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TO_DATE<span class=\"token punctuation\">(</span><span class=\"token string\">'10-NOV-2006'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DD-MON-YYYY'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Insert Internal:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> events <span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">,</span> next_event<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>TO_DSINTERVAL<span class=\"token punctuation\">(</span><span class=\"token string\">'0 02:30:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TO_YMINTERVAL<span class=\"token punctuation\">(</span><span class=\"token string\">'1-6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"update\"><a class=\"header-anchor\" href=\"#update\" aria-hidden=\"true\">#</a> Update</h4>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">UPDATE</span> donations <span class=\"token keyword\">SET</span> last_name <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">880</span> <span class=\"token keyword\">WHERE</span> receipt_no <span class=\"token operator\">=</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">UPDATE</span> donations <span class=\"token keyword\">SET</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Dunn'</span><span class=\"token punctuation\">,</span> amount <span class=\"token operator\">=</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">WHERE</span> receipt_no <span class=\"token operator\">=</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">UPDATE</span> donations <span class=\"token keyword\">SET</span> last_name <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">880</span> \n<span class=\"token keyword\">WHERE</span> receipt_no <span class=\"token operator\">=</span> <span class=\"token number\">1280</span> <span class=\"token operator\">AND</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Dunn'</span> <span class=\"token operator\">AND</span> amount <span class=\"token operator\">=</span> <span class=\"token number\">800</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"delete\"><a class=\"header-anchor\" href=\"#delete\" aria-hidden=\"true\">#</a> Delete</h4>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> donations <span class=\"token keyword\">WHERE</span> receipt_no <span class=\"token operator\">=</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Note that a row with a primary key cannot be deleted while a foreign key still refers to that primary key.</p>\n<p>If it is desireable that any related foreign keys are automatically removed as well or that foreign keys are set to NULL, the foreign key can be defined with the phrase <code>ON DELETE CASCADE</code> or <code>ON DELETE SET NULL</code>.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code>receipt_no NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">CONSTRAINT</span> receipt_no_fk <span class=\"token keyword\">REFERENCES</span> donations<span class=\"token punctuation\">(</span>receipt_no<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">CASCADE</span>\n\nreceipt_no NUMBER<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">CONSTRAINT</span> receipt_no_fk <span class=\"token keyword\">REFERENCES</span> donations<span class=\"token punctuation\">(</span>receipt_no<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">SET</span> <span class=\"token boolean\">NULL</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"views\"><a class=\"header-anchor\" href=\"#views\" aria-hidden=\"true\">#</a> Views</h2>\n<p>a view is a virtual table based on the result-set of an SQL statement.</p>\n<h3 id=\"create-views\"><a class=\"header-anchor\" href=\"#create-views\" aria-hidden=\"true\">#</a> Create Views</h3>\n<p>The syntax for creating a view is :</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">VIEW</span> view_name <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>column1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> columnN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">AS</span> select_statement<span class=\"token punctuation\">.</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Use the <code>OR REPLACE</code> option to recreate a view.</p>\n<p>E.g:  Construct a view that lists the name of all clerks along with their employee number and salary.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> clerks_analysts <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> job <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CLERK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ANALYST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g: Construct a view that lists all employees who have at least one other employee in the same department with the same manager they have AND who earn more than their managers.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> same_dept_big_money <span class=\"token punctuation\">(</span>empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> mgr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">,</span> mgr <span class=\"token keyword\">FROM</span> emp\n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">EXISTS</span>\n<span class=\"token punctuation\">(</span>\n   <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emp empcompare\n   <span class=\"token keyword\">WHERE</span> emp<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">=</span> empcompare<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">AND</span>\n   emp<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span> empcompare<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">AND</span>\n   emp<span class=\"token punctuation\">.</span>empno <span class=\"token operator\">!=</span> empcompare<span class=\"token punctuation\">.</span>empno\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">INTERSECT</span>\n<span class=\"token keyword\">SELECT</span> e1<span class=\"token punctuation\">.</span>empno<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>ename<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">.</span>mgr\n<span class=\"token keyword\">FROM</span> emp e1<span class=\"token punctuation\">,</span> emp e2\n<span class=\"token keyword\">WHERE</span> e2<span class=\"token punctuation\">.</span>empno <span class=\"token operator\">=</span> e1<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">AND</span> e1<span class=\"token punctuation\">.</span>sal <span class=\"token operator\">></span> e2<span class=\"token punctuation\">.</span>sal<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-views\"><a class=\"header-anchor\" href=\"#using-views\" aria-hidden=\"true\">#</a> Using Views</h3>\n<h4 id=\"delete-2\"><a class=\"header-anchor\" href=\"#delete-2\" aria-hidden=\"true\">#</a> Delete</h4>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> view_name<span class=\"token punctuation\">.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"modifying-data-behind-a-view\"><a class=\"header-anchor\" href=\"#modifying-data-behind-a-view\" aria-hidden=\"true\">#</a> Modifying Data behind a view</h3>\n<p>Creating a view differs from creating a table from a subquery in that a table is static and will not reflect changes in the tables on which it is based. A view will always reflect the current data.</p>\n<h3 id=\"modifying-data-through-a-view\"><a class=\"header-anchor\" href=\"#modifying-data-through-a-view\" aria-hidden=\"true\">#</a> Modifying Data through a view</h3>\n<p>Data can be modified through a view under three conditions.</p>\n<ul>\n<li>The view is based on a single table (or more precisely, the modification only affects a single key-preserved table).</li>\n<li>The select statement does not have a <code>DISTINCT</code> clause, aggregates, or a <code>GROUP BY</code> clause.</li>\n<li>The columns to be updated are not virtual columns — that is, they are based on real columns, not expressions.</li>\n</ul>\n<h3 id=\"restriction-when-updating-through-a-view\"><a class=\"header-anchor\" href=\"#restriction-when-updating-through-a-view\" aria-hidden=\"true\">#</a> Restriction when updating through a view</h3>\n<h4 id=\"creating-a-read-only-view\"><a class=\"header-anchor\" href=\"#creating-a-read-only-view\" aria-hidden=\"true\">#</a> Creating a Read-Only View</h4>\n<p>A view that would otherwise be updatable can be made non-updatable by adding the clause <code>WITH READ ONLY</code> to its create statement.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">VIEW</span> clerks_analysts <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> job <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CLERK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ANALYST'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WITH</span> <span class=\"token keyword\">READ</span> ONLY<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"using-the-with-check-option\"><a class=\"header-anchor\" href=\"#using-the-with-check-option\" aria-hidden=\"true\">#</a> Using the WITH CHECK OPTION</h4>\n<p>A view that includes a filter condition can prevent any updates to a row that will result in the row being excluded from the view.</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> clerks_analysts <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> empno<span class=\"token punctuation\">,</span> ename<span class=\"token punctuation\">,</span> sal<span class=\"token punctuation\">,</span> job <span class=\"token keyword\">FROM</span> emp <span class=\"token keyword\">WHERE</span> job <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CLERK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ANALYST'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WITH</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"privileges\"><a class=\"header-anchor\" href=\"#privileges\" aria-hidden=\"true\">#</a> Privileges</h2>\n<p>Privileges allow a user to grant another user authority to access and/or create, modify, or delete database objects within the user's workspace.</p>\n<p>There are two types of privileges:</p>\n<ul>\n<li><strong>System privileges</strong> allow the user to grant to another user the ability to create or destroy database objects in the user's workspace. E.g. CREATE TABLE privilege, DROP TABLE privilege. System privileges also include database administrator privileges such as CREATE USER privilege. A user must be database administrator to grant a database administration privilege to another user.</li>\n<li><strong>Object privileges</strong> allow the user to grant to another user the ability to access or modify a database object in the user's workspace. E.g. SELECT privilege, INSERT privilege, ALTER privilege. Object privileges must specify the object on which the privileges are being granted.</li>\n</ul>\n<p><img src=\"https://i.imgur.com/DBdRD4w.png\" alt=\"Screen Shot 2018-08-07 at 4.14.32 AM\"></p>\n<h3 id=\"granting-privileges\"><a class=\"header-anchor\" href=\"#granting-privileges\" aria-hidden=\"true\">#</a> Granting Privileges</h3>\n<p>Done By DBA</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">SESSION</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">TO</span> username<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Grant System Privileges:</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">TO</span> username <span class=\"token keyword\">WITH</span> ADMIN <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"revoking-privileges\"><a class=\"header-anchor\" href=\"#revoking-privileges\" aria-hidden=\"true\">#</a> Revoking Privileges</h3>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">FROM</span> username<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"creating-roles\"><a class=\"header-anchor\" href=\"#creating-roles\" aria-hidden=\"true\">#</a> Creating Roles</h3>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">CREATE</span> ROLE role_name<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-roles\"><a class=\"header-anchor\" href=\"#using-roles\" aria-hidden=\"true\">#</a> Using Roles</h3>\n<p>Assign a role to a user</p>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">GRANT</span> role_name <span class=\"token keyword\">TO</span> user_name\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"granting-and-revoking-privliges-on-database-objects\"><a class=\"header-anchor\" href=\"#granting-and-revoking-privliges-on-database-objects\" aria-hidden=\"true\">#</a> Granting and Revoking Privliges on Database Objects</h3>\n<!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">GRANT</span> privilege1<span class=\"token punctuation\">,</span> privilege2<span class=\"token punctuation\">,</span> …\n<span class=\"token keyword\">ON</span> object_name\n<span class=\"token keyword\">TO</span> user1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-sql extra-class\"><!--afterbegin--><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">REVOKE</span> privilege1<span class=\"token punctuation\">,</span> privilege2<span class=\"token punctuation\">,</span> …\n<span class=\"token keyword\">ON</span> object_name\n<span class=\"token keyword\">FROM</span> user1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"pl-sql\"><a class=\"header-anchor\" href=\"#pl-sql\" aria-hidden=\"true\">#</a> PL/SQL</h2>\n<h2 id=\"asp-net\"><a class=\"header-anchor\" href=\"#asp-net\" aria-hidden=\"true\">#</a> ASP.NET</h2>\n<h3 id=\"using-data-access-objects\"><a class=\"header-anchor\" href=\"#using-data-access-objects\" aria-hidden=\"true\">#</a> Using Data Access Objects</h3>\n<p>A <strong>Employee</strong> class is created to represent one employee. The constructor for the class takes parameters representing the employee's data. The <strong>EmployeeDAO</strong> class is used to get a List<Employee> object representing all of the employees. This object is suitable to use as a data source for our GridView.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>EmployeeDAO employeeDAO <span class=\"token operator\">=</span> new <span class=\"token function\">EmployeeDAO</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nList<span class=\"token operator\">&lt;</span>Employee<span class=\"token operator\">></span> employees<span class=\"token punctuation\">;</span>\nemployees <span class=\"token operator\">=</span> employeeDAO<span class=\"token punctuation\">.</span><span class=\"token function\">LoadAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngvEmp<span class=\"token punctuation\">.</span>DataSource <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">;</span>\ngvEmp<span class=\"token punctuation\">.</span><span class=\"token function\">DataBind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-gridview-drop-down-list-detailview-components-including-binding\"><a class=\"header-anchor\" href=\"#using-gridview-drop-down-list-detailview-components-including-binding\" aria-hidden=\"true\">#</a> Using GridView, Drop Down List, DetailView components (including binding)</h3>\n<p><strong>GridView</strong> can used to display database data.</p>\n<p>To populate the GridView, create a data table and fill it with the results of a SELECT statement. Then set the data table as the DataSource for the GridView and bind it.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>OracleConnection conn <span class=\"token operator\">=</span> new <span class=\"token function\">OracleConnection</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data Source=Neptune; User Id={0}; Password={1}\"</span><span class=\"token punctuation\">,</span> txtUsername<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> txtPassword<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nOracleCommand cmd <span class=\"token operator\">=</span> new <span class=\"token function\">OracleCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT empno, ename, job, sal, comm, deptno FROM emp\"</span><span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nOracleDataAdapter da <span class=\"token operator\">=</span> new <span class=\"token function\">OracleDataAdapter</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDataTable dt <span class=\"token operator\">=</span> new <span class=\"token function\">DataTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nda<span class=\"token punctuation\">.</span><span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngvEmp<span class=\"token punctuation\">.</span>DataSource <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">;</span>\ngvEmp<span class=\"token punctuation\">.</span><span class=\"token function\">DataBind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-gridview-rowcommand-events\"><a class=\"header-anchor\" href=\"#using-gridview-rowcommand-events\" aria-hidden=\"true\">#</a> Using GridView RowCommand events</h3>\n<p>The grid view's <strong>RowCommand</strong> event is invoked when the grid view's Edit button is clicked. The GridView can have more than one button. To distinguish which button is being pressed, check the event's CommandName property (from the <strong>GridViewCommandEventArgs</strong> object). The property value will match the CommandName property set for the button.\nE.g.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"EDIT\"</span> <span class=\"token operator\">==</span> e<span class=\"token punctuation\">.</span>CommandName<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>When the user clicks the Edit button, the row corresponding to which edit button was clicked is sent to the event in the <strong>GridViewCommandEventArgs</strong> object's <strong>CommandArgument</strong> property.</p>\n<h3 id=\"using-the-ispostback-property-in-the-pageload-event\"><a class=\"header-anchor\" href=\"#using-the-ispostback-property-in-the-pageload-event\" aria-hidden=\"true\">#</a> Using the IsPostBack property in the PageLoad event</h3>\n<p>All events occur only when the form is sent back to the server (called <strong>Posting Back</strong> to the server).</p>\n<p>Once all of the event code has run, the response page is constructed and sent back to the browser. This cycle is called a <strong>round trip</strong></p>\n<p>.Initialization code is often added to the page's <strong>Load</strong> event. that the page's Load event occurs each time the page loads</p>\n<p>If the initialization should only occur when the page first loads but not during user post back events, use the form's IsPostBack property to test for this.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>protected <span class=\"token keyword\">void</span> <span class=\"token function\">Page_Load</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>IsPostBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-validators-and-the-isvalid-property\"><a class=\"header-anchor\" href=\"#using-validators-and-the-isvalid-property\" aria-hidden=\"true\">#</a> Using Validators and the IsValid property</h3>\n<p>You can add a <strong>validator</strong> to the web form from the Validation section of the toolbox</p>\n<p>Tie the validator to a web control using its <strong>ConstrolToValidate</strong> property.</p>\n<p>Note that when using validators with a .NET 4.5 web application project you may get the error message:s</p>\n<blockquote>\n<p>WebForms UnobtrusiveValidationMode requires a ScriptResourceMapping for 'jquery'. Please add a ScriptResourceMapping named jquery(case-sensitive).</p>\n</blockquote>\n<p>To resolve the problem, open your Web.config file and add the code</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appSettings</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ValidationSettings:UnobtrusiveValidationMode<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>None<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>appSettings</span><span class=\"token punctuation\">></span></span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>just before the <code>&lt;/configuration&gt;</code> element.</p>\n<p>If event code should only run if the validation was successful, the use the form's <strong>IsValid</strong> property to test the validation results. The function returns True only if all form validations were successful.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>\nprotected <span class=\"token keyword\">void</span> <span class=\"token function\">btnSubmit_Click</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsValid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-url-encoded-parameters\"><a class=\"header-anchor\" href=\"#using-url-encoded-parameters\" aria-hidden=\"true\">#</a> Using URL-encoded parameters</h3>\n<p>URL-encoded can used to pass data from previous page. To add a URL-encoded parameter, append <code>?name=value</code> to the URL of the desired page</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">int</span> receiptNo<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 解析 url query</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">[</span><span class=\"token string\">\"receiptno\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> out receiptNo<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"page-transfers-server-transfer\"><a class=\"header-anchor\" href=\"#page-transfers-server-transfer\" aria-hidden=\"true\">#</a> Page Transfers (Server.Transfer)</h3>\n<p><code>Server.Transfer(url)</code> is used to make an internal transfer to the desired page. The browser is unaware of the transfer and does not display the new URL in its address bar. This could be a bit confusing for the user in some instances but often is desirable.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>Server<span class=\"token punctuation\">.</span><span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~/Birthday.aspx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"page-redirection-response-redirect\"><a class=\"header-anchor\" href=\"#page-redirection-response-redirect\" aria-hidden=\"true\">#</a> Page Redirection (Response.Redirect)</h3>\n<p><code>Response.Redirect(url)</code> is used to send back a special redirection response to the browser. The browser will then send a new request for the new URL. This URL will then appear in the browser's address bar.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>Response<span class=\"token punctuation\">.</span><span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~/Birthday.aspx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"retrieving-data-from-previous-page-controls\"><a class=\"header-anchor\" href=\"#retrieving-data-from-previous-page-controls\" aria-hidden=\"true\">#</a> Retrieving Data From Previous Page Controls</h3>\n<p>After navigating to a new page using either server transfer or cross-page posting,\nthe controls of the previous page can still be accessed using the page's <strong>PreviousPage</strong> object.\nSimply check first that this object is not null. Then any control from the previous page can be found using the <code>PreviousPage.FindControl</code> method.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>Calendar calBirthdate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Calendar<span class=\"token punctuation\">)</span>PreviousPage<span class=\"token punctuation\">.</span><span class=\"token function\">FindControl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calBirthdate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nTextBox txtName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>TextBox<span class=\"token punctuation\">)</span>PreviousPage<span class=\"token punctuation\">.</span><span class=\"token function\">FindControl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"txtName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>To retrieve public properties defined in the web form page, include the line</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>&lt;%@ PreviousPageType VirtualPath=\"previous page name.aspx\"%>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- PREVIOUS PAGE IS HOME --></span>\n&lt;%@ PreviousPageType VirtualPath=\"Home.aspx\"%>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"creating-using-master-detail-pages\"><a class=\"header-anchor\" href=\"#creating-using-master-detail-pages\" aria-hidden=\"true\">#</a> Creating/Using master-detail pages</h3>\n<p>A master/detail page allows a record to be selected in one data control and then have detail data related to the selected record displayed in another data control.</p>\n<p>For example, selecting a department in one data control and then seeing a list of employees in that department in the other data control.</p>\n<p>The master/detail page uses two data sources:</p>\n<ul>\n<li>one for the master records</li>\n<li>one for the related detail records.</li>\n</ul>\n<p>Add a Drop Down List to the web form. Select the data source created above for its data source. Specify the DataTextField as DNAME and the DataValueField as DEPTNO.</p>\n<p>Important! The DropDownList's <strong>AutoPostBack</strong> property is set to <code>True</code> so that the selection is sent to the server immediately when the selection is made.</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>IsPostBack<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Only populate the drop down if the request is not a postback request</span>\n<span class=\"token punctuation\">{</span>\n    LoginInfo login <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LoginInfo<span class=\"token punctuation\">)</span>Session<span class=\"token punctuation\">[</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    DepartmentDAO departmentDAO <span class=\"token operator\">=</span> new <span class=\"token function\">DepartmentDAO</span><span class=\"token punctuation\">(</span>login<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">,</span> login<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ddlDept<span class=\"token punctuation\">.</span>DataSource <span class=\"token operator\">=</span> departmentDAO<span class=\"token punctuation\">.</span><span class=\"token function\">LoadAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ddlDept<span class=\"token punctuation\">.</span>DataTextField <span class=\"token operator\">=</span> <span class=\"token string\">\"Dname\"</span><span class=\"token punctuation\">;</span>\n    ddlDept<span class=\"token punctuation\">.</span>DataValueField <span class=\"token operator\">=</span> <span class=\"token string\">\"DeptNo\"</span><span class=\"token punctuation\">;</span>\n    ddlDept<span class=\"token punctuation\">.</span><span class=\"token function\">DataBind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Also, the first entry in the list is an invalid entry prompting the user to select a department. The property <code>AppendDataBoundItems</code> is set to <code>True</code> to allow the data bound items to be added after this item. It is, therefore, important to not add more items every time the page loads. So the page load event includes a condition to only populate the list if the request is not a postback request (a postback request occurs when you respond to the page by clicking on a button, or selecting an item in a list, etc.</p>\n<p>When the <code>SelectedIndexChanged</code> event occurs, the value is retrieved and used to look up data corresponding to the master data selection and display it.</p>\n<!--beforebegin--><div class=\"language-C extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>protected <span class=\"token keyword\">void</span> <span class=\"token function\">ddlDept_SelectedIndexChanged</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    LoginInfo login <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LoginInfo<span class=\"token punctuation\">)</span>Session<span class=\"token punctuation\">[</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    EmployeeDAO employeeDAO <span class=\"token operator\">=</span> new <span class=\"token function\">EmployeeDAO</span><span class=\"token punctuation\">(</span>login<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">,</span> login<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> deptNo <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>ddlDept<span class=\"token punctuation\">.</span>SelectedValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    List<span class=\"token operator\">&lt;</span>Employee<span class=\"token operator\">></span> employees <span class=\"token operator\">=</span> employeeDAO<span class=\"token punctuation\">.</span><span class=\"token function\">FindByDepartmentNo</span><span class=\"token punctuation\">(</span>deptNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gvEmp<span class=\"token punctuation\">.</span>DataSource <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">;</span>\n    gvEmp<span class=\"token punctuation\">.</span><span class=\"token function\">DataBind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> employees<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span>\n        lblNoEmployees<span class=\"token punctuation\">.</span>Visible <span class=\"token operator\">=</span> deptNo <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        lblNoEmployees<span class=\"token punctuation\">.</span>Visible <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Add a GridView control to the web form. Set its data source to the second (detail) data source.</p>\n<h3 id=\"using-login-authentication-scheme-with-basepage\"><a class=\"header-anchor\" href=\"#using-login-authentication-scheme-with-basepage\" aria-hidden=\"true\">#</a> Using login authentication scheme (with BasePage)</h3>\n<p>We want to force the user to log in before being able to view any pages.  To do that we can use inheritance: a base Web Form page is created from which all other pages that need authentication can inherit.</p>\n<p>That is, in all future pages, change the clause:</p>\n<!--beforebegin--><div class=\"language-c# extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>public partial class Home : BasePage\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>assuming <strong>BasePage</strong> is the name of the WebForm used as the base page.</p>\n<p>In the code of this base page, add</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>protected override <span class=\"token keyword\">void</span> <span class=\"token function\">OnInit</span><span class=\"token punctuation\">(</span>EventArgs e<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">.</span><span class=\"token function\">OnInit</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Context <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> Context<span class=\"token punctuation\">.</span>Session <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> null <span class=\"token operator\">==</span> Session<span class=\"token punctuation\">[</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n       Response<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~/Login.aspx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://i.imgur.com/8D04AUB.jpg\" alt=\"Capture\"></p>\n<p>The session item &quot;login&quot; will contain a <code>LoginInfo</code> object that is created by the <strong>login page</strong>.</p>\n<p>To login, we will simply try to connect to the database using the given username and password. If the connection is successful, the user is authenticated. If the connection fails, we assume that either the username or password is invalid.</p>\n<p>Login Page Code:</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>protected <span class=\"token keyword\">void</span> <span class=\"token function\">btnLogin_Click</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsValid<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        try\n        <span class=\"token punctuation\">{</span>\n            LoginInfo loginInfo <span class=\"token operator\">=</span> DatabaseHelper<span class=\"token punctuation\">.</span><span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>txtUserName<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> txtPassword<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Session<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">,</span> loginInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Save login information into session</span>\n            Response<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~/Home.aspx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        catch <span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            lblInvalid<span class=\"token punctuation\">.</span>Visible <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Home Page Code:</p>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>protected <span class=\"token keyword\">void</span> <span class=\"token function\">Page_Load</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    LoginInfo login <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LoginInfo<span class=\"token punctuation\">)</span>Session<span class=\"token punctuation\">[</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    EmployeeDAO employeeDAO <span class=\"token operator\">=</span> new <span class=\"token function\">EmployeeDAO</span><span class=\"token punctuation\">(</span>login<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">,</span> login<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gvEmp<span class=\"token punctuation\">.</span>DataSource <span class=\"token operator\">=</span> employeeDAO<span class=\"token punctuation\">.</span><span class=\"token function\">LoadAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gvEmp<span class=\"token punctuation\">.</span><span class=\"token function\">DataBind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n protected <span class=\"token keyword\">void</span> <span class=\"token function\">btnLogout_Click</span><span class=\"token punctuation\">(</span>object sender<span class=\"token punctuation\">,</span> EventArgs e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Session<span class=\"token punctuation\">.</span><span class=\"token function\">Abandon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Response<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~/Home.aspx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"using-command-parameters\"><a class=\"header-anchor\" href=\"#using-command-parameters\" aria-hidden=\"true\">#</a> Using Command Parameters</h3>\n<!--beforebegin--><div class=\"language-c extra-class\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nOracleCommand cmd <span class=\"token operator\">=</span> new <span class=\"token function\">OracleCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT first_name, last_name, amount FROM donations WHERE receipt_no = :receiptNo\"</span><span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\ncmd<span class=\"token punctuation\">.</span>Parameters<span class=\"token punctuation\">.</span><span class=\"token function\">AddWithValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":receiptNo\"</span><span class=\"token punctuation\">,</span> receiptNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"executing-insert-update-and-delete-statements-from-asp-net\"><a class=\"header-anchor\" href=\"#executing-insert-update-and-delete-statements-from-asp-net\" aria-hidden=\"true\">#</a> Executing INSERT, UPDATE, and DELETE statements from ASP.NET</h3>\n<h4 id=\"insert-2\"><a class=\"header-anchor\" href=\"#insert-2\" aria-hidden=\"true\">#</a> INSERT</h4>\n<p><img src=\"https://i.imgur.com/SXgA5lH.png\" alt=\"Screen Shot 2018-08-07 at 6.42.49 PM\"></p>\n<h4 id=\"update-2\"><a class=\"header-anchor\" href=\"#update-2\" aria-hidden=\"true\">#</a> UPDATE</h4>\n<h4 id=\"delete-3\"><a class=\"header-anchor\" href=\"#delete-3\" aria-hidden=\"true\">#</a> Delete</h4>\n<h4 id=\"sequences\"><a class=\"header-anchor\" href=\"#sequences\" aria-hidden=\"true\">#</a> Sequences</h4>\n</div>\n",null]}