{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/Express/基本指南.md?vue&type=template&id=53df42ad","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/Express/基本指南.md","mtime":1532111593323},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"基本指南\\\"><a href=\\\"#基本指南\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基本指南</h1><h2 id=\\\"什么是-express\\\"><a href=\\\"#什么是-express\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么是 Express ?</h2><p>Node.js 基于 Chrome 的 V8引擎，使 JavaScript 可以脱离于浏览器，在服务器上运行。</p><p>因为 Node.js 只提供一些底层功能，开发者需要在此基础上编写很多冗长的代码。</p><p>Express 作为一个轻量框架，可以让 Node.js 程序编写更简单。</p><p>Express 之于 Node.js，就像 jQuery 之于 JavaScript;</p><h3 id=\\\"一个-node-js-程序\\\"><a href=\\\"#一个-node-js-程序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 一个 Node.js 程序</h3><p>假如创建一个 Node.js 服务器, 这整个程序就是一个 JavaScript 函数。这整个程序所做的事情就是接收请求，然后根据请求的内容去返回相应响应。比如说浏览器请求主页，它就会返回一个 HTML 文件。</p><p>在不用 Express 的情况下，过程就像\\b下图：</p><p><img src=\\\"https://i.imgur.com/pSx1DBJ.png\\\" alt=\\\"Screen Shot 2018-07-09 at 11.43.22 AM\\\"></p><p>JavaScript 函数接收请求，在这里\\b被称作 request handler。</p><p>Node.js's HTTP server 处理 客户端 与 函数 之间的连接，所以我不用去管什么网络协议问题。</p><p>在函数之中，它接收两个参数，请求对象 和 响应对象。</p><p>\\bNode.js 程序简单来说就是处理 请求 和 响应。\\b没有很复杂，但是因为原生提供的功能比较底层，所以代码量很大。使用框架可以让编写更简洁。</p><p><img src=\\\"https://i.imgur.com/g9ccPiM.png\\\" alt=\\\"Screen Shot 2018-07-09 at 11.52.16 AM\\\"></p><p>不用于\\b原生代码里写一个\\b巨大的 request handler。Express 把它根据请求内容拆分成很多小函数，有的处理所以的请求，有的只处理 GET 请求，有的只处理针对一个\\b特定 URL 的请求，等等。</p><h3 id=\\\"express-核心\\\"><a href=\\\"#express-核心\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Express 核心</h3><p>中间件：把一个大处理函数分解成小函数，用于处理请求，多个\\b中间件构成一个中间件链。每一段中间件处理指定请求内容。</p><p>路由\\b：不同于中间件什么请求都处理，路由只处理对应的 客户端发送过来的 URL 或者 HTTP\\b方法。</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}