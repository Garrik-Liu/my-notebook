{"remainingRequest":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/基础知识.md?vue&type=template&id=3ce63dea","dependencies":[{"path":"/Users/xiangliu/Downloads/front-end-notebook/docs/nodejs/NodeJs/基础知识.md","mtime":1531429468487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1530932815982},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1530932811487},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1530932815981},{"path":"/Users/xiangliu/Downloads/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1530932816121}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"基础知识\"><a class=\"header-anchor\" href=\"#基础知识\" aria-hidden=\"true\">#</a> 基础知识</h1>\n<h2 id=\"基础概念\"><a class=\"header-anchor\" href=\"#基础概念\" aria-hidden=\"true\">#</a> 基础概念</h2>\n<p>Node.js 是一个使用<strong>单线程, 事件驱动、非阻塞式 (异步式) I/O</strong> 的模型, 基于 <strong>Chrome V8 引擎</strong>的 <strong>JavaScript 运行环境</strong>。\b允许 J\bs 可以\b脱离浏览器去执行.</p>\n<blockquote>\n<p>要实现在后台运行 JavaScript 代码，代码需要先被解释然后正确的执行。Node.js 的原理正是如此，它使用了 Google 的 V8 虚拟机（ Google 的 Chrome 浏览器使用的 JavaScript 执行环境，来解释和执行 JavaScript 代码。</p>\n</blockquote>\n<h3 id=\"单线程-非阻塞-i-o-和-事件驱动\"><a class=\"header-anchor\" href=\"#单线程-非阻塞-i-o-和-事件驱动\" aria-hidden=\"true\">#</a> 单线程, 非阻塞 I/O 和 事件驱动</h3>\n<p>Node.js 最大的特点就是应用 非阻塞 I/O 与 事件驱动的编程模式。</p>\n<h4 id=\"什么是阻塞\"><a class=\"header-anchor\" href=\"#什么是阻塞\" aria-hidden=\"true\">#</a> 什么是阻塞?</h4>\n<p>在说非阻塞\b之前, 先了解什么是阻塞.\n线程在执行中如果遇到磁盘读写或网络通信(统称为 I/O 操作)， 通常要耗费较长的时间.  这时候操作系统会剥夺这个线程的 CPU 控制权，使其暂停执行，同时将资源让给其他的工作线程，这种线程调度方式称为阻塞。\n当 I/O 操作完毕时，操作系统 将这个线程的阻塞状态解除，恢复其对CPU的控制权，令其继续执行。这种 I/O 模式就是通常的 <strong>阻塞式 I/O</strong></p>\n<p>相应地，异步式 I/O 则针对 所有 I/O 操作不采用阻塞的策略。当线程遇到 I/O 操作时，不会以阻塞的方式等待 I/O 操作 的完成或数据的返回. 而只是将 I/O 请求发送给操作系统，继续执行下一条语句。\n当操作 系统完成 I/O 操作时，以事件的形式通知执行 I/O 操作的线程，线程会在特定时候处理这个 事件。为了处理异步 I/O，线程必须有事件循环，不断地检查有没有未处理的事件，依次予以处理。这种 I/O 模式就是通常的 <strong>非阻塞式 I/O</strong></p>\n<h4 id=\"非阻塞好处\"><a class=\"header-anchor\" href=\"#非阻塞好处\" aria-hidden=\"true\">#</a> 非阻塞好处</h4>\n<p>因为采用了非阻塞, 个线程永远在执行计算操作，这个线程所使用的 CPU 核心利用率几近是 100%，可以提高服务器的利用率, 提高系统吞吐量.</p>\n<p>假设我们有一项工作，可以分为两个计算部分和一个 I/O 部分，I/O 部分占的时间比计算多得多。如果我们使用阻塞 I/O，那么要想获得高并发就必须开启多个线程。而使用异步式 I/O 时，单线程即可胜任。</p>\n<p><img src=\"https://i.imgur.com/SW5NWqi.png\" alt=\"Screen Shot 2018-07-12 at 4.37.15 PM\"></p>\n<p><img src=\"https://i.imgur.com/FAfPumU.png\" alt=\"Screen Shot 2018-07-12 at 4.37.22 PM\"></p>\n<p>总而言之, 使用单线程事件驱动的异步式 I/O 可以\b避免服务器对于多线程的开销, 提高对服务器CPU性能的利用效率. 不好的\b地方, 可以就在于理解起来不直观\b吧.</p>\n<p><img src=\"https://i.imgur.com/PofEKRT.png\" alt=\"Screen Shot 2018-07-12 at 4.41.05 PM\"></p>\n<h3 id=\"回调函数\"><a class=\"header-anchor\" href=\"#回调函数\" aria-hidden=\"true\">#</a> 回调函数</h3>\n<p>在 Node.js 中，异步式 I/O 是通过回调函数来实现的。</p>\n<p>先看看代码的不同:</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 同步式读取文件</span>\n<span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 异步式读取文件</span>\n<span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p>同步式读取代码将文件名作为参数传入 <code>fs.readFileSync</code> 函 数，阻塞等待读取完成后，将文件的内容作为函数的返回值赋给 data 变量</p>\n<p>异步式读取文件是通过回调函数来实现的. fs.readFile 接收了三个参数， 第一个是文件名，第二个是编码方式，第三个是一个函数，我们称这个函数为回调函数。\n<code>fs.readFile</code> 调用时所做的工作只是将异步式 I/O 请求发送给了操作系统，然后立即 返回并执行后面的语句，执行完以后进入事件循环监听事件。当 fs 接收到 I/O 请求完成的事件时，事件循环会主动调用回调函数以完成后续工作。</p>\n<h3 id=\"事件\"><a class=\"header-anchor\" href=\"#事件\" aria-hidden=\"true\">#</a> 事件</h3>\n<p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。事件由 <code>EventEmitter</code> 对象提供。</p>\n<p>EventEmitter 使用例子:</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 引入 events 模块</span>\n<span class=\"token keyword\">var</span> events <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建 eventEmitter 对象</span>\n<span class=\"token keyword\">var</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">events<span class=\"token punctuation\">.</span>EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注册事件 \bsome_event</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some_event'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some_event occured.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">// 触发事件 some_event</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some_event'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div><!--beforeend--></div><!--afterend--><p>代码运行一秒后, 控制台输出 'some_event occured'.</p>\n<p>运行机制是 <code>event</code> 对象 注册了事件 <code>some_event</code> 的一个监听器, 通过 setTimeout 在1000毫秒以后向 <code>event</code> 对象发送事件 <code>some_event</code>，此时会调用绑定在 <code>some_event</code>监听器上的事件处理函数。</p>\n<h3 id=\"事件循环机制\"><a class=\"header-anchor\" href=\"#事件循环机制\" aria-hidden=\"true\">#</a> 事件循环机制</h3>\n</div>\n",null]}