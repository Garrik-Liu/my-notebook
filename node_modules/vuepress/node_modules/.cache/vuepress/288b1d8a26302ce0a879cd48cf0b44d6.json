{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/入门篇/使用MongoDB数据库.md?vue&type=template&id=f2718d32","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/个人心得/前端教程/NodeJs/入门篇/使用MongoDB数据库.md","mtime":1539621090410},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"使用-mongodb-数据库\"><a class=\"header-anchor\" href=\"#使用-mongodb-数据库\" aria-hidden=\"true\">#</a> 使用\b MongoDB 数据库</h1>\n<p>在这一节让我们开始学着在 Node.js 中使用 MongoDB 数据库.</p>\n<h2 id=\"什么是-mongodb\"><a class=\"header-anchor\" href=\"#什么是-mongodb\" aria-hidden=\"true\">#</a> 什么是 MongoDB</h2>\n<p>『 MongoDB 』 是由 C++ 语言编写的, 基于分布式文件存储的数据库. 属于 NoSql (非关系型数据库) 的一种, 旨在为 WEB 应用提供可扩展的高性能数据存储解决方案.</p>\n<p>MongoDB 将数据存储为一个文档，数据结构由键值对 <code>key:value</code> 组成.  MongoDB 文档类似于 JSON 对象.  字段值可以包含其他文档，数组及文档数组.</p>\n<p>下面就是一个 MongoDB 文档 (document) 示例:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Garrik\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"job\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Frontend Developer\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"关系型数据库-非关系型数据库\"><a class=\"header-anchor\" href=\"#关系型数据库-非关系型数据库\" aria-hidden=\"true\">#</a> 关系型数据库 &amp; 非关系型数据库</h3>\n<p>前面说到 MongoDB 是属于非关系型数据库的一种, 那么什么是关系型? 什么是非关系型?</p>\n<p>『 <strong>关系型数据库</strong> 』以 &quot;行&quot; 和 &quot;列&quot; 组成的 &quot;二维表格&quot; 形式来存储数据, 二维表格简称为称为表, 表又组成了数据库.  之所以称之为关系型数据库, 因为表与表之间采用了现实世界中实体 (entitiy) 与实体 (entitiy) 之间的关系模型.  表中存储格式化结构的数据，每个 &quot;元组&quot;（可以理解为二维表中的一行）的字段组成都是一样的.  即使不是每个元组都需要所有的字段，但数据库会为每个元组都分配所有的字段，这样的结构可以便于表与表之间进行连接等操作.  比较常见的关系型数据库有 Oracle, MySQL 等.</p>\n<p>『 <strong>非关系数据库</strong> 』以 &quot;键值对&quot; 存储，它的结构不固定，每一个元组可以有不一样的字段，可以根据需要增加或减少一些自己的键值对，不会局限于固定的结构.  数据之间的关联性不强制, 使用起来要比关系型数据库更加灵活, 性能也有提升.  比较常见的非关系型数据库有  MongoDB, Redis 等</p>\n<h2 id=\"mongodb-基础概念\"><a class=\"header-anchor\" href=\"#mongodb-基础概念\" aria-hidden=\"true\">#</a> MongoDB 基础概念</h2>\n<p>在具体讲如何使用 MongoDB 之前, 我要先介绍一些基本概念.</p>\n<h3 id=\"文档-document\"><a class=\"header-anchor\" href=\"#文档-document\" aria-hidden=\"true\">#</a> 文档 (document)</h3>\n<p>『 <strong>文档</strong> 』是\b一组 &quot;键值对&quot; 的有序集合.  是 MongoDB 的核心概念.  文档的数据结构和 JSON 基本一样, \b格式名称为 BSON, 是一种类似于 JSON 的二进制形式的存储格式.  下面是一个文档示例\b:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Garrik\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>&quot;name&quot;</code> 和 <code>&quot;age&quot;</code> 是这个文档的 &quot;键&quot; (key), <code>&quot;Garrik&quot;</code> 和 <code>21</code> 是 &quot;值&quot; (value)</p>\n<p>文档中的值可以是多种不同的数据类型. 在一个集合中各个文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型.</p>\n<p>MongoDB 区分类型和大小写. 例如，下面的两个文档是不同的：</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span><span class=\"token property\">\"foo\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"Foo\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在给文档的\b &quot;键&quot; 命名时还需要注意:</p>\n<ul>\n<li>文档的键是字符串</li>\n<li>键不能含有 <code>\\0</code> (空字符)。这个字符用来表示键的结尾</li>\n<li><code>.</code> 和 <code>$</code> 有特别的意义，只有在特定环境下才能使用</li>\n<li>以下划线 <code>_</code>开头的键是保留的 (不是严格要求的)</li>\n<li>一个文档内不能有重复的键</li>\n</ul>\n<h3 id=\"集合-collection\"><a class=\"header-anchor\" href=\"#集合-collection\" aria-hidden=\"true\">#</a> 集合 (collection)</h3>\n<p>『 <strong>集合</strong> 』就是一组文档，如果将 MongoDB 中的一个文档比喻为关系型数据库中的一行，那么一个集合就相当于一张表.  集合存在于数据库中，当第一个文档插入时，集合就会被创建.  集合没有固定的结构，一个集合里面的文档可以是各式各样的，这被称为 『 动态模式 』</p>\n<p>\b下面是一个集合示例:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"www.baidu.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"百度\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"www.google.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Google\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"search\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"前端开发\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"www.zhihu.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"知乎\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"罐装汽水_Garrik\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>虽然 MongoDB 对集合中的文档类型没有要求, 但通常情况下我们插入集合的数据都会有一定的关联性.  这样会降低查询\b特定文档的复杂度, 并且提升查询速度.</p>\n<p>集合命名时需要注意:</p>\n<ul>\n<li>集合名不能是空字符串。</li>\n<li>集合名不能含有 <code>\\0</code>（空字符)，这个字符表示集合名的结尾。</li>\n<li>集合名不能以 <code>system.</code> 开头，这是为系统集合保留的前缀。</li>\n<li>用户创建的集合名字不能含有保留字符 <code>$</code>。</li>\n</ul>\n<h3 id=\"数据库-database\"><a class=\"header-anchor\" href=\"#数据库-database\" aria-hidden=\"true\">#</a> 数据库 (database)</h3>\n<p>『 <strong>数据库</strong> 』由多个集合组成.  在 MongoDB 中可以建立多个数据库。每个数据库都有独立的权限，即便是在磁盘上，不同的数据库也放置在不同的文件中。按照经验，我们将有关一个应用程序的所有数据都存储在同一个数据库中。要想在同一个 MongoDB 服务器上存放多个应用程序或者用户的数据，就需要使用不同的数据库。</p>\n<p>MongoDB 的默认数据库为 <code>&quot;db&quot;</code>，该数据库存储在 <code>data</code> 目录中。</p>\n<p>数据库名可以是满足以下条件的任意 UTF-8 字符串:</p>\n<ul>\n<li>不是空字符串</li>\n<li>不得含有 <code>空格</code>、<code>.</code>、<code>$</code>、<code>/</code>、<code>\\</code> 和 <code>\\0</code> (空字符)</li>\n<li>数据库名区分大小写, 推荐全部小写</li>\n<li>最多 64 字节</li>\n</ul>\n<p>数据库最终会变成文件系统里的文件，而数据库名就是相应的文件名</p>\n<p>\b文档, 表单, 数据库之间的关系如下图:</p>\n<p><img src=\"https://i.imgur.com/LhMQBtL.png\" alt=\"Screen Shot 2018-10-14 at 5.48.11 PM\"></p>\n<h2 id=\"安装-mongodb-可视化工具\"><a class=\"header-anchor\" href=\"#安装-mongodb-可视化工具\" aria-hidden=\"true\">#</a> 安装 MongoDB &amp; 可视化工具</h2>\n<p>这篇文章我不想过多讲安装步骤, 大家可以自行去查阅方法.</p>\n<p><a href=\"http://www.runoob.com/mongodb/mongodb-window-install.html\" target=\"_blank\" rel=\"noopener noreferrer\">Windows 平台安装 MongoDB - 菜鸟教程<OutboundLink/></a>\n<a href=\"http://www.runoob.com/mongodb/mongodb-osx-install.html\" target=\"_blank\" rel=\"noopener noreferrer\">Mac 平台安装 MongoDB - 菜鸟教程<OutboundLink/></a></p>\n<p>为了更方便的管理 MongoDB 数据库, 我推荐使用 Studio 3T 可视化工具.</p>\n<p><a href=\"https://studio3t.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Studio 3T - 官网<OutboundLink/></a></p>\n<p>使用方法可参照下面链接内容:</p>\n<p><a href=\"https://blog.csdn.net/weixin_39999535/article/details/81383196\" target=\"_blank\" rel=\"noopener noreferrer\">Studio 3T 使用方法<OutboundLink/></a></p>\n<h2 id=\"在-node-js-中使用-mongodb\"><a class=\"header-anchor\" href=\"#在-node-js-中使用-mongodb\" aria-hidden=\"true\">#</a> 在 Node.js 中使用 MongoDB</h2>\n<p><a href=\"http://mongodb.github.io/node-mongodb-native/3.1/api/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">mongodb 模块 - 文档<OutboundLink/></a></p>\n<p>想要在 Node.js 中使用\b MongoDB, 要先安装 <a href=\"https://www.npmjs.com/package/mongodb\" target=\"_blank\" rel=\"noopener noreferrer\">mongodb 模块<OutboundLink/></a>, 具体步骤不赘述.  在 Node.js 中使用之前, 还需要先在命令行中用 <code>mongod</code> 指令运行 MongoDB 服务器.</p>\n<blockquote>\n<p>以下代码适用于 mongodb 模块 3.x 版本</p>\n</blockquote>\n<h3 id=\"连接数据库\"><a class=\"header-anchor\" href=\"#连接数据库\" aria-hidden=\"true\">#</a> 连接数据库</h3>\n<p>要想连接 MongoDB 数据库, 我们要先创建一个 MongoDB 客户端并且连接上 MongoDB 服务器.  之后在此连接之上创建数据库实例.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 引入模块</span>\n<span class=\"token keyword\">const</span> MongoClient <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>MongoClient<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// MongoDB 服务器的地址</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'mongodb://localhost:27017'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 目标数据库的名字</span>\n<span class=\"token keyword\">const</span> dbname <span class=\"token operator\">=</span> <span class=\"token string\">'mydb'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建 MongoDB 客户端</span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoClient</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 让客户端连接上服务器</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功连接到 MongoDB 服务器!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 创建数据库实例</span>\n    <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">db</span><span class=\"token punctuation\">(</span>dbname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 断开连接 </span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"插入文档\"><a class=\"header-anchor\" href=\"#插入文档\" aria-hidden=\"true\">#</a> 插入文档</h3>\n<p>要想向一个特定的集合插入文档, 首先我们用 <code>db.collection</code> 方法去获取目标集合的实例对象.  该方法第一个参数为集合的名字.  如果用这个名字的集合之前不存在, 它会自动帮你创建.</p>\n<p>之后我们用刚刚获得的集合实例的 <code>insertMany</code> 或 <code>insertOne</code> 方法来向集合插入文档.</p>\n<p>区别是:</p>\n<ul>\n<li><code>insertOne</code> 用以插入单个文档, 第一个参数为文档对象</li>\n<li><code>insertMany</code> 用以插入多个文档, 第一个参数为由文档对象组成的数组</li>\n</ul>\n<p>这两个方法的最后一个参数都为回调函数.  回调函数的第一个参数为错误信息, 第二个为处理结果</p>\n<p>假如说我们现在要向 <code>usersInfo</code> 集合插入用户信息, 代码如下:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>client<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">db</span><span class=\"token punctuation\">(</span>dbname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获取 'usersInfo' 集合的实例对象.</span>\n    <span class=\"token keyword\">const</span> collection <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'usersInfo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 插入单个用户的信息</span>\n    collection<span class=\"token punctuation\">.</span><span class=\"token function\">insertOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Garrik\"</span><span class=\"token punctuation\">,</span>\n        date_of_birth<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1997-06-04\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        \n        client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"查询全部文档\"><a class=\"header-anchor\" href=\"#查询全部文档\" aria-hidden=\"true\">#</a> 查询全部文档</h3>\n<p>如果我们想查询一个集合下的全部文档, 我们可以使用集合实例的 <code>find</code> 方法.  该方法的第一个参数为查询条件对象, 如果传入一个空对象 <code>{}</code> 则表示查询全部文档.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>client<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">db</span><span class=\"token punctuation\">(</span>dbname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获取 'usersInfo' 集合的实例对象.</span>\n    <span class=\"token keyword\">const</span> collection <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'usersInfo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 查询集合下的所有文档, 然后用 toArray 转换成数组</span>\n    collection<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"查询特定文档\"><a class=\"header-anchor\" href=\"#查询特定文档\" aria-hidden=\"true\">#</a> 查询特定文档</h3>\n<h3 id=\"更新文档\"><a class=\"header-anchor\" href=\"#更新文档\" aria-hidden=\"true\">#</a> 更新文档</h3>\n<h3 id=\"删除文档\"><a class=\"header-anchor\" href=\"#删除文档\" aria-hidden=\"true\">#</a> 删除文档</h3>\n</div>\n",null]}