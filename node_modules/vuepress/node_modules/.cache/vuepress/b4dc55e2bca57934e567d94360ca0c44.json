{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/git/git攻略.md?vue&type=template&id=18b23144","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/工程化/git/git攻略.md","mtime":1550653061346},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._m(0),_vm._m(1),_vm._m(2),_c('p',[_c('a',{attrs:{\"href\":\"https://git-scm.com/\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"Git 官网\"),_c('OutboundLink')],1)]),_vm._m(3),_c('p',[_vm._v(\"版本控制是一种用来 \\\"记录文件内容变化，并且允许将来查阅特定版本修订情况的系统\\\".  当编写文件时使用「版本控制系統」可以清楚的記錄每個檔案是誰在什麼時候加進來、什麼時候被修改或刪除。Git 是目前业界最流行的版本控制系統.\")]),_c('p',[_vm._v(\"Git 是分布式的, 相比于集中式的最大区别在于每一个客户端都是一个独立的节点，在各自的节点上都有独立的一份完整的版本库。一个人修改了文件，这时只要把修改过的文件发送给别人，别人就也都能看的到了。这样做不但提高了效率，而且即使一个人的电脑出问题了，也可以直接从其他人那里克隆一份。分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活.\")]),_vm._m(4),_vm._m(5),_vm._m(6),_vm._m(7),_vm._m(8),_vm._m(9),_vm._m(10),_c('p',[_vm._v(\"表示目录中没有东西可以提交.\")]),_vm._m(11),_vm._m(12),_vm._m(13),_c('p',[_vm._v(\"在状态报告中可以看到新建的 README 文件出现在 Untracked files 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件.\")]),_vm._m(14),_vm._m(15),_c('p',[_vm._v(\"只要在 Changes to be committed 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。\")]),_vm._m(16),_vm._m(17),_vm._m(18),_vm._m(19),_vm._m(20),_vm._m(21),_c('p',[_vm._v(\"表示已暂存，下次提交时就会一并记录到仓库。\")]),_vm._m(22),_vm._m(23),_vm._m(24),_vm._m(25),_vm._m(26),_vm._m(27),_vm._m(28),_vm._m(29),_vm._m(30),_vm._m(31),_vm._m(32),_vm._m(33),_vm._m(34),_vm._m(35),_vm._m(36),_vm._m(37),_vm._m(38),_vm._m(39),_vm._m(40),_vm._m(41),_c('p',[_vm._v(\"比如:\")]),_vm._m(42),_c('p',[_vm._v(\"第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件.\")]),_vm._m(43),_vm._m(44),_vm._m(45),_vm._m(46),_vm._m(47),_c('p',[_vm._v(\"下面有些例子:\")]),_vm._m(48),_vm._m(49),_c('p',[_vm._v(\"Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。\")]),_c('p',[_vm._v(\"Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：\")]),_vm._m(50),_c('p',[_vm._v(\"Git 数据库中保存的信息都是以文件内容的哈希值来索引.\")]),_vm._m(51),_vm._m(52),_vm._m(53),_vm._m(54),_vm._m(55),_vm._m(56),_vm._m(57),_vm._m(58),_vm._m(59),_vm._m(60),_vm._m(61),_vm._m(62),_vm._m(63),_vm._m(64),_vm._m(65),_vm._m(66),_vm._m(67),_vm._m(68),_vm._m(69),_vm._m(70),_vm._m(71),_vm._m(72),_vm._m(73),_vm._m(74),_vm._m(75),_vm._m(76),_vm._m(77),_vm._m(78),_vm._m(79),_vm._m(80),_c('p',[_vm._v(\"通过使用不同的选项参数\\b可以帮助我们找到要找的提交.\")]),_vm._m(81),_vm._m(82),_vm._m(83),_c('p',[_vm._v(\"另外一个常用的选项是 \"),_c('code',[_vm._v(\"--pretty\")]),_vm._v(\"。 这个选项可以指定使用不同于默认格式的方式展示提交历史。这个选项有一些内建的子选项供你使用。 比如用 \"),_c('code',[_vm._v(\"oneline\")]),_vm._v(\" 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有 \"),_c('code',[_vm._v(\"short\")]),_vm._v(\"，\"),_c('code',[_vm._v(\"full\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"fuller\")]),_vm._v(\" 可以用.  \"),_c('code',[_vm._v(\"format\")]),_vm._v(\" 选项可以定制要显示的记录格式。 这样的输出对后期提取分析格外有用.  具体文档参考-\"),_c('a',{attrs:{\"href\":\"https://git-scm.com/docs/pretty-formats\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"链接\"),_c('OutboundLink')],1)]),_vm._m(84),_vm._m(85),_c('p',[_vm._v(\"Git 可以给历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。\")]),_vm._m(86),_vm._m(87),_vm._m(88),_vm._m(89),_vm._m(90),_vm._m(91),_vm._m(92),_c('p',[_vm._v(\"一个轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。\")]),_c('p',[_vm._v(\"然而，附注标签是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 GNU Privacy Guard （GPG）签名与验证。 通常建议创建附注标签，这样你可以拥有以上所有信息\")]),_vm._m(93),_vm._m(94),_vm._m(95),_vm._m(96),_vm._m(97),_vm._m(98),_vm._m(99),_vm._m(100),_vm._m(101),_vm._m(102),_vm._m(103),_vm._m(104),_vm._m(105),_vm._m(106),_vm._m(107),_vm._m(108),_c('p',[_vm._v(\"分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。\")]),_vm._m(109),_c('p',[_vm._v(\"假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。\")]),_vm._m(110),_vm._m(111),_c('p',[_vm._v(\"Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个树对象（记录着目录结构和 blob 对象索引）以及一个提交对象（包含着指向前述树对象的指针和所有提交信息）。\")]),_vm._m(112),_vm._m(113),_c('p',[_vm._v(\"由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符）\")]),_vm._m(114),_c('p',[_vm._v(\"HEAD 是一個指標，指向某一個分支，通常你可以把 HEAD 當做「目前所在分支」看待。在 .git 目錄裡有一個檔名為 HEAD 的檔案，就是記錄著 HEAD 的內容，來看一下這東西長什麼樣子：\")]),_vm._m(115),_vm._m(116),_vm._m(117),_vm._m(118),_vm._m(119),_c('p',[_vm._v(\"当有两个指向相同提交对象的\\b分支存在时, Git 又是怎么知道当前在哪一个分支上呢？ 也很简单，它有一个名为 HEAD 的特殊指针。在 Git 中，它是一个指针，指向当前所在的本地分支（译注：将 HEAD 想象为当前分支的别名）。\")]),_vm._m(120),_vm._m(121),_vm._m(122),_vm._m(123),_vm._m(124),_vm._m(125),_vm._m(126),_vm._m(127),_c('p',[_vm._v(\"这样 HEAD 就指向 testing 分支了。HEAD 分支随着提交操作自动向前移动.\")]),_c('p',[_vm._v(\"\\b\\b在刚刚的例子中, 把分支切换回 master.  HEAD 指回 master 分支，同时工作目录恢复成 master 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 testing 分支所做的修改，以便于向另一个方向进行开发。\")]),_vm._m(128),_c('p',[_vm._v(\"如果在 master 分支上, 做一些\\b内容修改, 并且提交, 则项目出现分支分叉情况.\")]),_vm._m(129),_vm._m(130),_vm._m(131),_vm._m(132),_vm._m(133),_vm._m(134),_c('p',[_vm._v(\"\\b上面命令里, 切换到 master 分支, 然后把 hotfix 分支合并进来.\")]),_vm._m(135),_c('p',[_vm._v(\"你应该注意到了 \\\"快进\\\"（fast-forward）这个词。 在这个例子中, 由于当前 master 分支所指向的提交是你要合并进来的分支所指向的提交（有关 hotfix 的提交）的直接上游，所以 Git 只是简单的将指针向前移动。\")]),_vm._m(136),_vm._m(137),_c('p',[_vm._v(\"如果要合并两个之间存在分叉的分支.  Git 会使用两个分支的末端所指的快照, 以及这两个分支的工作祖先，做一个简单的三方合并。\")]),_vm._m(138),_c('p',[_vm._v(\"和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。这个被称作一次 \\\"合并提交\\\"，它的特别之处在于他有不止一个父提交。\")]),_vm._m(139),_c('p',[_vm._v(\"如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，\\b冲突就会出现.  合并时 Git 会等待你去解决合并产生的冲突。 你可以在合并冲突后的任意时刻使用 git status 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件：\")]),_vm._m(140),_vm._m(141),_vm._m(142),_vm._m(143),_vm._m(144),_vm._m(145),_vm._m(146),_vm._m(147),_vm._m(148),_vm._m(149),_vm._m(150),_vm._m(151),_vm._m(152),_vm._m(153),_vm._m(154),_vm._m(155),_vm._m(156),_vm._m(157),_c('p',[_vm._v(\"它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。\")]),_c('p',[_vm._v(\"但是变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。\")]),_c('p',[_vm._v(\"一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。\")]),_vm._m(158),_c('p',[_vm._v(\"在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。\")]),_vm._m(159),_vm._m(160),_vm._m(161),_c('p',[_vm._v(\"以上命令的意思是：“取出 client 分支，找出处于 client 分支和 server 分支的共同祖先之后的修改，然后把它们在 master 分支上重放一遍”。\")]),_vm._m(162),_vm._m(163),_c('p',[_vm._v(\"变基有一条准则：\")]),_vm._m(164),_vm._m(165),_c('p',[_vm._v(\"看个例子:\")]),_c('p',[_vm._v(\"假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。 你的提交历史如图所示：\")]),_vm._m(166),_c('p',[_vm._v(\"然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。 你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样：\")]),_vm._m(167),_vm._m(168),_vm._m(169),_vm._m(170),_vm._m(171),_vm._m(172),_vm._m(173),_vm._m(174),_vm._m(175),_vm._m(176),_vm._m(177),_vm._m(178),_vm._m(179),_c('p',[_vm._v(\"如果想问哪个更好, 先思考提交历史到底意味着什么?\")]),_vm._m(180),_vm._m(181),_c('p',[_vm._v(\"到底合并还是变基好？这并没有一个简单的答案。 Git 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。 既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。\")]),_vm._m(182),_vm._m(183),_c('p',[_vm._v(\"远程仓库是指托管在因特网或其他网络中的你的项目的版本库.  与他人协作时, 可以在这个远程仓库上根据需要 \\\"推送\\\" 或 \\\"拉取\\\" 数据。\")]),_vm._m(184),_vm._m(185),_vm._m(186),_vm._m(187),_vm._m(188),_vm._m(189),_vm._m(190),_vm._m(191),_c('p',[_vm._v(\"\\b应用场景: 先有本地库, 后有远程库\")]),_vm._m(192),_vm._m(193),_vm._m(194),_c('p',[_vm._v(\"应用场景: 先有远程库, 后有本地库\")]),_c('p',[_vm._v(\"假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。\")]),_vm._m(195),_vm._m(196),_vm._m(197),_vm._m(198),_vm._m(199),_vm._m(200),_vm._m(201),_vm._m(202),_vm._m(203),_vm._m(204),_vm._m(205),_c('p',[_vm._v(\"這個簡單的 Push 指令其實做了幾件事：\")]),_vm._m(206),_c('p',[_vm._v(\"只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。\")]),_c('p',[_vm._v(\"你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。\")]),_vm._m(207),_c('p',[_vm._v(\"upstream，中文翻譯成「上游」.  在 Git 裡，每個分支可以設定一個「上游」（但每個分支最多只能設定一個 upstream）.  它會指向並追蹤（track）某個分支。通常 upstream 會是远端 Server 上的某個分支，但其實要設定在本地端的其它分支也可以。\")]),_vm._m(208),_vm._m(209),_vm._m(210),_vm._m(211),_vm._m(212),_c('p',[_vm._v(\"其實上面這個指令跟下面這個指令是一樣的效果：\")]),_vm._m(213),_c('p',[_vm._v(\"意思是「把本地的 master 分支推上去後，在 Server 上更新 master 分支的進度，或是如果不存在該分支的話，就建立一個 master 分支」。\")]),_c('p',[_vm._v(\"但如果你想推上去之後不要叫這個名字的話，可以把後面的那個名字改掉：\")]),_vm._m(214),_c('p',[_vm._v(\"這樣當把本地端的 master 分支推上去之後，就不會在線上建立 master 分支，而是建立（或更新進度）一個叫做 cat 的分支了。\")]),_vm._m(215),_vm._m(216),_vm._m(217),_vm._m(218),_vm._m(219),_vm._m(220),_vm._m(221),_vm._m(222),_vm._m(223),_vm._m(224),_vm._m(225),_vm._m(226),_vm._m(227),_vm._m(228),_vm._m(229),_vm._m(230),_c('p',[_vm._v(\"假如我们有如下的提交:\")]),_vm._m(231),_vm._m(232),_vm._m(233),_c('p',[_vm._v(\"這個指令會跳出一個 Vim 編輯器：\")]),_vm._m(234),_vm._m(235),_vm._m(236),_c('p',[_vm._v(\"因为提交改变了, 提交的 SHA-1 也就改变了.  之後的 Commit 因為前面的歷史改了，所以後面整串的 Commit 全部都重新做出新的 Commit 出來替代舊的 Commit。\")]),_vm._m(237),_vm._m(238),_vm._m(239),_vm._m(240),_vm._m(241),_c('p',[_vm._v(\"存檔並離開 Vim 編輯器後，它會開始進行 Rebase，而在 Squash 的過程中，它還會跳出 Vim 編輯器讓你編輯一下訊息\")]),_vm._m(242),_c('p',[_vm._v(\"把訊息改成「add all cats」：\")]),_vm._m(243),_vm._m(244),_c('p',[_vm._v(\"如果你在一个提交里做了多出改动, 你之后想把它拆成多个提交, 同樣也可使用互動模式的 Rebase 來操作.\")]),_vm._m(245),_vm._m(246),_vm._m(247),_vm._m(248),_vm._m(249),_vm._m(250),_vm._m(251),_vm._m(252),_vm._m(253),_vm._m(254),_vm._m(255),_vm._m(256),_vm._m(257),_vm._m(258),_vm._m(259),_c('p',[_vm._v(\"但会发现原来的提交还在, 而且多了一个新的提交来表示撤销.\")]),_vm._m(260),_vm._m(261),_vm._m(262),_vm._m(263),_c('p',[_vm._v(\"Git 作为一个分布式版本系统，不可避免涉及到多人协作。\")]),_c('p',[_vm._v(\"协作必须有一个规范的工作流程，让大家有效地合作，使得项目井井有条地发展下去。\")]),_vm._m(264),_c('p',[_vm._v(\"它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。\")]),_c('p',[_vm._v(\"团队开发中，遵循一个合理、清晰的 Git 使用流程，是非常重要的。\")]),_vm._m(265),_vm._m(266),_c('p',[_vm._v(\"每次开发新功能，都应该新建一个单独的分支\")]),_vm._m(267),_vm._m(268),_vm._m(269),_c('p',[_vm._v(\"第一行是不超过 50 个字的提要，然后空一行，罗列出改动原因、主要变动、以及需要注意的问题。最后，提供对应的网址.\")]),_vm._m(270),_vm._m(271),_vm._m(272),_c('p',[_vm._v(\"分支开发完成后，很可能有一堆 commit，但是合并到主干的时候，往往希望只有一个（或最多两三个）commit，这样不仅清晰，也容易管理。\")]),_vm._m(273),_vm._m(274),_vm._m(275),_c('p',[_vm._v(\"合并提交后，就可以推送当前分支到远程仓库了。\")]),_vm._m(276),_vm._m(277),_vm._m(278),_vm._m(279),_vm._m(280),_vm._m(281),_vm._m(282),_c('p',[_vm._v(\"可能發生這個狀態的原因有：\")]),_vm._m(283),_c('p',[_vm._v(\"让我们来说个更具体的例子:\")]),_vm._m(284),_vm._m(285),_vm._m(286),_c('p',[_vm._v(\"这个时候如果再进行一次提交.\")]),_vm._m(287),_vm._m(288),_vm._m(289),_c('p',[_vm._v(\"如果還想留下這個提交，就給它一個分支指著它就行了.\")]),_vm._m(290),_c('p',[_vm._v(\"或者\")]),_vm._m(291),_vm._m(292),_c('p',[_vm._v(\"SHA-1 是「Secure Hash Algorithm 1」的缩写, 計算之後的結果通常會以 40 個十六進位的字符呈現.  這個演算法的特點之一，就是只要輸入一樣的值，就會有一樣的輸出值，反之，如果是不同的輸入值，就會有不同的輸出值。\")]),_vm._m(293),_vm._m(294),_c('p',[_vm._v(\"这个几率十分小, 小到不用考虑.\")])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h1',{attrs:{\"id\":\"git-攻略\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#git-攻略\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Git 攻略\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('blockquote',[_c('p',[_c('strong',[_vm._v(\"摘要\")]),_vm._v(\": 本文讲解 Git 是什么, 有什么用, 如何用 Git 进行版本控制, 以及\\b\\b\\b大厂的版本管理策略.\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"git-干什么的\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#git-干什么的\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Git 干什么的?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"Git 是一个开源的分布式版本控制系统。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"git-基础\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#git-基础\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Git 基础\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"初始化仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#初始化仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 初始化仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在一个目录下使用 \"),_c('code',[_vm._v(\"git init\")]),_vm._v(\" 指令初始化這個目錄，主要目的是要讓 Git 開始對這個目錄進行版本控制。這個指令會在這個目錄裡建立了一個 \"),_c('code',[_vm._v(\".git\")]),_vm._v(\" 隐藏目录.  这个目录是 Git 来跟踪管理版本库的, 它将默认记录项目目录中任何文件的改动。如果把这个子目录删除了，这里面记录的文件版本就都没有了.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"记录每次更新到仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#记录每次更新到仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 记录每次更新到仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"检查当前文件状态\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#检查当前文件状态\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 检查当前文件状态\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在一个空目录下执行 \"),_c('code',[_vm._v(\"git init\")]),_vm._v(\".  之后使用命令 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 来查看这个目录的状态.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" status\\nOn branch master\\n\\nInitial commit\\n\\nnothing to commit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"create/copy files and use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add\\\"\")]),_vm._v(\" to track\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"跟踪新文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#跟踪新文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 跟踪新文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 命令，你将看到一个新的未跟踪文件：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\nUntracked files:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add <file>...\\\"\")]),_vm._v(\" to include \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"in\")]),_vm._v(\" what will be committed\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n    readme.md\\n\\nnothing added to commit but untracked files present \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add\\\"\")]),_vm._v(\" to track\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"现在用 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 跟踪 \"),_c('code',[_vm._v(\"readme.md\")]),_vm._v(\" 文件.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\n\\nNo commits yet\\n\\nChanges to be committed:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git rm --cached <file>...\\\"\")]),_vm._v(\" to unstage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tnew file:   readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"暂存已修改文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#暂存已修改文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 暂存已修改文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"现在修改一下之前被跟踪的 \"),_c('code',[_vm._v(\"readme.md\")]),_vm._v(\" 文件.  然后再执行 \"),_c('code',[_vm._v(\"git status\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\n\\nNo commits yet\\n\\nChanges to be committed:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git rm --cached <file>...\\\"\")]),_vm._v(\" to unstage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tnew file:   readme.md\\n\\nChanges not staged \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"for\")]),_vm._v(\" commit:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add <file>...\\\"\")]),_vm._v(\" to update what will be committed\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git checkout -- <file>...\\\"\")]),_vm._v(\" to discard changes \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"in\")]),_vm._v(\" working directory\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tmodified:   readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"readme.md\")]),_vm._v(\" 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 命令。这个命令将可以理解为 “\"),_c('strong',[_vm._v(\"添加内容到下一次提交中\")]),_vm._v(\"” 而不是 “将一个文件添加到项目中” 要更加合适。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"添加完后, 在执行 \"),_c('code',[_vm._v(\"git status\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\n\\nNo commits yet\\n\\nChanges to be committed:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git rm --cached <file>...\\\"\")]),_vm._v(\" to unstage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tnew file:   readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"提交更新\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#提交更新\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 提交更新\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\" 命令将已暂存的文件进行提交.  \\b这种方式会启动文本编辑器以便输入本次提交的说明。(默认会启用 shell 的环境变量 \"),_c('code',[_vm._v(\"$EDITOR\")]),_vm._v(\" 所指定的软件，一般都是 vim 或 emacs。)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"也可以在 \"),_c('code',[_vm._v(\"commit\")]),_vm._v(\" 命令后添加 \"),_c('code',[_vm._v(\"-m\")]),_vm._v(\" 选项，将提交信息与命令放在同一行\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" commit -m \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"Story 182: Fix benchmarks for speed\\\"\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"master 463dc4f\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\" Story 182: Fix benchmarks \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"for\")]),_vm._v(\" speed\\n 2 files changed, 2 insertions\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"+\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n create mode 100644 README\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"提交后它会告诉你，当前是在哪个分支（\"),_c('code',[_vm._v(\"master\")]),_vm._v(\"）提交的，本次提交的完整 SHA-1 校验和是什么（\"),_c('code',[_vm._v(\"463dc4f\")]),_vm._v(\"），以及在本次提交中，有多少文件修订过，多少行添加和删改过。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"commit\")]),_vm._v(\" 命令加上 \"),_c('code',[_vm._v(\"-a\")]),_vm._v(\" 选项，Git 就会自动把所有\"),_c('strong',[_vm._v(\"已经跟踪过\")]),_vm._v(\"的文件暂存起来一并提交，从而跳过 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 步骤\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果此次提交暂存区没有任何\\b\\b变动, 想要提交需要加上\"),_c('code',[_vm._v(\"--allow-empty\")]),_vm._v(\"参数.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" commit --allow-empty -m \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"空的\\\"\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"master 76a5b84\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\" 空的\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"状态简览\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#状态简览\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 状态简览\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"git status\")]),_vm._v(\" 命令的输出十分详细，但其用语有些繁琐。 如果你使用 \"),_c('code',[_vm._v(\"git status -s\")]),_vm._v(\" 命令或 \"),_c('code',[_vm._v(\"git status --short\")]),_vm._v(\" 命令，你将得到一种更为紧凑的格式输出。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" status -s\\n M README\\nMM Rakefile\\nA  lib/git.rb\\nM  lib/simplegit.rb\\n?? LICENSE.txt\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"新添加的未跟踪文件前面有 \"),_c('code',[_vm._v(\"??\")]),_vm._v(\" 标记，\")]),_c('li',[_vm._v(\"新添加到暂存区中的文件前面有 \"),_c('code',[_vm._v(\"A\")]),_vm._v(\" 标记，\")]),_c('li',[_vm._v(\"修改过的文件前面有 \"),_c('code',[_vm._v(\"M\")]),_vm._v(\" 标记\\n\"),_c('ul',[_c('li',[_vm._v(\"出现在右边的 \"),_c('code',[_vm._v(\"M\")]),_vm._v(\" 表示该文件被修改了但是还没放入暂存区\")]),_c('li',[_vm._v(\"出现在靠左边的 \"),_c('code',[_vm._v(\"M\")]),_vm._v(\" 表示该文件被修改了并放入了暂存区。\")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"向 \"),_c('code',[_vm._v(\"Rakefile\")]),_vm._v(\" 文件前面有两个 \"),_c('code',[_vm._v(\"MM\")]),_vm._v(\", 表示在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"移除文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#移除文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 移除文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果想\"),_c('strong',[_vm._v(\"移除某个文件的已跟踪状态\")]),_vm._v(\"（确切地说，是从暂存区域移除）.  可以使用 \"),_c('code',[_vm._v(\"git rm\")]),_vm._v(\" 命令.  此命令还会连带从工作目录中把指定的文件删除\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果只是简单地从工作目录中手工删除文件，运行 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果\"),_c('strong',[_vm._v(\"文件删除之前修改过并且已经放到暂存区域\")]),_vm._v(\"的话，则必须要用强制删除选项 \"),_c('code',[_vm._v(\"-f\")]),_vm._v(\". 这是一种安全特性，用于防止误删还没有添加到快照的数据.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"另外一种情况是，我们想\"),_c('strong',[_vm._v(\"把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中\")]),_vm._v(\"。使用 \"),_c('code',[_vm._v(\"git rm --cached\")]),_vm._v(\" 选项可以做到.  它会让文件从暂存区 (index) 中移除, 并且不会出现在 \\\"未跟踪\\\" 列表下.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"忽略文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#忽略文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 忽略文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。我们可以创建一个名为 \"),_c('code',[_vm._v(\".gitignore\")]),_vm._v(\" 的文件，列出要忽略的文件模式。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"*.\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"oa\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n*~\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"要养成一开始就设置好 \"),_c('code',[_vm._v(\".gitignore\")]),_vm._v(\" 文件的习惯，以免将来误提交无用的文件.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\".gitignore\")]),_vm._v(\" 的格式规范如下：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"所有空行或者以 \"),_c('code',[_vm._v(\"＃\")]),_vm._v(\" 开头的行都会被 Git 忽略。\")]),_c('li',[_vm._v(\"可以使用标准的 \"),_c('code',[_vm._v(\"glob\")]),_vm._v(\" 模式匹配。\")]),_c('li',[_vm._v(\"匹配模式可以以（\"),_c('code',[_vm._v(\"/\")]),_vm._v(\"）开头防止递归。\")]),_c('li',[_vm._v(\"匹配模式可以以（\"),_c('code',[_vm._v(\"/\")]),_vm._v(\"）结尾指定目录。\")]),_c('li',[_vm._v(\"要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（\"),_c('code',[_vm._v(\"!\")]),_vm._v(\"）取反。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"glob\")]),_vm._v(\" 模式是指 shell 所使用的简化了的正则表达式:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"星号（\"),_c('code',[_vm._v(\"*\")]),_vm._v(\"）匹配零个或多个任意字符;\")]),_c('li',[_c('code',[_vm._v(\"[abc]\")]),_vm._v(\" 匹配任何一个列在方括号中的字符;\")]),_c('li',[_vm._v(\"问号（\"),_c('code',[_vm._v(\"?\")]),_vm._v(\"）只匹配一个任意字符;\")]),_c('li',[_vm._v(\"如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 \"),_c('code',[_vm._v(\"[0-9]\")]),_vm._v(\" 表示匹配所有 0 到 9 的数字）;\")]),_c('li',[_vm._v(\"使用两个星号（\"),_c('code',[_vm._v(\"*\")]),_vm._v(\") 表示匹配任意中间目录，比如\"),_c('code',[_vm._v(\"a/**/z\")]),_vm._v(\" 可以匹配 a/z, a/b/z 或 \"),_c('code',[_vm._v(\"a/b/c/z\")]),_vm._v(\"等。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# no .a files\")]),_vm._v(\"\\n*.a\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# but do track lib.a, even though you're ignoring .a files above\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"!\")]),_vm._v(\"lib.a\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# only ignore the TODO file in the current directory, not subdir/TODO\")]),_vm._v(\"\\n/TODO\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# ignore all files in the build/ directory\")]),_vm._v(\"\\nbuild/\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# ignore doc/notes.txt, but not doc/server/arch.txt\")]),_vm._v(\"\\ndoc/*.txt\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# ignore all .pdf files in the doc/ directory\")]),_vm._v(\"\\ndoc/**/*.pdf\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"校验和\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#校验和\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 校验和\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"24b9da6552252987aa493b52f8696cd6d3b00373\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"文件状态-工作区域\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#文件状态-工作区域\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 文件状态 & 工作区域\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在 Git 中文件有两种状态：\"),_c('strong',[_vm._v(\"已跟踪（tracked）\")]),_vm._v(\" 和 \"),_c('strong',[_vm._v(\"未跟踪（untracked）\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"已跟踪（tracked）\")]),_vm._v(\" 又分为：\"),_c('strong',[_vm._v(\"已提交（committed）\")]),_vm._v(\"、**已修改（modified）**和 \"),_c('strong',[_vm._v(\"已暂存（staged）\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"被 Git 管理的项目有三个工作区域：\"),_c('strong',[_vm._v(\"版本库（Repository）\")]),_vm._v(\"、\"),_c('strong',[_vm._v(\"工作区（Working Directory）\")]),_vm._v(\" 和 \"),_c('strong',[_vm._v(\"暂存区（Staging Area）\")]),_vm._v(\"。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"工作区: 就是你在电脑里能看到的目录。\")]),_c('li',[_vm._v(\"暂存区：英文叫 stage, 或 index。一般存放在\"),_c('code',[_vm._v(\".git\")]),_vm._v(\"目录下的 \"),_c('code',[_vm._v(\"index\")]),_vm._v(\" 文件（\"),_c('code',[_vm._v(\".git/index\")]),_vm._v(\"）中，所以我们把暂存区有时也叫作索引（index）。\")]),_c('li',[_vm._v(\"版本库：\"),_c('code',[_vm._v(\".git\")]),_vm._v(\" 目录不算工作区，而是 Git 的版本库。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.imgur.com/qmzpPGu.jpg\",\"alt\":\"1352126739_7909\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"当对工作区修改（或新增）的文件执行 \\\"\"),_c('code',[_vm._v(\"git add\")]),_vm._v(\"\\\" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"当执行提交操作（\"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\"）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"重置-撤销-提交\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#重置-撤销-提交\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 重置(撤销)提交\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git reset\")]),_vm._v(\" 指令可以将当前分支所指向的提交对象重置到另外一个提交对象上去.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" reset HEAD^\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"每一個 \"),_c('code',[_vm._v(\"^\")]),_vm._v(\" 符號表示「前一次」的意思.  所以 \"),_c('code',[_vm._v(\"HEAD^\")]),_vm._v(\" 是指在 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 這個 Commit 的「前一次」，如果是 \"),_c('code',[_vm._v(\"HEAD^^\")]),_vm._v(\"則是往前兩次，以此類推。不過如果要倒退五次，通常不會寫 \"),_c('code',[_vm._v(\"HEAD^^^^^\")]),_vm._v(\"，而會寫成 \"),_c('code',[_vm._v(\"HEAD~5\")]),_vm._v(\"。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"假如 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 指向 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支的 \"),_c('code',[_vm._v(\"e12d8ef\")]),_vm._v(\" 提交对象.  那么\\b还可以写成:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" reset master^\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" reset e12d8ef^\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_c('code',[_vm._v(\"reset\")]),_vm._v(\" 指令改变一个分支所指向的提交对象 (分支只是指向提交对象的指针) , 同时 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" \\b也随之移动\")]),_vm._v(\".\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6bd8c8d4331.png\",\"alt\":\"182229495415187\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"这个指令有三个常用参数: \"),_c('code',[_vm._v(\"--soft\")]),_vm._v(\", \"),_c('code',[_vm._v(\"--hard\")]),_vm._v(\", \"),_c('code',[_vm._v(\"--mixed\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('p',[_c('code',[_vm._v(\"--mixed\")]),_vm._v(\" 是 \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\" 指令的默认参数. 它将重置 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 到另外一个提交, 并且重置暂存区以便和 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 相匹配，但是也到此为止。工作区的文件不会被更改。所有该分支上从重置前的提交到你重置到的那个提交之间的所有变更将作为本地修改保存在工作区中 (被标示为 \"),_c('code',[_vm._v(\"local modification or untracked via git status\")]),_vm._v(\") 但是并未 \"),_c('code',[_vm._v(\"staged\")]),_vm._v(\" 的状态\")])]),_c('li',[_c('p',[_c('code',[_vm._v(\"--soft\")]),_vm._v(\" 参数告诉 Git 重置 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 到另外一个提交，但也到此为止。暂存区和工作区都不会变化.  所有该分支上从重置前的提交到你重置到的那个提交之间的所有变更都被放在暂存区.\")])]),_c('li',[_c('p',[_c('code',[_vm._v(\"--hard\")]),_vm._v(\" 参数是一个比较危险的动作，具有破坏性.  暂存区和工作区都会重置到目标提交所处的状态.  所有该分支上从重置前的提交到你重置到的那个提交之间的所有变更都被丢掉.\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"假如我们在目录中添加了一个文件叫 \"),_c('code',[_vm._v(\"myFile.md\")]),_vm._v(\", 并且进行了提交.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"bogon:git_practice xiangliu$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" log --oneline\\n0935e0d \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"HEAD -\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" master\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" add my \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"file\")]),_vm._v(\"\\n2e0425c first commit\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git reset HEAD^\")]),_vm._v(\" 后, 执行 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 看到 \"),_c('code',[_vm._v(\"myFile.md\")]),_vm._v(\" 为未跟踪状态, 但文件仍在工作区中.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\nUntracked files:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add <file>...\\\"\")]),_vm._v(\" to include \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"in\")]),_vm._v(\" what will be committed\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tmyFile.md\\n\\nnothing added to commit but untracked files present \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add\\\"\")]),_vm._v(\" to track\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git reset HEAD^ --soft\")]),_vm._v(\" 后, 执行 \"),_c('code',[_vm._v(\"git status\")]),_vm._v(\" 看到 \"),_c('code',[_vm._v(\"myFile.md\")]),_vm._v(\" 在暂存区, 等待提交.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"On branch master\\nChanges to be committed:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git reset HEAD <file>...\\\"\")]),_vm._v(\" to unstage\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\\tnew file:   myFile.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git reset HEAD^ --hard\")]),_vm._v(\" 后, \"),_c('code',[_vm._v(\"myFile.md\")]),_vm._v(\" 直接没了.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"因为使用了 \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\" 后, 重置到的提交对象之后的提交仍然存在.  通过 \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\" 再重置回你要的提交就可以再返回去.  如果你找不到你想要的提交对象的校验和是什么了, 可以通过 \"),_c('code',[_vm._v(\"git reflog\")]),_vm._v(\" 命令.  它可以查看所有分支的所有操作记录，包括已经被删除的提交记录\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"查看提交历史\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#查看提交历史\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 查看提交历史\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"\\b想回顾提交历史需要使用 \"),_c('code',[_vm._v(\"git log\")]),_vm._v(\" 命令\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"garrikliu:a xiangliu$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" log\\ncommit fb3afcd7ad8151207cec0ace9a6550c3e1589f81 \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"HEAD\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\nAuthor: Garrik-Liu \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_vm._v(\"garrikliu@Gmail.com\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"\\nDate:   Mon Feb 4 16:55:48 2019 +0800\\n\\n    deleted readme\\n\\ncommit 022abc8b56edac279d3aa28981913e378bca136b\\nAuthor: Garrik-Liu \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_vm._v(\"garrikliu@Gmail.com\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"\\nDate:   Sun Feb 3 09:56:44 2019 +0800\\n\\n    add readme.md\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"默认不用任何参数的话，\"),_c('code',[_vm._v(\"git log\")]),_vm._v(\" 会按提交时间列出所有的更新，最近的更新排在最上面。这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"一个常用的选项是 \"),_c('code',[_vm._v(\"-p\")]),_vm._v(\"，用来显示每次提交的内容差异。 你也可以加上 \"),_c('code',[_vm._v(\"-2\")]),_vm._v(\" 来仅显示最近两次提交(同理 \"),_c('code',[_vm._v(\"-3\")]),_vm._v(\" 就是最近的三次提交)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果你想看到每次提交的简略的统计信息，你可以使用 \"),_c('code',[_vm._v(\"--stat\")]),_vm._v(\" 选项.  \"),_c('code',[_vm._v(\"--stat\")]),_vm._v(\" 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"commit a11bef06a3f659402fe7563abf99ad00de2209e6\\nAuthor: Scott Chacon \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_vm._v(\"schacon@gee-mail.com\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"\\nDate:   Sat Mar 15 10:31:28 2008 -0700\\n\\n    first commit\\n\\n README           \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\"  6 ++++++\\n Rakefile         \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\" 23 +++++++++++++++++++++++\\n lib/simplegit.rb \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\" 25 +++++++++++++++++++++++++\\n 3 files changed, 54 insertions\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"+\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" log --pretty\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\"oneline\\nca82a6dff817ec66f44342007202690a93763949 changed the version number\\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"test\")]),_vm._v(\"\\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"打标签\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#打标签\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 打标签\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"列出标签\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#列出标签\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 列出标签\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"git tag\")]),_vm._v(\" 列出已有标签\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" tag\\nv0.1\\nv1.3\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"-l\")]),_vm._v(\" 参数可以查号特定标签\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" tag -l \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'v1.8.5*'\")]),_vm._v(\"\\nv1.8.5\\nv1.8.5-rc0\\nv1.8.5-rc1\\nv1.8.5-rc2\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"创建标签\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#创建标签\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 创建标签\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"Git 使用两种主要类型的标签：\"),_c('strong',[_vm._v(\"轻量标签\")]),_vm._v(\"（lightweight）与\"),_c('strong',[_vm._v(\"附注标签\")]),_vm._v(\"（annotated）\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"创建\"),_c('strong',[_vm._v(\"轻量标签\")]),_vm._v(\"只需要提供标签名字:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" tag v1.4-lw\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" tag\\nv0.1\\nv1.3\\nv1.4\\nv1.4-lw\\nv1.5\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在标签上运行 \"),_c('code',[_vm._v(\"git show\")]),_vm._v(\"，你不会看到额外的标签信息。 命令只会显示出提交信息：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" show v1.4-lw\\ncommit ca82a6dff817ec66f44342007202690a93763949\\nAuthor: Scott Chacon \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_vm._v(\"schacon@gee-mail.com\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"\\nDate:   Mon Mar 17 21:52:11 2008 -0700\\n\\n    changed the version number\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"创建一个\"),_c('strong',[_vm._v(\"附注标签\")]),_vm._v(\", 最简单的方式是当你在运行 \"),_c('code',[_vm._v(\"tag\")]),_vm._v(\" 命令时指定 \"),_c('code',[_vm._v(\"-a\")]),_vm._v(\" 选项：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" tag -a v1.4 -m \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'my version 1.4'\")]),_vm._v(\"\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" tag\\nv0.1\\nv1.3\\nv1.4\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"-m\")]),_vm._v(\" 选项指定了一条将会存储在标签中的信息。 如果没有为附注标签指定一条信息，Git 会运行编辑器要求你输入信息。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git show\")]),_vm._v(\" 命令可以看到标签信息与对应的提交信息：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" show v1.4\\ntag v1.4\\nTagger: Ben Straub \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_vm._v(\"ben@straub.cc\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"\\nDate:   Sat May 3 20:19:12 2014 -0700\\n\\nmy version 1.4\\n\\ncommit ca82a6dff817ec66f44342007202690a93763949\\nAuthor: Scott Chacon \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_vm._v(\"schacon@gee-mail.com\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"\\nDate:   Mon Mar 17 21:52:11 2008 -0700\\n\\n    changed the version number\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果要给\"),_c('strong',[_vm._v(\"过去的提交\")]),_vm._v(\"打标签, 需要在命令的末尾指定提交的校验和\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" tag -a v1.2 9fceb02\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"删除标签\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#删除标签\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 删除标签\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"命令 \"),_c('code',[_vm._v(\"git tag -d <tagname>\")]),_vm._v(\" 可以删除指定标签:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" tag -d v1.4-lw\\nDeleted tag \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'v1.4-lw'\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"was e7d5add\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"使用分支\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#使用分支\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 使用分支\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"分支简介\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#分支简介\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 分支简介\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"再强调, \"),_c('strong',[_vm._v(\"Git 保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照\")]),_vm._v(\". 在进行提交操作时，Git 会保存一个提交对象（commit object）, 该提交对象会包含一个指向暂存内容快照的指针, 还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ol',[_c('li',[_vm._v(\"暂存操作会为\"),_c('strong',[_vm._v(\"每一个文件计算 \\\"校验和\\\"\")]),_vm._v(\"，然后会把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交.\")]),_c('li',[_vm._v(\"当使用 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\" 进行提交操作时，Git 会先计算\"),_c('strong',[_vm._v(\"每一个子目录（本例中只有项目根目录）的校验和\")]),_vm._v(\"，然后在 Git 仓库中这些校验和保存为 \\\"树对象\\\"。\")]),_c('li',[_vm._v(\"随后，Git 便会\"),_c('strong',[_vm._v(\"创建一个提交对象\")]),_vm._v(\"，它除了包含上面提到的那些信息外，还包含指向那个树对象（项目根目录）的指针。如此一来，Git 就可以在需要的时候重现此次保存的快照。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b70bd48685.png\",\"alt\":\"commit-and-tree\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"Git 的分支，其实本质上仅仅是指向提交对象的可变指针。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b70d3a8a9e.png\",\"alt\":\"branch-and-history\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"head\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#head\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" HEAD\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-dash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-text\"}},[_c('code',[_vm._v(\"$ cat .git/HEAD\\nref: refs/heads/master\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"新建分支\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#新建分支\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 新建分支\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"分支创建\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#分支创建\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 分支创建\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git branch\")]),_vm._v(\" 命令创建新分支, 会在当前所在的提交对象上创建一个指针.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" branch testing\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b70e4e0668.png\",\"alt\":\"head-to-master\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git log\")]),_vm._v(\" 命令的 \"),_c('code',[_vm._v(\"--decorate\")]),_vm._v(\" 参数, 可以查看各个分支当前所指的对象。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" log --oneline --decorate\\nf30ab \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"HEAD, master, testing\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" add feature \"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"#32 - ability to add new\")]),_vm._v(\"\\n34ac2 fixed bug \"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"#1328 - stack overflow under certain conditions\")]),_vm._v(\"\\n98ca9 initial commit of my project\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"分支切换\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#分支切换\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 分支切换\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"要切换到一个已存在的分支，你需要使用 \"),_c('code',[_vm._v(\"git checkout\")]),_vm._v(\" 命令。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" checkout testing\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果想新建一个分支, 同时切换到这个分支上可以使用 \\b\"),_c('code',[_vm._v(\"git checkout\")]),_vm._v(\" 的 \"),_c('code',[_vm._v(\"-b\")]),_vm._v(\" 参数.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" checkout -b testing\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b70fa72e92.png\",\"alt\":\"checkout-master\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b71064e0f2.png\",\"alt\":\"advance-master\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git log\")]),_vm._v(\" 命令查看分叉历史。 运行 \"),_c('code',[_vm._v(\"git log --oneline --decorate --graph --all\")]),_vm._v(\" ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" log --oneline --decorate --graph --all\\n* c2b9e \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"HEAD, master\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" made other changes\\n\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\" * 87ab2 \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"testing\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" made a change\\n\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\"/\\n* f30ab add feature \"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"#32 - ability to add new formats to the\")]),_vm._v(\"\\n* 34ac2 fixed bug \"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"#1328 - stack overflow under certain conditions\")]),_vm._v(\"\\n* 98ca9 initial commit of my project\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"合并分支\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#合并分支\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 合并分支\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git merge\")]),_vm._v(\" 命令可以合并分支.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" checkout master\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" merge hotfix\\nUpdating f42c576\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"..\")]),_vm._v(\"3a0874c\\nFast-forward\\n index.html \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\" 2 ++\\n 1 \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"file\")]),_vm._v(\" changed, 2 insertions\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"+\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b711339866.png\",\"alt\":\"basic-branching-4\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"换句话说，当你试图合并两个分支时，\"),_c('strong',[_vm._v(\"如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”\")]),_vm._v(\"。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在合并完之后, 你可以用 \"),_c('code',[_vm._v(\"git branch -d\")]),_vm._v(\" 来删除掉分支.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b711f2541b.png\",\"alt\":\"basic-merging-1\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b71269b25b.png\",\"alt\":\"basic-merging-2\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" status\\nOn branch master\\nYou have unmerged paths.\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"fix conflicts and run \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git commit\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\nUnmerged paths:\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add <file>...\\\"\")]),_vm._v(\" to mark resolution\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n    both modified:      index.html\\n\\nno changes added to commit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"use \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git add\\\"\")]),_vm._v(\" and/or \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"git commit -a\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在你解决了所有文件里的冲突之后，对每个文件使用 \"),_c('code',[_vm._v(\"git add\")]),_vm._v(\" 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。之后输入 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\" 来完成合并提交\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"分支管理\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#分支管理\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 分支管理\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"查看分支列表\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#查看分支列表\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 查看分支列表\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"git branch\")]),_vm._v(\" 命令如果不加任何参数运行它，会得到当前所有分支的一个列表\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" branch\\n  iss53\\n* master\\n  testing\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"*\")]),_vm._v(\" 表示当前 HEAD 指针所指向的分支.  这意味着如果在这时候提交，master 分支将会随着新的工作向前移动。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"查看分支最后提交\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#查看分支最后提交\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 查看分支最后提交\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果需要查看每一个分支的最后一次提交，可以运行 \"),_c('code',[_vm._v(\"git branch -v\")]),_vm._v(\" 命令：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" branch -v\\n  iss53   93b412c fix javascript issue\\n* master  7a98805 Merge branch \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'iss53'\")]),_vm._v(\"\\n  testing 782fd34 add scott to the author list \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"in\")]),_vm._v(\" the readmes\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"查看-已合并-未合并-分支\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#查看-已合并-未合并-分支\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 查看 已合并/未合并 分支\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"--merged\")]),_vm._v(\" 与 \"),_c('code',[_vm._v(\"--no-merged\")]),_vm._v(\" 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。 在这个列表中分支名字前没有 \"),_c('code',[_vm._v(\"*\")]),_vm._v(\" 号的分支通常可以使用 \"),_c('code',[_vm._v(\"git branch -d\")]),_vm._v(\" 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" branch --merged\\n  iss53\\n* master\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"变基\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#变基\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 变基\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"之前介绍过，整合分支最容易的方法是 \"),_c('code',[_vm._v(\"merge\")]),_vm._v(\" 命令。 它会把两个分支的最新快照, 以及二者最近的共同祖先进行三方合并，合并的结果是生成一个新的快照, 并提交。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"另一种方法是, 你可以使用 \"),_c('code',[_vm._v(\"rebase\")]),_vm._v(\" 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b71337c5c3.png\",\"alt\":\"basic-rebase-3\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" checkout experiment\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" rebase master\\nFirst, rewinding \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"head\")]),_vm._v(\" to replay your work on \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"top\")]),_vm._v(\" of it\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"..\")]),_vm._v(\".\\nApplying: added staged \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"command\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"截取分支上的另一个分支，再变基到其他分支\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#截取分支上的另一个分支，再变基到其他分支\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 截取分支上的另一个分支，再变基到其他分支\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b713f4bb09.png\",\"alt\":\"interesting-rebase-2\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"上图中, 假设你希望将 client 中的修改合并到主分支并发布，但暂时并不想合并 server 中的修改，因为它们还需要经过更全面的测试。 这时，你就可以使用 \"),_c('code',[_vm._v(\"git rebase\")]),_vm._v(\" 命令的 \"),_c('code',[_vm._v(\"--onto\")]),_vm._v(\" 选项，选中在 client 分支里但不在 server 分支里的修改（即 C8 和 C9），将它们在 master 分支上重放\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" rebase --onto master server client\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"之后你可以快进合并 master 分支了.  如果你决定将 server 分支中的修改也整合进来。 使用 \"),_c('code',[_vm._v(\"git rebase [basebranch] [topicbranch]\")]),_vm._v(\" 命令可以直接将特性分支（即本例中的 server）变基到目标分支（即 master）上。这样做能省去你先切换到 server 分支，再对其执行变基命令的多个步骤。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"变基的风险\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#变基的风险\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 变基的风险\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"不要对在你的仓库外有副本的分支执行变基。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 \"),_c('code',[_vm._v(\"git rebase\")]),_vm._v(\" 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b71535bd24.png\",\"alt\":\"perils-of-rebasing-1\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b717f7240b.png\",\"alt\":\"perils-of-rebasing-2\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"接下来，这个人又决定把合并操作回滚，改用变基；继而又用 \"),_c('code',[_vm._v(\"git push --force\")]),_vm._v(\" 命令覆盖了服务器上的提交历史。 之后你从服务器抓取更新，会发现多出来一些新的提交。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b716430fce.png\",\"alt\":\"perils-of-rebasing-3\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"结果就是你们两人的处境都十分尴尬。 如果你执行 \"),_c('code',[_vm._v(\"git pull\")]),_vm._v(\" 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b716dc19c5.png\",\"alt\":\"perils-of-rebasing-4\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"此时如果你执行 \"),_c('code',[_vm._v(\"git log\")]),_vm._v(\" 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。 此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。 很明显对方并不想在提交历史中看到 C4 和 C6，因为之前就是他把这两个提交通过变基丢弃的。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"用变基解决变基\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#用变基解决变基\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 用变基解决变基\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果遇到前面提到的 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 那种情境，如果我们不是执行合并，而是执行 \"),_c('code',[_vm._v(\"git rebase teamone/master\")]),_vm._v(\", Git 将会：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('p',[_vm._v(\"检查哪些提交是我们的分支上独有的（C2，C3，C4，C6，C7）\")])]),_c('li',[_c('p',[_vm._v(\"检查其中哪些提交不是合并操作的结果（C2，C3，C4）\")])]),_c('li',[_c('p',[_vm._v(\"检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 C2 和 C3，因为 C4 其实就是 C4'）\")])]),_c('li',[_c('p',[_vm._v(\"把查到的这些提交应用在 teamone/master 上面\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/19/5c6b7190693fe.png\",\"alt\":\"perils-of-rebasing-5\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"本例中使用 \"),_c('code',[_vm._v(\"git pull --rebase\")]),_vm._v(\" 命令可以完成上述操作. 它的意思是先 \"),_c('code',[_vm._v(\"git fetch\")]),_vm._v(\"，再 \"),_c('code',[_vm._v(\"git rebase teamone/master\")]),_vm._v(\"。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"最好做法是把变基命令当作是在推送前清理提交使之整洁的工具，并且\"),_c('strong',[_vm._v(\"只在从未推送至共用仓库的提交上执行变基命令\")]),_vm._v(\"，就不会有事。 假如在那些已经被推送至共用仓库的提交上执行变基命令，并因此丢弃了一些别人的开发所基于的提交，那你就有大麻烦了\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"变基-vs-合并\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#变基-vs-合并\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 变基 vs 合并\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"有一种观点认为，仓库的提交历史即是 \"),_c('strong',[_vm._v(\"记录实际发生过什么\")]),_vm._v(\"。 它是针对历史的文档，本身就有价值，不能乱改。 哪怕提交历史是一团糟, 那么这些痕迹也应该被保留下来，让后人能够查阅。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"另一种观点则正好相反，他们认为提交历史是 \"),_c('strong',[_vm._v(\"项目过程中发生的事\")]),_vm._v(\"。无意义的修改, 和被舍弃的内容不需要被后来人看到.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史\")]),_vm._v(\"，\"),_c('strong',[_vm._v(\"从不对已推送至别处的提交执行变基操作\")]),_vm._v(\"，这样，你才能享受到两种方式带来的便利。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"远程仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#远程仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"查看远程仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#查看远程仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 查看远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果想查看你已经配置的远程仓库服务器，可以运行 \"),_c('code',[_vm._v(\"git remote\")]),_vm._v(\" 命令。 它会列出你指定的每一个远程服务器的简写。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果你已经克隆了自己的仓库，那么至少应该能看到 \"),_c('code',[_vm._v(\"origin\")]),_vm._v(\". 这是 Git 给你克隆的仓库服务器的默认名字\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" clone https://github.com/schacon/ticgit\\nCloning into \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'ticgit'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"..\")]),_vm._v(\".\\nremote: Reusing existing pack: 1857, done.\\nremote: Total 1857 \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"delta 0\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\", reused 0 \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"delta 0\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\nReceiving objects: 100% \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"1857/1857\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\", 374.35 KiB \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"|\")]),_vm._v(\" 268.00 KiB/s, done.\\nResolving deltas: 100% \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"772/772\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\", done.\\nChecking connectivity\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"..\")]),_vm._v(\". done.\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cd\")]),_vm._v(\" ticgit\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote\\norigin\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"指定选项 \"),_c('code',[_vm._v(\"-v\")]),_vm._v(\"，会显示需要读写远程仓库使用的 Git 保存的仓库服务器的名字, 以及其对应的 URL。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote -v\\norigin\\thttps://github.com/schacon/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"fetch\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\norigin\\thttps://github.com/schacon/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"push\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"添加远程仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#添加远程仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 添加远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"添加远程库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#添加远程库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 添加远程库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"运行 \"),_c('code',[_vm._v(\"git remote add <shortname> <url>\")]),_vm._v(\" 添加一个新的远程 Git 仓库, 同时可以为仓库指定一个名字.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote\\norigin\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote add pb https://github.com/paulboone/ticgit\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote -v\\norigin\\thttps://github.com/schacon/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"fetch\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\norigin\\thttps://github.com/schacon/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"push\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\npb\\thttps://github.com/paulboone/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"fetch\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\npb\\thttps://github.com/paulboone/ticgit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"push\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"从现有仓库克隆\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#从现有仓库克隆\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 从现有仓库克隆\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"克隆仓库的命令格式为 \"),_c('code',[_vm._v(\"git clone [url]\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" clone git://github.com/schacon/grit.git\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"clone\")]),_vm._v(\" 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为名称简写。如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"抓取-pull-拉取-fetch\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#抓取-pull-拉取-fetch\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 抓取(pull) & 拉取(fetch)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"拉取-fetch\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#拉取-fetch\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 拉取(fetch)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"从远程仓库中获得数据，可以执行 \"),_c('code',[_vm._v(\"git fetch [remote-name]\")]),_vm._v(\".  这个命令会访问远程仓库，从中\"),_c('strong',[_vm._v(\"拉取\")]),_vm._v(\"所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"必须注意 \"),_c('code',[_vm._v(\"git fetch\")]),_vm._v(\" 命令会将数据\"),_c('strong',[_vm._v(\"拉取\")]),_vm._v(\"到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"抓取-pull\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#抓取-pull\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 抓取(pull)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('blockquote',[_c('p',[_vm._v(\"git pull = git fetch + git merge\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"推送到远程仓库\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#推送到远程仓库\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 推送到远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用命令 \"),_c('code',[_vm._v(\"git push [remote-name] [branch-name]\")]),_vm._v(\" 将你本地的内容推送到远端服务器.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"把 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 這個分支的內容，推向 \"),_c('code',[_vm._v(\"origin\")]),_vm._v(\" 這個位置。\")]),_c('li',[_vm._v(\"在 \"),_c('code',[_vm._v(\"origin\")]),_vm._v(\" 那個遠端 Server 上，如果 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 不存在，就建立一個叫做 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 的同名分支。\")]),_c('li',[_vm._v(\"但如果本來 Server 上就存在 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支，便會移動 Server 上 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支的位置，使它指到目前最新的進度上。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"设定-upstream-上游\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#设定-upstream-上游\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 设定 upstream (上游)\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果有設定，當下次執行 \"),_c('code',[_vm._v(\"git push\")]),_vm._v(\" 指令的時候，它就會用來當預設值。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" push -u origin master\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"就會把 \"),_c('code',[_vm._v(\"origin/master\")]),_vm._v(\" 設定為本地 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支的 upstream，當下回執行 \"),_c('code',[_vm._v(\"git push\")]),_vm._v(\" 指令而不加任何參數的時候，它就會猜你是要推往 \"),_c('code',[_vm._v(\"origin\")]),_vm._v(\" 這個遠端節點，並且把 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 這個分支推上去。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"不想要同名的分支\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#不想要同名的分支\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 不想要同名的分支\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" push origin master\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" push origin master:master\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" push origin master:cat\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"查看远程仓库-2\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#查看远程仓库-2\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 查看远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果想要查看某一个远程仓库的更多信息，可以使用 \"),_c('code',[_vm._v(\"git remote show [remote-name]\")]),_vm._v(\" 命令\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote show origin\\n* remote origin\\n  Fetch URL: https://github.com/schacon/ticgit\\n  Push  URL: https://github.com/schacon/ticgit\\n  HEAD branch: master\\n  Remote branches:\\n    master                               tracked\\n    dev-branch                           tracked\\n  Local branch configured \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"for\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'git pull'\")]),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\":\")]),_vm._v(\"\\n    master merges with remote master\\n  Local ref configured \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"for\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'git push'\")]),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\":\")]),_vm._v(\"\\n    master pushes to master \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"up to date\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"它同样会列出远程仓库的 URL 与跟踪分支的信息。 这些信息非常有用，它告诉你正处于 master 分支，并且如果运行 \"),_c('code',[_vm._v(\"git pull\")]),_vm._v(\"，就会抓取所有的远程引用，然后将远程 master 分支合并到本地 master 分支。 它也会列出拉取到的所有远程引用。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"远程仓库的移除与重命名\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#远程仓库的移除与重命名\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 远程仓库的移除与重命名\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"运行 \"),_c('code',[_vm._v(\"git remote rename\")]),_vm._v(\" 去修改一个远程仓库的简写名\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"rename\")]),_vm._v(\" pb paul\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote\\norigin\\npaul\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"git remote rm\")]),_vm._v(\" 移除一个远程仓库\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"rm\")]),_vm._v(\" paul\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" remote\\norigin\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"修改历史记录\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#修改历史记录\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 修改历史记录\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"修改提交信息\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#修改提交信息\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 修改提交信息\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"修改最近一次提交\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#修改最近一次提交\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 修改最近一次提交\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"要修改最後一次的 Commit 訊息，只要直接在 Commit 指令後面加上 \"),_c('code',[_vm._v(\"--amend\")]),_vm._v(\" 參數即可：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" commit --amend -m \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"Welcome To Facebook\\\"\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"master 614a90c\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\" Welcome To Facebook\\nDate: Wed Aug 16 05:42:56 2017 +0800\\n1 \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"file\")]),_vm._v(\" changed, 0 insertions\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"+\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\", 0 deletions\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"-\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\ncreate mode 100644 config/database.yml\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"修改更早的提交\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#修改更早的提交\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 修改更早的提交\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"可以使用 \"),_c('code',[_vm._v(\"rebase\")]),_vm._v(\" 命令的互动模式来修改更早的提交信息.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" log --oneline\\n27f6ed6 \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"HEAD -\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" master\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" add dog 2\\n2bab3e7 add dog 1\\nca40fc9 add 2 cats\\n1de2076 add \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cat\")]),_vm._v(\" 2\\ncd82f29 add \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cat\")]),_vm._v(\" 1\\n382a2a5 add database settings\\nbb0c9c2 init commit\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"rebase\")]),_vm._v(\" 指令的 \"),_c('code',[_vm._v(\"-i\")]),_vm._v(\" 參數进入 『 互动模式 』, 後面的 \"),_c('code',[_vm._v(\"bb0c9c2\")]),_vm._v(\" 是指這次的指令的應用範圍會從最近的提交到 \"),_c('code',[_vm._v(\"bb0c9c2\")]),_vm._v(\" 這個提交, 但是不包括 \"),_c('code',[_vm._v(\"bb0c9c2\")]),_vm._v(\".\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" rebase -i bb0c9c2\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"warning custom-block\"},[_c('p',{staticClass:\"custom-block-title\"},[_vm._v(\"WARNING\")]),_c('p',[_vm._v(\"注意, \"),_c('code',[_vm._v(\"rebase\")]),_vm._v(\" 的互动模式展示的提交记录排序是 『 从最旧到最新 』, 与 \"),_c('code',[_vm._v(\"git log\")]),_vm._v(\" 的正好相反.\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"pick 382a2a5 add database settings\\npick cd82f29 add \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cat\")]),_vm._v(\" 1\\npick 1de2076 add \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cat\")]),_vm._v(\" 2\\npick ca40fc9 add 2 cats\\npick 2bab3e7 add dog 1\\npick 27f6ed6 add dog 2\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# Rebase bb0c9c2..27f6ed6 onto bb0c9c2 (6 commands)\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"#\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# Commands:\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# p, pick = use commit\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# r, reword = use commit, but edit the commit message\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# e, edit = use commit, but stop for amending\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# s, squash = use commit, but meld into previous commit\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# f, fixup = like \\\"squash\\\", but discard this commit's log message\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# x, exec = run command (the rest of the line) using shell\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# d, drop = remove commit\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"#\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# These lines can be re-ordered; they are executed from top to bottom.\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"#\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# If you remove a line here THAT COMMIT WILL BE LOST.\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"#\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# However, if you remove everything, the rebase will be aborted.\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"#\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# Note that empty commits are commented out\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"将想要改信息的提交前面的 \"),_c('code',[_vm._v(\"pick\")]),_vm._v(\" 改成 \"),_c('code',[_vm._v(\"reword\")]),_vm._v(\"，或是 \"),_c('code',[_vm._v(\"r\")]),_vm._v(\", 就表示待會我要來修改這兩次提交的信息.  存檔並離開之後，立馬就會再跳另一個 Vim 編輯器畫面, 让我们改信息.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"合并多个提交\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#合并多个提交\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 合并多个提交\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"rebase\")]),_vm._v(\" 的互动模式同样也可以合并多个提交, 以来让提交历史更简洁.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"把想要合并的提交前的指令改成 \"),_c('code',[_vm._v(\"squash\")]),_vm._v(\" 或 \"),_c('code',[_vm._v(\"s\")]),_vm._v(\".  也可以用 \"),_c('code',[_vm._v(\"fixup\")]),_vm._v(\" 它与 \"),_c('code',[_vm._v(\"squash\")]),_vm._v(\" 相同，但不会保存当前 commit 的提交信息\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"pick 382a2a5 add database settings\\npick cd82f29 add \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cat\")]),_vm._v(\" 1\\nsquash 1de2076 add \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cat\")]),_vm._v(\" 2\\nsquash ca40fc9 add 2 cats\\npick 2bab3e7 add dog 1\\nsquash 27f6ed6 add dog 2\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"最後一行的 \"),_c('code',[_vm._v(\"27f6ed6\")]),_vm._v(\" 會跟前一個 Commit \"),_c('code',[_vm._v(\"2bab3e7\")]),_vm._v(\" 進行合併\")]),_c('li',[_vm._v(\"倒數第三號的 \"),_c('code',[_vm._v(\"ca40fc9\")]),_vm._v(\" 會跟前一個 Commit \"),_c('code',[_vm._v(\"1de2076\")]),_vm._v(\" 合併，但因為 \"),_c('code',[_vm._v(\"1de2076\")]),_vm._v(\" 又會再往前一個 Commit \"),_c('code',[_vm._v(\"cd82f29\")]),_vm._v(\" 合併\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/20/5c6cdf896c1d5.png\",\"alt\":\"squash1\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/20/5c6cdf94aac1e.png\",\"alt\":\"squash2\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"将一个提交拆成多个\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#将一个提交拆成多个\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 将一个提交拆成多个\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" log --oneline\\n27f6ed6 \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"HEAD -\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\" master\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" add dog 2\\n2bab3e7 add dog 1\\nca40fc9 add 2 cats\\n1de2076 add \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cat\")]),_vm._v(\" 2\\ncd82f29 add \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cat\")]),_vm._v(\" 1\\n382a2a5 add database settings\\nbb0c9c2 init commit\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"\\b假如 \"),_c('code',[_vm._v(\"ca40fc9\")]),_vm._v(\" 這個 Commit 一口氣增加了兩個檔案，我想把它拆成兩個提交. 我们需要进入互动模式, 把要拆的那個 Commit 的 \"),_c('code',[_vm._v(\"pick\")]),_vm._v(\" 改成 \"),_c('code',[_vm._v(\"edit\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"pick 382a2a5 add database settings\\npick cd82f29 add \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cat\")]),_vm._v(\" 1\\npick 1de2076 add \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"cat\")]),_vm._v(\" 2\\nedit ca40fc9 add 2 cats\\npick 2bab3e7 add dog 1\\npick 27f6ed6 add dog 2\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"Rebase 在執行到 \"),_c('code',[_vm._v(\"ca40fc9\")]),_vm._v(\" 這個 Commit 的時候就會停下來：\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/20/5c6ce0ef3d2bb.png\",\"alt\":\"split1\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 指向 \"),_c('code',[_vm._v(\"ca40fc9\")]),_vm._v(\", 我们通过 \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\" 指令到\\b这个提交的上一个提交.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" reset HEAD^\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"这两个提交之间的改动都处于 『 未暂存 』状态.  根据你自己的需要通过 \"),_c('code',[_vm._v(\"add\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"commit\")]),_vm._v(\" 来进行提交.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"等你弄完了, 別忘了現在還是處於 Rebase 狀態，通过 \"),_c('code',[_vm._v(\"--continue\")]),_vm._v(\" 参数来让 Rebase 执行完.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" rebase --continue\\nSuccessfully rebased and updated refs/heads/master.\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"reset、revert-跟-rebase-的区别\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#reset、revert-跟-rebase-的区别\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Reset、Revert 跟 Rebase 的区别?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"revert\")]),_vm._v(\" 指令同样可以用来后悔\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"假如想撤销掉最近的一次提交可以输入下面指令, 加上後面的 \"),_c('code',[_vm._v(\"--no-edit\")]),_vm._v(\" 參數，表示不編輯 Commit 訊息。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" revert HEAD --no-edit\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/20/5c6ce5acd37ff.png\",\"alt\":\"revert2\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如果想再恢复之前的提交, 一种方法是再用一次 \"),_c('code',[_vm._v(\"revert\")]),_vm._v(\" 那么就是等于执行了 『 撤销的撤销 』, 之前被撤销的提交就被恢复了\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"所以，這三個指令有什麼差別？\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#所以，這三個指令有什麼差別？\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 所以，這三個指令有什麼差別？\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"指令\")]),_c('th',[_vm._v(\"改變歷史紀錄\")]),_c('th',[_vm._v(\"說明\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"Reset\")]),_c('td',[_vm._v(\"是\")]),_c('td',[_vm._v(\"把目前的狀態設定成某個指定的 Commit 的狀態，通常適用於尚未推出去的 Commit。\")])]),_c('tr',[_c('td',[_vm._v(\"Rebase\")]),_c('td',[_vm._v(\"是\")]),_c('td',[_vm._v(\"不管是新增、修改、刪除 Commit 都相當方便，用來整理、編輯還沒有推出去的 Commit 相當方便，但通常也只適用於尚未推出去的 Commit。\")])]),_c('tr',[_c('td',[_vm._v(\"Revert\")]),_c('td',[_vm._v(\"否\")]),_c('td',[_vm._v(\"新增一個 Commit 來反轉（或說取消）另一個 Commit 的內容，原本的 Commit 依舊還是會保留在歷史紀錄中。雖然會因此而增加 Commit 數，但通常比較適用於已經推出去的 Commit，或是不允許使用 Reset 或 Rebase 之修改歷史紀錄的指令的場合。\")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"工作流程-workflow\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#工作流程-workflow\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 工作流程 Workflow\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"下面介绍的工作流程有一个共同点：都采用\\\"\"),_c('strong',[_vm._v(\"功能驱动式开发\")]),_vm._v(\"\\\"（Feature-driven development，简称FDD）。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/20/5c6d0dba2e04c.png\",\"alt\":\"bg2015080501\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('strong',[_vm._v(\"第一步：新建分支\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 获取主干最新代码\")]),_vm._v(\"\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" checkout master\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" pull\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 新建一个开发分支myfeature\")]),_vm._v(\"\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" checkout -b myfeature\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('strong',[_vm._v(\"第二步：提交分支 commit\")])]),_c('li',[_c('strong',[_vm._v(\"第三步：撰写提交信息\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"Present-tense summary under 50 characters\\n\\n* More information about commit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"under 72 characters\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\".\\n* More information about commit \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"under 72 characters\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\".\\n\\nhttp://project.management-system.com/ticket/123\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('strong',[_vm._v(\"第四步：与主干同步\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" fetch origin\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" rebase origin/master\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('strong',[_vm._v(\"第五步：合并commit\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"前面讲过用 \"),_c('code',[_vm._v(\"rebase\")]),_vm._v(\" 合并\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"另外一种合并提交的简便方法，就是先用 \"),_c('code',[_vm._v(\"reset\")]),_vm._v(\" 撤销过去多个提交，然后再建一个新的.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('strong',[_vm._v(\"第六步：推送到远程仓库\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" push --force origin myfeature\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"git push\")]),_vm._v(\" 命令要加上 \"),_c('code',[_vm._v(\"force\")]),_vm._v(\" 参数，因为 \"),_c('code',[_vm._v(\"rebase\")]),_vm._v(\" 以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('strong',[_vm._v(\"第七步：发出Pull Request\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"提交到远程仓库以后，就可以发出 Pull Request 到 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支，然后请求别人进行代码 Review，确认可以合并到 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\"。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"知识-技巧解析\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#知识-技巧解析\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 知识/技巧解析\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"断头-detached-head-是什么\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#断头-detached-head-是什么\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 断头 (detached HEAD) 是什么?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"正常情况下，\"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 會指向某一個分支，而分支會指向某一個提交。当 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 没有指向一个分支的时候, 这个状态就被称为 \"),_c('code',[_vm._v(\"detached HEAD\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"使用 \"),_c('code',[_vm._v(\"checkout\")]),_vm._v(\" 指令直接跳到某個提交，而那個提交剛好目前沒有分支指著它。\")]),_c('li',[_c('code',[_vm._v(\"rebase\")]),_vm._v(\" 的過程其實也是處於不斷的 \"),_c('code',[_vm._v(\"detached HEAD\")]),_vm._v(\" 狀態。\")]),_c('li',[_vm._v(\"切換到某個遠端分支的時候。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/20/5c6cc5701a4d8.png\",\"alt\":\"detached-head0\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"假如w我使用 \"),_c('code',[_vm._v(\"checkout\")]),_vm._v(\" 指令切換至 \"),_c('code',[_vm._v(\"add cat 1\")]),_vm._v(\" 那個 \"),_c('code',[_vm._v(\"commmit\")]),_vm._v(\".  同时 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 也就指向了那个提交.  因为没有分支指向这个提交, 所有处于 \"),_c('code',[_vm._v(\"detached HEAD\")]),_vm._v(\" 状态.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/20/5c6cc6a57e5e0.png\",\"alt\":\"detached-head1\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"touch\")]),_vm._v(\" no-head.html\\n\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" add no-head.html\\n\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" commit -m \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"add a no-head file\\\"\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"detached HEAD b6d204e\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\" add no-head \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"file\")]),_vm._v(\"\\n 1 \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"file\")]),_vm._v(\" changed, 0 insertions\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"+\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\", 0 deletions\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"-\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n create mode 100644 no-head.html\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2019/02/20/5c6cc6dd145be.png\",\"alt\":\"detached-head2\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"因为并没有一个分支指向这个新的提交, 只是 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 在指向它.  如果之后我让 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 再指向其他分支.  这个提交就不容易被找到了, 除非我记住它的 SHA-1 校验和.\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" branch new_branch b6d204e\\n$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" checkout new_branch\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"$ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"git\")]),_vm._v(\" checkout -b new_branch b6d204e\\nSwitched to a new branch \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'new_branch'\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"sha-1-字符串是怎么算的\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#sha-1-字符串是怎么算的\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" SHA-1 字符串是怎么算的?\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{attrs:{\"id\":\"sha-1-值會有「重複」的狀況發生嗎？\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#sha-1-值會有「重複」的狀況發生嗎？\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" SHA-1 值會有「重複」的狀況發生嗎？\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"首先，前面提到 SHA-1 演算法的特性之一，就是相同的輸入值就會得到相同的結果.  而當輸入兩個不同的值，卻得到相同的結果，也就是說，兩個內容不同的檔案，卻得到一樣的 SHA-1 值，這種情況稱之為\"),_c('strong',[_vm._v(\"碰撞\")]),_vm._v(\"（collision）。\")])}]\n\nexport { render, staticRenderFns }"]}