{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/设计模式/结构型/装饰者模式.md?vue&type=template&id=f49d8640","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/设计模式/结构型/装饰者模式.md","mtime":1542296045248},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"装饰者模式\"><a class=\"header-anchor\" href=\"#装饰者模式\" aria-hidden=\"true\">#</a> 装饰者模式</h1>\n<p><strong>在不改变原对象的基础上，通过对其进行包装拓展（添加属性或者方法）使原有对象可以满足用户的更复杂需求。</strong></p>\n<p>比如你买一个新房子，你想住得更舒适，那么你刚刚买的未装修过的新房子就不能满足你的需求了，所以你要对其装修一番，放置一个床，摆上一个沙发，抬进来一个电视，这样生活更舒适。同样，装饰者模式也是这个道理，原有的功能已经不能满足用户的需求了，此时你要做的就是为原有功能添砖加瓦，设置新功能和属性来满足用户提出的需求。”</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 装饰者</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">decorator</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取事件源</span>\n    <span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 若事件源已经绑定事件</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> input<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 缓存事件源原有回调函数</span>\n        <span class=\"token keyword\">var</span> oldClickFn <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span>onclick<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 为事件源定义新的事件</span>\n        input<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 事件源原有回调函数</span>\n            <span class=\"token function\">oldClickFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 执行事件源新增回调函数</span>\n            <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 事件源未绑定事件，直接为事件源添加新增回调函数</span>\n        input<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 做其他事情</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>的适配器模式也是对一个对象的修饰来适配其他对象，那么他与装饰者模式有什么不同呢？”</p>\n<p>“适配器方法是对原有对象适配，添加的方法与原有方法功能上大致相似。但是装饰者提供的方法与原来的方法功能项是有一定区别的。再有，使用适配器时我们新增的方法是要调用原来的方法呀。不过在装饰者模式中，不需要了解对象原有的功能，并且对象原有的方法照样可以原封不动地使用。</p>\n<p>在适配器模式中增加的方法要调用原有的方法，是不是就要了解原有方法实现的具体细节，而在装饰者中原封不动地使用，我们就不需要知道原有方法实现的具体细节，只有当我们调用方法时才会知道的。”</p>\n<p>今天学习了一种可以在不了解原有功能的基础上对功能拓展模式，这是对原有功能的一种增强与拓展。当然同样对原有对象进行拓展的模式还有适配器模式，所不同的是适配器进行拓展很多时候是对对象内部结构的重组，因此了解其自身结构是必需的。而装饰者对对象的拓展是一种良性拓展，不用了解其具体实现，只是在外部进行了一次封装拓展，这又是对原有功能完整性的一种保护。</p>\n</div>\n",null]}