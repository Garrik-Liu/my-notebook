{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/计算机通用/ols/files/test_prep.md?vue&type=template&id=864d69fe","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/计算机通用/ols/files/test_prep.md","mtime":1533626059959},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"test-prep\\\"><a href=\\\"#test-prep\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Test Prep</h1><h2 id=\\\"sql-tutorial\\\"><a href=\\\"#sql-tutorial\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> SQL Tutorial</h2>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://www.w3schools.com/sql/default.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"SQL Tutorial\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<h2 id=\\\"using-single-row-functions\\\"><a href=\\\"#using-single-row-functions\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Using Single-Row Functions</h2>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://www.w3schools.com/sql/sql_ref_oracle.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Oracle Functions List\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<h2 id=\\\"using-aggregate-group-functions\\\"><a href=\\\"#using-aggregate-group-functions\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Using Aggregate / Group Functions</h2><p>Grouping allows several rows in a table to be grouped together and for a single value to be computed based on the group of rows.</p>\"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<a href=\\\"https://www.w3schools.com/sql/sql_min_max.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MIN(), MAX()\"),_c('OutboundLink')],2)]),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<a href=\\\"https://www.w3schools.com/sql/sql_count_avg_sum.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"COUNT(), AVG(), SUM()\"),_c('OutboundLink')],2)])]),_vm._ssrNode(\"<div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">MIN</span><span class=\\\"token punctuation\\\">(</span>Price<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">AS</span> SmallestPrice\\n<span class=\\\"token keyword\\\">FROM</span> Products<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h2 id=\\\"using-from-where-group-by-having-order-by-distinct\\\"><a href=\\\"#using-from-where-group-by-having-order-by-distinct\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Using FROM, WHERE, GROUP BY, HAVING, ORDER BY, Distinct</h2><h4 id=\\\"from\\\"><a href=\\\"#from\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> FROM</h4><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">FROM</span> table_name<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"where\\\"><a href=\\\"#where\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> WHERE</h4><p><code>WHERE</code> clause is used to filter records.</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">FROM</span> Customers <span class=\\\"token keyword\\\">WHERE</span> Country<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'Mexico'</span><span class=\\\"token punctuation\\\">;</span> \\n</code></pre></div><h4 id=\\\"group-by\\\"><a href=\\\"#group-by\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Group By</h4><p><code>GROUP BY</code> statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.</p><p>The <code>GROUP BY</code> clause tells the database server to group rows <strong>based on the distinct values</strong> that exist for the specified columns.</p><p>Syntax:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> column_name<span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">FROM</span> table_name\\n<span class=\\\"token keyword\\\">WHERE</span> condition\\n<span class=\\\"token keyword\\\">GROUP</span> <span class=\\\"token keyword\\\">BY</span> column_name<span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> column_name<span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n</code></pre></div><p>E.g: Display the average salary per job type:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">AVG</span><span class=\\\"token punctuation\\\">(</span>sal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">AS</span> avg_sal <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">GROUP</span> <span class=\\\"token keyword\\\">BY</span> job<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>\\bE.g: Lists the number of customers in each country, sorted high to low:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span>CustomerID<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> Country\\n<span class=\\\"token keyword\\\">FROM</span> Customers\\n<span class=\\\"token keyword\\\">GROUP</span> <span class=\\\"token keyword\\\">BY</span> Country\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span>CustomerID<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">DESC</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"having\\\"><a href=\\\"#having\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> HAVING</h4><p><code>HAVING</code> clause was added to SQL because the <code>WHERE</code> keyword could not be used with aggregate functions.\\n<code>HAVING</code> clause can impose a further condition based on an aggregate or group condition.</p><p>Syntax:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> column_name<span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">FROM</span> table_name\\n<span class=\\\"token keyword\\\">WHERE</span> condition\\n<span class=\\\"token keyword\\\">GROUP</span> <span class=\\\"token keyword\\\">BY</span> column_name<span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">HAVING</span> condition\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> column_name<span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>E.g: Lists the number of customers in each country. Only include countries with more than 5 customers:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span>CustomerID<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> Country\\n<span class=\\\"token keyword\\\">FROM</span> Customers\\n<span class=\\\"token keyword\\\">GROUP</span> <span class=\\\"token keyword\\\">BY</span> Country\\n<span class=\\\"token keyword\\\">HAVING</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span>CustomerID<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"order-by\\\"><a href=\\\"#order-by\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Order By</h4><p><code>ORDER BY</code> keyword is used to sort the result-set in ascending or descending order.</p><p>E.g: Selects all customers from the &quot;Customers&quot; table, sorted DESCENDING by the &quot;Country&quot; column:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">FROM</span> Customers\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> Country <span class=\\\"token keyword\\\">DESC</span><span class=\\\"token punctuation\\\">;</span> \\n</code></pre></div><h4 id=\\\"distinct\\\"><a href=\\\"#distinct\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Distinct</h4><p><code>SELECT DISTINCT</code> statement is used to return only distinct (different) values.</p><p>E.g: Selects only the DISTINCT values from the &quot;Country&quot; column in the &quot;Customers&quot; table:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token keyword\\\">DISTINCT</span> Country <span class=\\\"token keyword\\\">FROM</span> Customers<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>E.g: Lists the number of different (distinct) customer countries:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">DISTINCT</span> Country<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">FROM</span> Customers<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h2 id=\\\"joins-inner-join-outer-joins-left-join-and-right-join\\\"><a href=\\\"#joins-inner-join-outer-joins-left-join-and-right-join\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Joins: Inner-Join, Outer Joins (Left Join and Right Join)</h2><p>A <code>JOIN</code> clause is used to combine rows from two or more tables, based on a related column between them.</p><ul><li>INNER JOIN: Returns records that have matching values in both tables</li><li>LEFT JOIN: Return all records from the left table, and the matched records from the right table</li><li>RIGHT JOIN: Return all records from the right table, and the matched records from the left table</li><li>FULL (OUTER) JOIN: Return all records when there is a match in either left or right table</li></ul><p><img src=\\\"https://i.imgur.com/JAWya3N.png\\\" alt=\\\"Screen Shot 2018-08-06 at 11.11.45 PM\\\"></p><h4 id=\\\"inner-join\\\"><a href=\\\"#inner-join\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Inner Join</h4><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> Orders<span class=\\\"token punctuation\\\">.</span>OrderID<span class=\\\"token punctuation\\\">,</span> Customers<span class=\\\"token punctuation\\\">.</span>CustomerName\\n<span class=\\\"token keyword\\\">FROM</span> Orders <span class=\\\"token keyword\\\">INNER</span> <span class=\\\"token keyword\\\">JOIN</span> Customers \\n<span class=\\\"token keyword\\\">ON</span> Orders<span class=\\\"token punctuation\\\">.</span>CustomerID <span class=\\\"token operator\\\">=</span> Customers<span class=\\\"token punctuation\\\">.</span>CustomerID<span class=\\\"token punctuation\\\">;</span> \\n</code></pre></div><p>E.g: Display the employee number, name, job, salary, and salary grade for each employee</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> empno<span class=\\\"token punctuation\\\">,</span> ename<span class=\\\"token punctuation\\\">,</span> job<span class=\\\"token punctuation\\\">,</span> sal<span class=\\\"token punctuation\\\">,</span> grade \\n<span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">INNER</span> <span class=\\\"token keyword\\\">JOIN</span> salgrade \\n<span class=\\\"token keyword\\\">ON</span> sal <span class=\\\"token operator\\\">BETWEEN</span> losal <span class=\\\"token operator\\\">and</span> hisal \\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> sal <span class=\\\"token keyword\\\">DESC</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"left-join\\\"><a href=\\\"#left-join\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Left Join</h4><p>E.g: select all customers, and any orders they might have:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> Customers<span class=\\\"token punctuation\\\">.</span>CustomerName<span class=\\\"token punctuation\\\">,</span> Orders<span class=\\\"token punctuation\\\">.</span>OrderID\\n<span class=\\\"token keyword\\\">FROM</span> Customers <span class=\\\"token keyword\\\">LEFT</span> <span class=\\\"token keyword\\\">JOIN</span> Orders \\n<span class=\\\"token keyword\\\">ON</span> Customers<span class=\\\"token punctuation\\\">.</span>CustomerID <span class=\\\"token operator\\\">=</span> Orders<span class=\\\"token punctuation\\\">.</span>CustomerID\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> Customers<span class=\\\"token punctuation\\\">.</span>CustomerName<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"right-join\\\"><a href=\\\"#right-join\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Right Join</h4><p>E,g: Return all employees, and any orders they might have placed:</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> Orders<span class=\\\"token punctuation\\\">.</span>OrderID<span class=\\\"token punctuation\\\">,</span> Employees<span class=\\\"token punctuation\\\">.</span>LastName<span class=\\\"token punctuation\\\">,</span> Employees<span class=\\\"token punctuation\\\">.</span>FirstName\\n<span class=\\\"token keyword\\\">FROM</span> Orders <span class=\\\"token keyword\\\">RIGHT</span> <span class=\\\"token keyword\\\">JOIN</span> Employees \\n<span class=\\\"token keyword\\\">ON</span> Orders<span class=\\\"token punctuation\\\">.</span>EmployeeID <span class=\\\"token operator\\\">=</span> Employees<span class=\\\"token punctuation\\\">.</span>EmployeeID\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> Orders<span class=\\\"token punctuation\\\">.</span>OrderID<span class=\\\"token punctuation\\\">;</span> \\n</code></pre></div><h2 id=\\\"joins-non-equi-join-multiple-table-joins-self-joins\\\"><a href=\\\"#joins-non-equi-join-multiple-table-joins-self-joins\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Joins: Non-equi Join, Multiple Table Joins, Self Joins</h2><h2 id=\\\"using-set-operators-union-union-all-intersect-minus\\\"><a href=\\\"#using-set-operators-union-union-all-intersect-minus\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Using SET operators (UNION, UNION ALL, INTERSECT, MINUS)</h2><h4 id=\\\"union\\\"><a href=\\\"#union\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> UNION</h4><p><code>UNION</code> operator combines the two sets of rows (from two SELECT statements) into a single row set.</p><p>E.g: Display the employee number, name, salary and/or commission for each employee</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> empno<span class=\\\"token punctuation\\\">,</span> ename<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'SAL'</span> <span class=\\\"token keyword\\\">AS</span> <span class=\\\"token keyword\\\">type</span><span class=\\\"token punctuation\\\">,</span> sal <span class=\\\"token keyword\\\">AS</span> amount <span class=\\\"token keyword\\\">FROM</span> emp\\n<span class=\\\"token keyword\\\">UNION</span>\\n<span class=\\\"token keyword\\\">SELECT</span> empno<span class=\\\"token punctuation\\\">,</span> ename<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'COMM'</span><span class=\\\"token punctuation\\\">,</span> comm <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> comm <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p><img src=\\\"https://i.imgur.com/SH2MqSS.png\\\" alt=\\\"Screen Shot 2018-08-06 at 11.50.58 PM\\\"></p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> empno<span class=\\\"token punctuation\\\">,</span> ename<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'SAL'</span> <span class=\\\"token keyword\\\">AS</span> <span class=\\\"token keyword\\\">type</span><span class=\\\"token punctuation\\\">,</span> sal <span class=\\\"token keyword\\\">AS</span> amount <span class=\\\"token keyword\\\">FROM</span> emp\\n<span class=\\\"token keyword\\\">UNION</span>\\n<span class=\\\"token keyword\\\">SELECT</span> empno<span class=\\\"token punctuation\\\">,</span> ename<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'COMM'</span><span class=\\\"token punctuation\\\">,</span> comm <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> comm <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token keyword\\\">DESC</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p><img src=\\\"https://i.imgur.com/EQlNFyL.png\\\" alt=\\\"Screen Shot 2018-08-06 at 11.53.48 PM\\\"></p><h4 id=\\\"union-all\\\"><a href=\\\"#union-all\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> UNION ALL</h4><p>When two sets of rows are UNIONed together, the <code>UNION</code> operator eliminates duplicate rows. To keep the duplicate rows, use the <code>UNION ALL</code> operator instead of the <code>UNION</code> operator.</p><p>E.g: Display all of the different salary and commission amounts\\n(This example has duplicate rows eliminated:)</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> sal <span class=\\\"token keyword\\\">AS</span> amount <span class=\\\"token keyword\\\">FROM</span> emp\\n<span class=\\\"token keyword\\\">UNION</span>\\n<span class=\\\"token keyword\\\">SELECT</span> comm <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> comm <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> amount\\n</code></pre></div><p><img src=\\\"https://i.imgur.com/ni69CBy.png\\\" alt=\\\"Screen Shot 2018-08-06 at 11.56.10 PM\\\"></p><p>E.g: Display all of the salary and commission amounts\\n(This example keeps duplicate rows:)</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> sal <span class=\\\"token keyword\\\">AS</span> amount <span class=\\\"token keyword\\\">FROM</span> emp\\n<span class=\\\"token keyword\\\">UNION</span> <span class=\\\"token keyword\\\">ALL</span>\\n<span class=\\\"token keyword\\\">SELECT</span> comm <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> comm <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> amount\\n</code></pre></div><p><img src=\\\"https://i.imgur.com/rp9LWQS.png\\\" alt=\\\"Screen Shot 2018-08-06 at 11.55.55 PM\\\"></p><h4 id=\\\"intersect\\\"><a href=\\\"#intersect\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> INTERSECT</h4><p>The <code>INTERSECT</code> operator returns the rows that are common between two sets of rows.</p><p>E.g: Display the employee number of all of the employees who earn 3000 or less and are managers</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token keyword\\\">DISTINCT</span> mgr <span class=\\\"token keyword\\\">FROM</span> emp\\n<span class=\\\"token keyword\\\">INTERSECT</span>\\n<span class=\\\"token keyword\\\">SELECT</span> empno <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> sal <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">3000</span>\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> mgr<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p><img src=\\\"https://i.imgur.com/HRUk8bv.png\\\" alt=\\\"Screen Shot 2018-08-06 at 11.58.48 PM\\\"></p><h4 id=\\\"minus\\\"><a href=\\\"#minus\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> MINUS</h4><p>The <code>MINUS</code> operator returns the rows in the first set of rows that do not exist in the second set of rows. The MINUS operator is sometimes called the difference operator.</p><p>E.g: Display the employee number of all employees who are not managers</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> empno <span class=\\\"token keyword\\\">FROM</span> emp\\nMINUS\\n<span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token keyword\\\">DISTINCT</span> mgr <span class=\\\"token keyword\\\">FROM</span> emp\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h2 id=\\\"subqueries\\\"><a href=\\\"#subqueries\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Subqueries</h2><p>A subquery allows the results of one SELECT statement to be used in another DML statement.</p><p>When used in a DML statement, a subquery must be enclosed in parentheses. The number of rows returned by a subquery must match the number of values that the function or operator expects. The <code>ORDER BY</code> clause cannot used within a subquery</p><p>E.g: get the employee number, name, job, and salary of all employees that make more than the lowest paid salesman.</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> empno<span class=\\\"token punctuation\\\">,</span> ename<span class=\\\"token punctuation\\\">,</span> job<span class=\\\"token punctuation\\\">,</span> sal <span class=\\\"token keyword\\\">FROM</span> emp\\n<span class=\\\"token keyword\\\">WHERE</span> sal <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">MIN</span><span class=\\\"token punctuation\\\">(</span>sal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> job <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'SALESMAN'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"using-subqueries-with-in-not-in\\\"><a href=\\\"#using-subqueries-with-in-not-in\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Using Subqueries with IN, NOT IN</h3><p>Using <code>IN</code> in a subquery allows a column or expression to be compared to a set of values returned from the subquery.</p><p>E.g:  Get employee numbers of all of the managers of the clerks and analysts.</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> mgr <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">where</span> job <span class=\\\"token operator\\\">IN</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'CLERK'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'ANALYST'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"nested-subqueries\\\"><a href=\\\"#nested-subqueries\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Nested Subqueries</h3><p>A nested subquery is a subquery within a subquery.</p><p>E.g: get the employee information for the managers with the most employees.</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> empno<span class=\\\"token punctuation\\\">,</span> ename<span class=\\\"token punctuation\\\">,</span> job <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> empno <span class=\\\"token operator\\\">IN</span>\\n<span class=\\\"token punctuation\\\">(</span>\\n   <span class=\\\"token keyword\\\">SELECT</span> mgr <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">GROUP</span> <span class=\\\"token keyword\\\">BY</span> mgr <span class=\\\"token keyword\\\">HAVING</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n   <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">MAX</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">GROUP</span> <span class=\\\"token keyword\\\">BY</span> mgr\\n   <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"correlated-subqueries\\\"><a href=\\\"#correlated-subqueries\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Correlated Subqueries</h3><p>Correlated subqueries reference information from the main query. Since a correlated subquery is dependent on row data from the main query, this subquery must be re-evaluated for each row of the main query.</p><p>E.g: lists the employee number, name, job, and department name of all employees who do not work in the same department as their managers (but do have managers!)</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> empno<span class=\\\"token punctuation\\\">,</span> ename<span class=\\\"token punctuation\\\">,</span> job<span class=\\\"token punctuation\\\">,</span> dname \\n<span class=\\\"token keyword\\\">FROM</span> emp employees <span class=\\\"token keyword\\\">INNER</span> <span class=\\\"token keyword\\\">JOIN</span> dept \\n<span class=\\\"token keyword\\\">ON</span> employees<span class=\\\"token punctuation\\\">.</span>deptno <span class=\\\"token operator\\\">=</span> dept<span class=\\\"token punctuation\\\">.</span>deptno\\n<span class=\\\"token keyword\\\">WHERE</span> mgr <span class=\\\"token operator\\\">IS</span> <span class=\\\"token operator\\\">NOT</span> <span class=\\\"token boolean\\\">NULL</span> <span class=\\\"token operator\\\">AND</span> employees<span class=\\\"token punctuation\\\">.</span>deptno <span class=\\\"token operator\\\">!=</span>\\n<span class=\\\"token punctuation\\\">(</span>\\n   <span class=\\\"token keyword\\\">SELECT</span> deptno <span class=\\\"token keyword\\\">FROM</span> emp managers <span class=\\\"token keyword\\\">WHERE</span> employees<span class=\\\"token punctuation\\\">.</span>mgr <span class=\\\"token operator\\\">=</span> managers<span class=\\\"token punctuation\\\">.</span>empno\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"subquery-virtual-columns\\\"><a href=\\\"#subquery-virtual-columns\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Subquery Virtual Columns</h3><p>A subquery can appear as a virtual column expression. This is a form of correlated subquery; that is, the subquery must execute for every row of the query. The subquery must return a single row and column.</p><p>E.g: list each employee along with the name of the employee's department.</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> ename<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">SELECT</span> dname <span class=\\\"token keyword\\\">FROM</span> dept <span class=\\\"token keyword\\\">WHERE</span> dept<span class=\\\"token punctuation\\\">.</span>deptno <span class=\\\"token operator\\\">=</span> emp<span class=\\\"token punctuation\\\">.</span>deptno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">AS</span> dname <span class=\\\"token keyword\\\">FROM</span> emp<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>E.g:  list the name and the number of employees in each department.</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> dname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">WHERE</span> emp<span class=\\\"token punctuation\\\">.</span>deptno <span class=\\\"token operator\\\">=</span> dept<span class=\\\"token punctuation\\\">.</span>deptno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">AS</span> num_emps <span class=\\\"token keyword\\\">FROM</span> dept<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"subquery-virtual-tables\\\"><a href=\\\"#subquery-virtual-tables\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Subquery Virtual Tables</h3><p>A subquery can appear as a virtual table in the <code>FROM</code> clause of a <code>SELECT</code> statement. The virtual table can appear as part of a table join. The columns produced by the virtual table become valid columns to SELECT in the query.</p><p>E.g: list the employee name, salary, and salary grade for each employee that is salary grade 3 or higher.</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> ename<span class=\\\"token punctuation\\\">,</span> sal<span class=\\\"token punctuation\\\">,</span> grade \\n<span class=\\\"token keyword\\\">FROM</span> \\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">INNER</span> <span class=\\\"token keyword\\\">JOIN</span> salgrade \\n<span class=\\\"token keyword\\\">ON</span> sal <span class=\\\"token operator\\\">BETWEEN</span> losal <span class=\\\"token operator\\\">AND</span> hisal<span class=\\\"token punctuation\\\">)</span> empsalgrade \\n<span class=\\\"token keyword\\\">WHERE</span> grade <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>E.g: list the name of all employees along with the number of employees in the department in which the employee resides ordered from the departments with the most employees to the department with the least employees, sub sorted alphabetically by employee name.</p><div class=\\\"language-sql extra-class\\\"><pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">SELECT</span> ename<span class=\\\"token punctuation\\\">,</span> num_emps\\n<span class=\\\"token keyword\\\">FROM</span> emp <span class=\\\"token keyword\\\">INNER</span> <span class=\\\"token keyword\\\">JOIN</span> \\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">SELECT</span> deptno<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">SELECT</span> <span class=\\\"token function\\\">COUNT</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">FROM</span> emp emp2 \\n<span class=\\\"token keyword\\\">WHERE</span> emp2<span class=\\\"token punctuation\\\">.</span>deptno <span class=\\\"token operator\\\">=</span> dept<span class=\\\"token punctuation\\\">.</span>deptno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">AS</span> num_emps <span class=\\\"token keyword\\\">FROM</span> dept<span class=\\\"token punctuation\\\">)</span> empcount \\n<span class=\\\"token keyword\\\">ON</span> emp<span class=\\\"token punctuation\\\">.</span>deptno <span class=\\\"token operator\\\">=</span> empcount<span class=\\\"token punctuation\\\">.</span>deptno\\n<span class=\\\"token keyword\\\">ORDER</span> <span class=\\\"token keyword\\\">BY</span> num_emps <span class=\\\"token keyword\\\">DESC</span><span class=\\\"token punctuation\\\">,</span> ename <span class=\\\"token keyword\\\">ASC</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h3 id=\\\"using-subqueries-with-insert-update-and-delete\\\"><a href=\\\"#using-subqueries-with-insert-update-and-delete\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Using Subqueries with INSERT, UPDATE, and DELETE</h3><h2 id=\\\"views\\\"><a href=\\\"#views\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Views</h2><h2 id=\\\"privileges\\\"><a href=\\\"#privileges\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Privileges</h2>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}