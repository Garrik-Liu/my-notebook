{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/深入探讨/异步.md?vue&type=template&id=6a582b03","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/前端开发/javascript/深入探讨/异步.md","mtime":1547762404878},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"异步编程\\\"><a href=\\\"#异步编程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 异步编程</h1><h2 id=\\\"为什么要用异步\\\"><a href=\\\"#为什么要用异步\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么要用异步?</h2><p>在编程的时候, 一个很重要的问题是: <strong>如何表达和控制持续一段时间的程序行为</strong>。换句话说, 就是一段代码 &quot;现在&quot; 运行, 另一部分 &quot;将来&quot; 运行.   &quot;将来&quot; 运行的代码无法在 &quot;现在&quot; 运行的代码执行完之后立刻执行.  &quot;现在&quot; 和 &quot;将来&quot; 之间有一段间隙.</p><p>这个间隙可能是在等待用户输入信息、从数据库或文件系统中请求数据、或通过网络发送数据并等待响应.</p><p>处理好 &quot;现在&quot; 的代码和 &quot;将来&quot; 的代码之间的关系, 就是异步编程的核心.</p><h2 id=\\\"异步的解决方案\\\"><a href=\\\"#异步的解决方案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 异步的解决方案</h2><h3 id=\\\"回调函数\\\"><a href=\\\"#回调函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 回调函数</h3><p>&quot;回调&quot; 的意思就是 &quot;回头调用的函数&quot;.  函数中的代码是在 &quot;将来&quot; 的操作.  当相对应的 &quot;事件&quot; 被触发了, 函数会被执行.</p><p>回调是编写和处理 JavaScript 异步逻辑的最常用方式.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 代码 A </span>\\n\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 代码 B</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 代码 C</span>\\n</code></pre></div><p>上面的代码中使用了回调函数.  如果用日常口语去描述这段代码的运行方式, 大概是 &quot;代码 A 先执行; 然后设定一个 1000 毫秒的延时事件; 代码 C 执行; 延时事件被触发, 代码 B 得到执行.&quot;</p><h4 id=\\\"回调地狱\\\"><a href=\\\"#回调地狱\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 回调地狱</h4><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>这种多个回调函数嵌套在一起的代码, 被称作 &quot;回调地狱&quot;.</p><p>被称为 &quot;地狱&quot; 的主要原因除了层层嵌套的代码难于阅读, 更主要的原因是: <strong>回调函数的使用让代码执行顺序缺少 &quot;顺序性&quot;</strong>.  &quot;非顺序(线性)&quot; 的代码执行方式与我们大脑的顺序地思考方式不符.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">doA</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token function\\\">doC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">doD</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> \\n        <span class=\\\"token function\\\">doF</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">doE</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">doB</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>如果 <code>doA</code> 和 <code>doD</code> 接收两个\\b回调函数, 会被异步调用.  那么上面代码的执行顺序为 A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F.  当我们在线性（顺序）地追踪这段代码的执行顺序时，我们不得不从一个函数跳到下一个，再跳到下一个.  可以想象当异步代码更复杂时, \\b这种追踪的难度会成倍增加。</p><p>这种 &quot;非顺序的&quot; 执行步骤并不符合我们的大脑思考方式.  我们的大脑类似于单线程运行的事件循环队列, 它喜欢以顺序地, 同步地方式去理解, 思考事情.</p><p>在回调函数上, 我们大脑的工作方式和代码的执行方式发生了 &quot;分歧&quot;.  回调函数的滥用会让<strong>代码变得更加难以理解、追踪、调试和维护</strong>。这是回调函数的主要问题所在.</p><p>除此之外, <strong>嵌套的回调函数把\\b异步代码的执行顺序\\b写死了</strong>.  上面代码中, <code>doD</code> 的回调函数必须等 <code>doA</code> 的回调函数得到执行之后才能被执行. 假如它们两个之间没有顺序关系, 这种写死的顺序会增加代码的脆弱性.  类比来说, \\b假如你计划五点钟去吃饭, \\b六点钟去看电影.  它们之间没有绝对的顺序关系, 哪怕你五点钟没有\\b去吃饭, 也不会影响你六点去看电影.</p><h4 id=\\\"信任问题\\\"><a href=\\\"#信任问题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 信任问题</h4><p>当我们在第三方提供的\\b工具中使用回调函数的时候, 实际上我们就<strong>把代码一部分的操控权交给了第三方.  这被称为 &quot;控制反转&quot;</strong>.  这加大了代码不确定性.</p><p>假如你使用了一个\\b第三方提供的用来验证账号登录状态的函数.  并在传入的回调函数中进行支付操作.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code>\\b<span class=\\\"token function\\\">checkLogin</span><span class=\\\"token punctuation\\\">(</span>accountInfo<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">payMoney</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>看似一切都完美, 但是我们在这段代码中, 把支付操作的控制权交给了一个第三方.  \\b这会导致很多可能出现的错误情况:</p><ul><li>调用回调过早;</li><li>调用回调过晚（或没有调用）;</li><li>调用回调的次数太少或太多;</li><li>没有把所需的环境 / 参数成功传给你的回调函数;</li><li>吞掉可能出现的错误或异常;</li><li>等等;</li></ul><p>\\b\\b为了确保安全性, 常用的解决方案是对传入的参数, \\b回调函数的调用情况设定相应的安全机制.  但这也加大了代码的复杂度.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">addNumbers</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 确保输入为数字 </span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> x <span class=\\\"token operator\\\">!=</span> <span class=\\\"token string\\\">&quot;number&quot;</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">!=</span> <span class=\\\"token string\\\">&quot;number&quot;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n        <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">Error</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token string\\\">&quot;Bad parameters&quot;</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 如果到达这里，可以通过+安全的进行数字相加 </span>\\n    <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">addNumbers</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">21</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">21</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 42 </span>\\n<span class=\\\"token function\\\">addNumbers</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">21</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;21&quot;</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Error: &quot;Bad parameters&quot;</span>\\n</code></pre></div><p>如果你还没有应用某种逻辑来解决所有这些控制反转导致的信任问题，那<strong>你的代码现在已经有了 bug，即使它们还没有给你造成损害。隐藏的 bug 也是 bug</strong>。</p><h3 id=\\\"promise\\\"><a href=\\\"#promise\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Promise</h3><p><strong>Promise 是一种封装和组合未来值的易于复用的机制</strong>。这套机制可以用来处理异步操作.  ES6 使用这套机制实现了 Promise 对象.  所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果.  从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。</p><h4 id=\\\"三种状态-pending-fulfilled-rejected\\\"><a href=\\\"#三种状态-pending-fulfilled-rejected\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 三种状态: pending, fulfilled, rejected</h4><p>先来简单解释一下 Promise 是个什么概念:</p><p>&quot;想象中午你去麦当劳买汉堡, 你点餐的时候服务员是不会立刻给你汉堡的. 交完钱, 你会先得到一张带订单号的收据作为凭证.  这张收据就是 &quot;Promise (承诺)&quot;.  服务员用它来向你承诺, 汉堡做好后会给你.  这个时候, 收据代表了你的汉堡.  当汉堡做好, 服务员叫你的订单号的时候, 这张收据 (承诺) 就可以用来换取你真正想要得到的汉堡.  当然还会有另一种结果, 是汉堡不能卖给你了, 可能因为卖光了, 可能因为质量有问题, 反正就是不能给你了.&quot;</p><p>在 JavaScript 中, Promise 对象代表一个异步操作.</p><p>有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和 <code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p><p>拿上面买汉堡类比, 拿着收据等待汉堡时, 状态为 &quot;<code>pending</code>&quot;; 拿到汉堡了, 状态为 &quot;<code>fulfilled</code>&quot;; 被通知汉堡卖光了, 状态为 &quot;<code>rejected</code>&quot;.</p><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 <code>pending</code> 变为 <code>fulfilled</code> 和从 <code>pending</code> 变为 <code>rejected</code>。</p><h4 id=\\\"基本用法\\\"><a href=\\\"#基本用法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基本用法</h4><p>ES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> myPromise <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ... some code</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token comment\\\">/* 异步操作成功 */</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 <code>resolve</code> 和 <code>reject</code>。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。Promise 构造函数调用后会立即执行。</p><p><code>resolve</code> 函数的作用是，将 Promise 对象的状态从 “未完成” 变为 “成功”.  在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</p><p><code>reject</code> 函数的作用是，将 Promise 对象的状态从 “未完成” 变为 “失败”， 在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code>myPromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// success</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> \\n    <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// failure</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>Promise 实例生成以后，可以用 <code>then</code> 方法分别指定 <code>resolved</code> 状态和 <code>rejected</code> 状态的回调函数。</p><p><code>then</code> 函数是 Promise 状态改变时的回调函数.</p><p><code>then</code> 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 <code>resolved</code> 时调用，第二个回调函数是 Promise 对象的状态变为 <code>rejected</code> 时调用。第二个函数是可选的.</p><p>再看另一个例子:</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'An error'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> p2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>p1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\np2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>\\n    result <span class=\\\"token operator\\\">=&gt;</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> \\n    err <span class=\\\"token operator\\\">=&gt;</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 结果: An error</span>\\n</code></pre></div><p>上面代码中，<code>p1</code> 是一个 Promise，500 毫秒之后变为 <code>rejected</code>。<code>p2</code> 的状态在 100 毫秒之后改变，<code>resolve</code> 方法返回的是 <code>p1</code>。由于 <code>p2</code> 返回的是另一个 Promise，导致 <code>p2</code> 自己的状态无效了，由 <code>p1</code> 的状态决定 <code>p2</code> 的状态。所以，后面的 <code>then</code> 语句都变成针对 <code>p1</code> 的状态。当 <code>p1</code> 变为 <code>rejected</code>.  <code>then</code> 函数接收的第二个回调函数参数被调用.</p><h4 id=\\\"链式调用\\\"><a href=\\\"#链式调用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 链式调用</h4><p><code>then</code> 方法返回的是一个新的 Promise 实例。因此可以采用链式写法，即 <code>then</code> 方法后面再调用另一个 <code>then</code> 方法.  前面 <code>then</code> 函数中回调函数参数返回的值, 会作为后一个 <code>then</code> 函数的回调函数参数的参数.</p><p>采用链式调用，可以指定一组按照次序调用的回调函数。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">getJSON</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;/post/1.json&quot;</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>post<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">getJSON</span><span class=\\\"token punctuation\\\">(</span>post<span class=\\\"token punctuation\\\">.</span>commentURL<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">funcA</span><span class=\\\"token punctuation\\\">(</span>comments<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;resolved: &quot;</span><span class=\\\"token punctuation\\\">,</span> comments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">funcB</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;rejected: &quot;</span><span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"catch-finally\\\"><a href=\\\"#catch-finally\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> catch, finally</h4><p><code>catch</code> 函数用于指定发生错误时的回调函数.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">getJSON</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/posts.json'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>posts<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'发生错误！'</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>如果异步操作抛出错误，状态就会变为 <code>rejected</code>，就会调用 <code>catch</code> 方法指定的回调函数.</p><p>Promise 对象的错误具有 “冒泡” 性质，会一直向后传递，直到被捕获为止。也就是说，链式调用中, 无论多少个 Promise 对象, 任何一个出现错误, 都会被最后一个 <code>catch</code> 捕获.</p><p>一般来说，不要在 <code>then</code> 方法里面定义 <code>reject</code> 状态的回调函数（即 <code>then</code> 的第二个参数），总是使用 <code>catch</code> 方法。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">someAsyncThing</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 下面一行会报错，因为x没有声明</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">someAsyncThing</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'oh no'</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'carry on'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// oh no [ReferenceError: x is not defined]</span>\\n<span class=\\\"token comment\\\">// carry on</span>\\n</code></pre></div><p><code>catch</code> 方法返回的还是一个 Promise 对象，因此后面还可以接着调用 <code>then</code> 方法。</p><hr><p><code>finally</code> 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code>promise\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>···<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>error <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>···<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">finally</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>···<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p><code>finally</code> 方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是 <code>fulfilled</code> 还是 <code>rejected</code>。这表明，<code>finally</code> 方法里面的操作，应该是与<strong>状态无关</strong>的，不依赖于 Promise 的执行结果。</p><h4 id=\\\"all-race\\\"><a href=\\\"#all-race\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> all, race</h4><p><code>Promise.all</code> 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><p>接受一个数组作为参数，数组里的每一项必须都是 Promise 实例，如果不是，就会先调用 <code>Promise.resolve</code> 方法，将参数转为 Promise 实例，再进一步处理。（<code>Promise.all</code> 方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例)。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> p <span class=\\\"token operator\\\">=</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>p1<span class=\\\"token punctuation\\\">,</span> p2<span class=\\\"token punctuation\\\">,</span> p3<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p><code>p</code> 的状态由<code>p1</code>、<code>p2</code>、<code>p3</code>决定，分成两种情况:</p><ol><li>只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成 <code>fulfilled</code>，<code>p</code> 的状态才会变成 <code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给 <code>p</code> 的回调函数。</li><li>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被 <code>rejected</code>，<code>p</code> 的状态就变成 <code>rejected</code>，此时第一个被 <code>reject</code>的实例的返回值，会传递给 <code>p</code> 的回调函数。</li></ol><hr><p><code>Promise.race</code> 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> p <span class=\\\"token operator\\\">=</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">race</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>p1<span class=\\\"token punctuation\\\">,</span> p2<span class=\\\"token punctuation\\\">,</span> p3<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\np<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>上面代码中，只要 <code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code> 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 <code>p</code> 的回调函数。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolved<span class=\\\"token punctuation\\\">,</span> rejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolved</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> p2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolved<span class=\\\"token punctuation\\\">,</span> rejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolved</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> p3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolved<span class=\\\"token punctuation\\\">,</span> rejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolved</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> p <span class=\\\"token operator\\\">=</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">race</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>p1<span class=\\\"token punctuation\\\">,</span> p2<span class=\\\"token punctuation\\\">,</span> p3<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\np<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 2 </span>\\n</code></pre></div><h4 id=\\\"为什么用-promise\\\"><a href=\\\"#为什么用-promise\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么用 Promise</h4><p>现在再说说为什么用 Promise 机制.</p><p>首先回忆, 用回调函数处理异步操作, 缺乏顺序性和可信任性.</p><p>Promise 解决了我们因只用回调的代码而产生的 &quot;控制反转&quot; 问题.  Promise 通过把回调的控制反转反转回来，我 们把控制权放在了一个可信任的系统（Promise）中，这种系统的设计目的就是为了使异步编码更清晰。</p><p>Promise 以顺序的方式表达异步流的一个更好的方法，这有助于我们的大脑更好地计划和维护异步 JavaScript 代码\\n.</p><h3 id=\\\"generator\\\"><a href=\\\"#generator\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Generator</h3><p>Generator 函数是 ES6 提供的一种异步编程解决方案.</p><p>语法上，首先可以把它理解成，Generator 函数是一个 &quot;状态机&quot;，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象(Iterator Object），可以依次遍历 Generator 函数内部的每一个状态。</p><h4 id=\\\"基本用法-2\\\"><a href=\\\"#基本用法-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基本用法</h4><p>声明 Genrator 函数时, <code>function</code> 关键字与函数名之间有一个 &quot;星号&quot; (星号位置无所谓); 函数体内部使用 <code>yield</code> 表达式，定义不同的内部状态.</p><p>Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的遍历器对象（Iterator Object）.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">helloWorldGenerator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">'world'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'ending'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> hw <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">helloWorldGenerator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>上面代码定义了一个 Generator 函数 <code>helloWorldGenerator</code>，它内部有两个 <code>yield</code> 表达式（<code>hello</code> 和 <code>world</code>），即该函数有三个状态：<code>hello</code>，<code>world</code> 和 <code>return</code> 语句（结束执行）。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code>hw<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// { value: 'hello', done: false }</span>\\n\\nhw<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// { value: 'world', done: false }</span>\\n\\nhw<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// { value: 'ending', done: true }</span>\\n\\nhw<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// { value: undefined, done: true }</span>\\n</code></pre></div><p>调用遍历器对象的 <code>next</code> 方法，使得指针移向下一个状态。每次调用 <code>next</code> 方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个 <code>yield</code> 表达式（或 <code>return</code> 语句）为止.</p><p><code>next</code> 方法调用后, 返回一个有着 <code>value</code> 和 <code>done</code> 两个属性的对象。<code>value</code> 属性表示当前的内部状态的值，是 <code>yield</code> 表达式后面那个表达式的值；<code>done</code> 属性是一个布尔值，表示是否遍历结束。</p><p>简单说, <code>yield</code> 表达式是暂停执行的标记，而 <code>next</code> 方法可以恢复执行。</p><p>正常函数只能返回一个值，而 Generator 函数通过 <code>yield</code> 和 <code>next</code> 可以返回一系列的值.</p><h4 id=\\\"yield-表达式\\\"><a href=\\\"#yield-表达式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> yield 表达式</h4><p>Generator 函数返回的遍历器对象，只有调用 <code>next</code> 方法才会遍历下一个内部状态，这提供了一种可以<strong>暂停执行的函数</strong>的方法。<code>yield</code> 表达式就是暂停标志。</p><p><code>next</code> 方法的运行逻辑如下:</p><ol><li>遇到 <code>yield</code> 表达式，就暂停执行后面的操作，并将紧跟在 <code>yield</code> 后面的那个表达式的值，作为返回的对象的 <code>value</code> 属性值。如果是遇到 <code>return</code> 语句, 将 <code>return</code> 语句后面的表达式的值，作为返回的对象的 <code>value</code> 属性值。</li><li>下一次调用 <code>next</code> 方法时，再继续往下执行，直到遇到下一个 <code>yield</code> 表达式, 或者 <code>return</code> 语句.</li><li>如果到最后, 该函数没有 <code>return</code> 语句，则返回的对象的 <code>value</code> 属性值为 <code>undefined</code></li></ol><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">demo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hello'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">yield</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// OK</span>\\n\\n  <span class=\\\"token keyword\\\">let</span> input <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// OK</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p><code>yield</code> 表达式如果用在另一个表达式之中，必须放在 &quot;圆括号&quot; 里面。\\n但 <code>yield</code> 表达式用作 &quot;函数参数&quot; 或放在 &quot;赋值表达式的右边&quot;，可以不加括号。</p><h4 id=\\\"next-方法的参数\\\"><a href=\\\"#next-方法的参数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> next 方法的参数</h4><p><strong><code>yield</code> 表达式本身总是返回 <code>undefined</code></strong>。<code>nex</code>t 方法可以带一个参数，该参数就会被当作上一个 <code>yield</code> 表达式的返回值。</p><p>这个功能有很重要的语法意义。Generator 函数从暂停状态到恢复运行，它的上下文状态（context）是不变的。通过 <code>next</code> 方法的参数，就有办法在 Generator 函数开始运行之后，继续向函数体内部注入值。也就是说，可以在 Generator 函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> y <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">yield</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> z <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token punctuation\\\">(</span>y <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> y <span class=\\\"token operator\\\">+</span> z<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// Object{value:6, done:false}</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// Object{value:NaN, done:false}</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// Object{value:NaN, done:true}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nb<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// { value:6, done:false }</span>\\nb<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// { value:8, done:false }</span>\\nb<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// { value:42, done:true }</span>\\n</code></pre></div><p>上面代码, 当 <code>next</code> 方法的时候不带参数，导致 <code>y</code> 的值等于 <code>2 * undefined</code>（即 <code>NaN</code>）</p><p>由于 <code>next</code> 方法的参数表示上一个 <code>yield</code> 表达式的返回值，所以在第一次使用 <code>next</code> 方法时，传递参数是无效的。</p><h4 id=\\\"genrator-与-异步编程\\\"><a href=\\\"#genrator-与-异步编程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Genrator 与 异步编程</h4><p>Generator 函数的暂停执行的效果，意味着可以把异步操作写在 <code>yield</code> 表达式里面，等到调用 <code>next</code> 方法时再往后执行。这实际上等同于不需要写回调函数了，因为异步操作的后续操作可以放在 <code>yield</code> 表达式下面</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">loadUI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">showLoadingScreen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">loadUIDataAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">hideLoadingScreen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> loader <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">loadUI</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 加载UI</span>\\nloader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 卸载UI</span>\\nloader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>上面代码, 第一次调用 <code>next</code> 方法，则会显示 <code>Loading</code> 界面（<code>showLoadingScreen</code>），并且异步加载数据（<code>loadUIDataAsync</code>）。等到数据加载完成，再一次使用 <code>next</code> 方法，则会隐藏 <code>Loading</code> 界面。</p><p>下面是用 Generator 处理 Ajax 请求:</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">request</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;http://some.url&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> resp <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">JSON</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>resp<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">request</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">makeAjaxCall</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> it <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nit<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"错误处理\\\"><a href=\\\"#错误处理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 错误处理</h4><p>Generator 函数返回的遍历器对象，都有一个 <code>throw</code> 方法，可以在<strong>函数体外抛出错误，然后在 Generator 函数体内捕获。</strong></p><h4 id=\\\"generator-与-promise\\\"><a href=\\\"#generator-与-promise\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Generator 与 Promise</h4><h3 id=\\\"async-await\\\"><a href=\\\"#async-await\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> async/await</h3><p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。async 函数简单说就是 Generator 函数的语法糖。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">readFile</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>fileName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span>fileName<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">gen</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> f1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/etc/fstab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> f2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/etc/shells'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>f1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>f2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><p>上面代码的函数 <code>gen</code> 可以写成 <code>async</code> 函数，就是下面这样。<code>async</code> 函数就是将 Generator 函数的星号（*）替换成 <code>async</code>，将 <code>yield</code> 替换成 <code>await</code>，仅此而已。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> asyncReadFile <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> f1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/etc/fstab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> f2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">readFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/etc/shells'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>f1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>f2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"基本用法-3\\\"><a href=\\\"#基本用法-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基本用法</h4><p><code>async</code> 函数返回一个 Promise 对象，可以使用 <code>then</code> 方法添加回调函数。<code>await</code> 命令后面一般是一个 Promise 对象.  <code>await</code> 命令返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。</p><p><code>async</code> 函数内部 <code>return</code> 语句返回的值，会成为 <code>then</code> 方法回调函数的参数。但只有 <code>async</code> 函数内部的异步操作执行完，才会执行 <code>then</code> 方法指定的回调函数。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> asyncFun <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hello'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'World'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' '</span> <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">asyncFun</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Hello World</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h4 id=\\\"错误处理-2\\\"><a href=\\\"#错误处理-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 错误处理</h4><p>如果 <code>await</code> 后面的异步操作出错，那么等同于 <code>async</code> 函数返回的 Promise 对象被 <code>reject</code>。防止出错的方法，也是将其放在 <code>try...catch</code> 代码块之中。</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> val1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">firstStep</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> val2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">secondStep</span><span class=\\\"token punctuation\\\">(</span>val1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> val3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">thirdStep</span><span class=\\\"token punctuation\\\">(</span>val1<span class=\\\"token punctuation\\\">,</span> val2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Final: '</span><span class=\\\"token punctuation\\\">,</span> val3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">err</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}