{"remainingRequest":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/Express/基础知识/构建API接口.md?vue&type=template&id=507a0156","dependencies":[{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/docs/nodejs/Express/基础知识/构建API接口.md","mtime":1532742862748},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1532111597631},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/cache-loader/dist/cjs.js","mtime":1532111594974},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vue-loader/lib/index.js","mtime":1532111597630},{"path":"/Users/xiangliu/Projects/Web/front-end-notebook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1532111597717}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"构建-api-接口\\\"><a href=\\\"#构建-api-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 构建 API 接口</h1><blockquote><p>API (Application Programming Interface, 应用程序编程接口)</p></blockquote><p>其实 API 就是一种代码之间交互的一种方式, 例如，Express 中的 <code>app.use</code> 和 <code>app.get</code> 就属于在内部使用 API 。</p><h2 id=\\\"express-驱动的-json-api-服务\\\"><a href=\\\"#express-驱动的-json-api-服务\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Express 驱动的 JSON API 服务</h2><p>使用 Express 构建 API 实现的原理非常简单：通过 中间件 和 内置函数 解析网络请求 并将 JSON 数据和 HTTP 状态码封装到 响应对象 并返回给 客户端。</p><blockquote><p>在这一篇里, API 返回的数据全部是 JSON.</p></blockquote><p>Express 构建 API 的基本流程：</p><ul><li>解析请求</li><li>设置 HTTP 状态码</li><li>返回响应数据</li></ul><h2 id=\\\"curd-操作-api\\\"><a href=\\\"#curd-操作-api\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CURD 操作 API</h2><p>CURD 是对程序中 Create、Read、Update、Delete 四种业务动作的一个简称。(增删改查))</p><p>大多数的应用都会涉及到 CURD 操作。例如，对于一个图片分享应用来说，其中涉及图片的所有操作就是典型的 CRUD：</p><ul><li>用户上传照片的行为对应就是 create 操作。</li><li>用户浏览照片的行为就是 read 操作。</li><li>用户更新照片的行为就是 update 操作。</li><li>用户删除照片的行为就是 delete 操作。</li></ul><h3 id=\\\"http-方法\\\"><a href=\\\"#http-方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> HTTP 方法</h3><p>HTTP 方法明确了对请求 URI 所标识资源进行的操作，而且方法是区分大小写的。</p><p>常用方法:</p><ul><li>GET 是最常用的一个 HTTP 方法，它表示请求服务端资源。例如，加载网站首页、请求图片资源都使用的是 GET。虽然服务端的响应可能不同，但是 <strong>GET 请求并不会改变服务器的资源</strong>。例如，对某图片资源的一次或者多次请求并不会导致图片本身出现任何差别。</li><li>POST 是另一个常用的 HTTP 方法。例如，创建新博客、上传照片、注册用户、清空购物车等业务都是使用 POST 。与 GET 不同的是：<strong>每次 POST 请求都会导致服务端发生修改。</strong></li><li>PUT 方法用于对已有记录的修改，所有我觉得它应该被称为 &quot;UPDATE&quot; 更为合适。例如，修改博客标题、修改用户昵称等操作都是 PUT 操作。另外，PUT 还具备 POST 的功能：就是当要修改的记录不存在时可以进行新建操作（非必需）。其次 PUT 还具有 GET 方法的特点：对同一 URL 的一次或多次 PUT 请求后的结果是一致的。</li><li>DELETE 方法用于记录删除。例如，删除用户文章、删除网络照片。另外，与 PUT 一样同一删除请求无论是执行一次还是多次最终结果是一致的。</li></ul><h3 id=\\\"通过-http-方法构建-crud-接口\\\"><a href=\\\"#通过-http-方法构建-crud-接口\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 通过 HTTP 方法构建 CRUD 接口</h3><p>CRUD 操作与之前四种 HTTP 方法存在对应关系：</p><ul><li>Create = POST</li><li>Read = GET</li><li>Update = PUT</li><li>Delete = DELETE</li></ul><h2 id=\\\"api-版本控制\\\"><a href=\\\"#api-版本控制\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> API 版本控制</h2><p>在 Express 中可以使用 Router 中间件来实现 API 版本管理</p><p>通过把路由绑定在 Router 实例上, 然后再把 Router 挂载在特定路径上可以实现\\b API 版本控制</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;express&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> api <span class=\\\"token operator\\\">=</span> express<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Router</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napi<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;/getSome&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;Some Message...&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> api<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;express&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> apiVersion1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;./api1.js&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;/v1&quot;</span><span class=\\\"token punctuation\\\">,</span> apiVersion1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;App started on port 3000&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><h2 id=\\\"示例代码\\\"><a href=\\\"#示例代码\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 示例代码</h2><p>实现一个指明 最大值 和 最小值, \\b返回随机数字的 \\bAPI.</p><div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'express'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/random/:min/:max'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> min <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>min<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> max <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>max<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token comment\\\">// 错误处理</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>min<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>max<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">status</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">400</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;Bad request.&quot;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">round</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>max <span class=\\\"token operator\\\">-</span> min<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> min<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        \\n        res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> result<span class=\\\"token punctuation\\\">:</span> result <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;监听 3000 端口!&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}